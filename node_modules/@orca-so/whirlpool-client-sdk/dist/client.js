"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhirlpoolClient = void 0;
const transactions_builder_1 = require("./utils/transactions/transactions-builder");
const initialize_config_ix_1 = require("./instructions/initialize-config-ix");
const _1 = require(".");
const initialize_pool_ix_1 = require("./instructions/initialize-pool-ix");
const open_position_ix_1 = require("./instructions/open-position-ix");
const initialize_tick_array_ix_1 = require("./instructions/initialize-tick-array-ix");
const increase_liquidity_ix_1 = require("./instructions/increase-liquidity-ix");
const collect_fees_ix_1 = require("./instructions/collect-fees-ix");
const collect_reward_ix_1 = require("./instructions/collect-reward-ix");
const swap_ix_1 = require("./instructions/swap-ix");
const initialize_reward_ix_1 = require("./instructions/initialize-reward-ix");
const set_reward_emissions_super_authority_ix_1 = require("./instructions/set-reward-emissions-super-authority-ix");
const set_reward_authority_ix_1 = require("./instructions/set-reward-authority-ix");
const set_reward_emissions_ix_1 = require("./instructions/set-reward-emissions-ix");
const close_position_ix_1 = require("./instructions/close-position-ix");
const set_reward_authority_by_super_authority_ix_1 = require("./instructions/set-reward-authority-by-super-authority-ix");
const set_fee_authority_ix_1 = require("./instructions/set-fee-authority-ix");
const set_collect_protocol_fees_authority_ix_1 = require("./instructions/set-collect-protocol-fees-authority-ix");
const update_fees_and_rewards_ix_1 = require("./instructions/update-fees-and-rewards-ix");
const collect_protocol_fees_ix_1 = require("./instructions/collect-protocol-fees-ix");
const decrease_liquidity_ix_1 = require("./instructions/decrease-liquidity-ix");
const set_fee_rate_ix_1 = require("./instructions/set-fee-rate-ix");
const set_default_protocol_fee_rate_ix_1 = require("./instructions/set-default-protocol-fee-rate-ix");
const set_default_fee_rate_ix_1 = require("./instructions/set-default-fee-rate-ix");
const set_protocol_fee_rate_ix_1 = require("./instructions/set-protocol-fee-rate-ix");
const initialize_fee_tier_1 = require("./instructions/initialize-fee-tier");
const decimal_js_1 = require("decimal.js");
// Global rules for Decimals
//  - 40 digits of precision for the largest number
//  - 20 digits of precision for the smallest number
//  - Always round towards 0 to mirror smart contract rules
decimal_js_1.Decimal.set({ precision: 40, toExpPos: 40, toExpNeg: -20, rounding: 1 });
/**
 * WhirlpoolClient provides a portal to perform admin-type tasks on the Whirlpool protocol.
 */
class WhirlpoolClient {
    constructor(context) {
        this.context = context;
    }
    /**
     * Construct a TransactionBuilder to initialize a WhirlpoolConfig account with the provided parameters.
     * @param params Parameters to configure the initialized WhirlpoolConfig account
     * @returns A TransactionBuilder to initialize a WhirlpoolConfig account with the provided parameters.
     */
    initConfigTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, initialize_config_ix_1.buildInitializeConfigIx)(this.context, params));
    }
    /**
     * Fetches and parses a WhirlpoolConfig account.
     * @param poolPubKey A public key of a WhirlpoolConfig account
     * @returns A WhirlpoolConfig type containing the parameters stored on the account
     */
    getConfig(configPubKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const program = this.context.program;
            const account = yield program.account.whirlpoolsConfig.fetch(configPubKey);
            // TODO: If we feel nice we can build a builder or something instead of casting
            return account;
        });
    }
    /**
     * Parses a WhirlpoolConfig account.
     * @param data A buffer containing data fetched from an account
     * @returns A WhirlpoolConfig type containing the parameters stored on the account
     */
    parseConfig(data) {
        return (0, _1.parseWhirlpoolsConfig)(data);
    }
    /**
     * Construct a TransactionBuilder to initialize a FeeTier account with the provided parameters.
     * @param params Parameters to configure the initialized FeeTier account
     * @returns A TransactionBuilder to initialize a FeeTier account with the provided parameters.
     */
    initFeeTierTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, initialize_fee_tier_1.buildInitializeFeeTier)(this.context, params));
    }
    /**
     * Fetches and parses a FeeTier account.
     * @param feeTierKey A public key of a FeeTier account
     * @returns A FeeTier type containing the parameters stored on the account
     */
    getFeeTier(feeTierKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const program = this.context.program;
            const feeTierAccount = yield program.account.feeTier.fetch(feeTierKey);
            return feeTierAccount;
        });
    }
    /**
     * Construct a TransactionBuilder to initialize a Whirlpool account with the provided parameters.
     * @param params Parameters to configure the initialized Whirlpool account
     * @returns A TransactionBuilder to initialize a Whirlpool account with the provided parameters.
     */
    initPoolTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, initialize_pool_ix_1.buildInitPoolIx)(this.context, params));
    }
    /**
     * Fetches and parses a Whirlpool account.
     * @param poolPubKey A public key of a Whirlpool account
     * @returns A Whirlpool type containing the parameters stored on the account
     */
    getPool(poolKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const program = this.context.program;
            const whirlpoolAccount = yield program.account.whirlpool.fetch(poolKey);
            return whirlpoolAccount;
        });
    }
    /**
     * Parses a Whirlpool account.
     * @param data A buffer containing data fetched from an account
     * @returns A Whirlpool type containing the parameters stored on the account
     */
    parsePool(data) {
        return (0, _1.parseWhirlpool)(data);
    }
    /**
     * Construct a TransactionBuilder to open a Position account.
     * @param params Parameters to configure the initialized Position account.
     * @returns A TransactionBuilder to initialize a Position account with the provided parameters.
     */
    openPositionTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, open_position_ix_1.buildOpenPositionIx)(this.context, params));
    }
    /**
     * Construct a TransactionBuilder to open a Position account with metadata.
     * @param params Parameters to configure the initialized Position account.
     * @returns A TransactionBuilder to initialize a Position account with the provided parameters.
     */
    openPositionWithMetadataTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, open_position_ix_1.buildOpenPositionWithMetadataIx)(this.context, params));
    }
    closePositionTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, close_position_ix_1.buildClosePositionIx)(this.context, params));
    }
    /**
     * Fetches a Position account.
     * @param positionKey The public key of the Position account
     * @returns A Position type containing the parameters stored on the account
     */
    getPosition(positionKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const positionAccount = yield this.context.program.account.position.fetch(positionKey);
            return positionAccount;
        });
    }
    /**
     * Parses a Position account.
     * @param data A buffer containing data fetched from an account
     * @returns A Position type containing the parameters stored on the account
     */
    parsePosition(data) {
        return (0, _1.parsePosition)(data);
    }
    /*
     * Construct a TransactionBuilder to initialize a TickArray account with the provided parameters.
     * @param params Parameters to configure the initialized TickArray account
     * @returns A TransactionBuilder to initialize a TickArray account with the provided parameters.
     */
    initTickArrayTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, initialize_tick_array_ix_1.buildInitTickArrayIx)(this.context, params));
    }
    /**
     * Fetches and parses a TickArray account. Account is used to store Ticks for a Whirlpool.
     * @param arrayPubKey A public key of a TickArray account
     * @returns A TickArrayData type containing the parameters stored on the account
     */
    getTickArray(arrayPubKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const program = this.context.program;
            const tickArrayAccount = yield program.account.tickArray.fetch(arrayPubKey);
            return tickArrayAccount;
        });
    }
    /**
     * Parses a TickArray account.
     * @param data A buffer containing data fetched from an account
     * @returns A Position type containing the parameters stored on the account
     */
    parseTickArray(data) {
        return (0, _1.parseTickArray)(data);
    }
    initializeRewardTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, initialize_reward_ix_1.buildInitializeRewardIx)(this.context, params));
    }
    setRewardEmissionsTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_reward_emissions_ix_1.buildSetRewardEmissionsIx)(this.context, params));
    }
    /**
     * Construct a TransactionBuilder to increase the liquidity of a Position.
     * @param params Parameters to configure the increase liquidity instruction
     * @returns A TransactionBuilder containing one increase liquidity instruction
     */
    increaseLiquidityTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, increase_liquidity_ix_1.buildIncreaseLiquidityIx)(this.context, params));
    }
    decreaseLiquidityTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, decrease_liquidity_ix_1.buildDecreaseLiquidityIx)(this.context, params));
    }
    updateFeesAndRewards(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, update_fees_and_rewards_ix_1.buildUpdateFeesAndRewardsIx)(this.context, params));
    }
    /**
     * Construct a TransactionBuilder to collect the fees for a Position.
     * @param params Parameters to configure the collect fees instruction
     * @returns A TransactionBuilder containing one collect fees instruction
     */
    collectFeesTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, collect_fees_ix_1.buildCollectFeesIx)(this.context, params));
    }
    /**
     * Construct a TransactionBuilder to collect a reward at the specified index for a Position.
     * @param params Parameters to configure the collect reward instruction
     * @returns A TransactionBuilder containing one collect reward instruction
     */
    collectRewardTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, collect_reward_ix_1.buildCollectRewardIx)(this.context, params));
    }
    collectProtocolFeesTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, collect_protocol_fees_ix_1.buildCollectProtocolFeesIx)(this.context, params));
    }
    swapTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, swap_ix_1.buildSwapIx)(this.context, params));
    }
    setRewardEmissionsSuperAuthorityTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_reward_emissions_super_authority_ix_1.buildSetRewardEmissionsSuperAuthorityIx)(this.context, params));
    }
    setRewardAuthorityTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_reward_authority_ix_1.buildSetRewardAuthorityIx)(this.context, params));
    }
    setRewardAuthorityBySuperAuthorityTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_reward_authority_by_super_authority_ix_1.buildSetRewardAuthorityBySuperAuthorityIx)(this.context, params));
    }
    setFeeAuthorityTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_fee_authority_ix_1.buildSetFeeAuthorityIx)(this.context, params));
    }
    setCollectProtocolFeesAuthorityTx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_collect_protocol_fees_authority_ix_1.buildSetCollectProtocolFeesAuthorityIx)(this.context, params));
    }
    setFeeRateIx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_fee_rate_ix_1.buildSetFeeRateIx)(this.context, params));
    }
    setProtocolFeeRateIx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_protocol_fee_rate_ix_1.buildSetProtocolFeeRateIx)(this.context, params));
    }
    setDefaultFeeRateIx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_default_fee_rate_ix_1.buildSetDefaultFeeRateIx)(this.context, params));
    }
    setDefaultProtocolFeeRateIx(params) {
        return new transactions_builder_1.TransactionBuilder(this.context.provider).addInstruction((0, set_default_protocol_fee_rate_ix_1.buildSetDefaultProtocolFeeRateIx)(this.context, params));
    }
}
exports.WhirlpoolClient = WhirlpoolClient;
