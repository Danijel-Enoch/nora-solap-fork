import { u64 } from "@solana/spl-token";
import { Keypair, PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import { TickSpacing } from "./account-types";
import { PDA } from "./helper-types";
export declare type InitConfigParams = {
    whirlpoolConfigKeypair: Keypair;
    feeAuthority: PublicKey;
    collectProtocolFeesAuthority: PublicKey;
    rewardEmissionsSuperAuthority: PublicKey;
    defaultProtocolFeeRate: number;
    funder: PublicKey;
};
export declare type InitFeeTierParams = {
    feeTierPda: PDA;
    feeAuthority: PublicKey;
    whirlpoolConfigKey: PublicKey;
    tickSpacing: TickSpacing;
    defaultFeeRate: number;
    funder: PublicKey;
};
export declare type InitPoolParams = {
    initSqrtPrice: BN;
    whirlpoolConfigKey: PublicKey;
    tokenMintA: PublicKey;
    tokenMintB: PublicKey;
    whirlpoolPda: PDA;
    feeTierKey: PublicKey;
    tokenVaultAKeypair: Keypair;
    tokenVaultBKeypair: Keypair;
    tickSpacing: TickSpacing;
    funder: PublicKey;
};
export declare type InitTickArrayParams = {
    whirlpool: PublicKey;
    tickArrayPda: PDA;
    startTick: number;
    funder: PublicKey;
};
export declare type InitializeRewardParams = {
    rewardAuthority: PublicKey;
    funder: PublicKey;
    whirlpool: PublicKey;
    rewardMint: PublicKey;
    rewardVaultKeypair: Keypair;
    rewardIndex: number;
};
export declare type SetRewardEmissionsParams = {
    rewardAuthority: PublicKey;
    whirlpool: PublicKey;
    rewardIndex: number;
    rewardVault: PublicKey;
    emissionsPerSecondX64: BN;
};
export declare type OpenPositionParams = {
    funder: PublicKey;
    ownerKey: PublicKey;
    positionPda: PDA;
    metadataPda?: PDA;
    positionMintAddress: PublicKey;
    positionTokenAccountAddress: PublicKey;
    whirlpoolKey: PublicKey;
    tickLowerIndex: number;
    tickUpperIndex: number;
};
export declare type ClosePositionParams = {
    positionAuthority: PublicKey;
    receiver: PublicKey;
    position: PublicKey;
    positionMint: PublicKey;
    positionTokenAccount: PublicKey;
};
export declare type IncreaseLiquidityParams = {
    liquidityAmount: BN;
    tokenMaxA: u64;
    tokenMaxB: u64;
    whirlpool: PublicKey;
    positionAuthority: PublicKey;
    position: PublicKey;
    positionTokenAccount: PublicKey;
    tokenOwnerAccountA: PublicKey;
    tokenOwnerAccountB: PublicKey;
    tokenVaultA: PublicKey;
    tokenVaultB: PublicKey;
    tickArrayLower: PublicKey;
    tickArrayUpper: PublicKey;
};
export declare type DecreaseLiquidityParams = {
    liquidityAmount: BN;
    tokenMinA: u64;
    tokenMinB: u64;
    whirlpool: PublicKey;
    positionAuthority: PublicKey;
    position: PublicKey;
    positionTokenAccount: PublicKey;
    tokenOwnerAccountA: PublicKey;
    tokenOwnerAccountB: PublicKey;
    tokenVaultA: PublicKey;
    tokenVaultB: PublicKey;
    tickArrayLower: PublicKey;
    tickArrayUpper: PublicKey;
};
export declare type UpdateFeesAndRewardsParams = {
    whirlpool: PublicKey;
    position: PublicKey;
    tickArrayLower: PublicKey;
    tickArrayUpper: PublicKey;
};
export declare type CollectFeesParams = {
    whirlpool: PublicKey;
    positionAuthority: PublicKey;
    position: PublicKey;
    positionTokenAccount: PublicKey;
    tokenOwnerAccountA: PublicKey;
    tokenOwnerAccountB: PublicKey;
    tokenVaultA: PublicKey;
    tokenVaultB: PublicKey;
};
export declare type CollectRewardParams = {
    whirlpool: PublicKey;
    positionAuthority: PublicKey;
    position: PublicKey;
    positionTokenAccount: PublicKey;
    rewardOwnerAccount: PublicKey;
    rewardVault: PublicKey;
    rewardIndex: number;
};
export declare type CollectProtocolFeesParams = {
    whirlpoolsConfig: PublicKey;
    whirlpool: PublicKey;
    collectProtocolFeesAuthority: PublicKey;
    tokenVaultA: PublicKey;
    tokenVaultB: PublicKey;
    tokenDestinationA: PublicKey;
    tokenDestinationB: PublicKey;
};
export declare type SwapParams = {
    amount: u64;
    otherAmountThreshold: u64;
    sqrtPriceLimit: BN;
    amountSpecifiedIsInput: boolean;
    aToB: boolean;
    whirlpool: PublicKey;
    tokenAuthority: PublicKey;
    tokenOwnerAccountA: PublicKey;
    tokenVaultA: PublicKey;
    tokenOwnerAccountB: PublicKey;
    tokenVaultB: PublicKey;
    tickArray0: PublicKey;
    tickArray1: PublicKey;
    tickArray2: PublicKey;
    oracle: PublicKey;
};
export declare type SetRewardEmissionsSuperAuthorityParams = {
    whirlpoolsConfig: PublicKey;
    rewardEmissionsSuperAuthority: PublicKey;
    newRewardEmissionsSuperAuthority: PublicKey;
};
export declare type SetRewardAuthorityParams = {
    whirlpool: PublicKey;
    rewardAuthority: PublicKey;
    newRewardAuthority: PublicKey;
    rewardIndex: number;
};
export declare type SetRewardAuthorityBySuperAuthorityParams = {
    whirlpoolsConfig: PublicKey;
    whirlpool: PublicKey;
    rewardEmissionsSuperAuthority: PublicKey;
    newRewardAuthority: PublicKey;
    rewardIndex: number;
};
export declare type SetFeeAuthorityParams = {
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    newFeeAuthority: PublicKey;
};
export declare type SetCollectProtocolFeesAuthorityParams = {
    whirlpoolsConfig: PublicKey;
    collectProtocolFeesAuthority: PublicKey;
    newCollectProtocolFeesAuthority: PublicKey;
};
export declare type SetFeeRateParams = {
    whirlpool: PublicKey;
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    feeRate: number;
};
export declare type SetProtocolFeeRateParams = {
    whirlpool: PublicKey;
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    protocolFeeRate: number;
};
export declare type SetDefaultFeeRateParams = {
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    tickSpacing: TickSpacing;
    defaultFeeRate: number;
};
export declare type SetDefaultProtocolFeeRateParams = {
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    defaultProtocolFeeRate: number;
};
