"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTickArray = exports.parsePosition = exports.parseWhirlpool = exports.parseWhirlpoolsConfig = void 0;
const anchor_1 = require("@project-serum/anchor");
const anchor_types_1 = require("../../types/public/anchor-types");
const WhirlpoolIDL = __importStar(require("../../artifacts/whirlpool.json"));
const WhirlpoolCoder = new anchor_1.BorshCoder(WhirlpoolIDL);
function parseWhirlpoolsConfig(data) {
    return parse(anchor_types_1.AccountName.WhirlpoolsConfig, data);
}
exports.parseWhirlpoolsConfig = parseWhirlpoolsConfig;
function parseWhirlpool(data) {
    return parse(anchor_types_1.AccountName.Whirlpool, data);
}
exports.parseWhirlpool = parseWhirlpool;
function parsePosition(data) {
    return parse(anchor_types_1.AccountName.Position, data);
}
exports.parsePosition = parsePosition;
function parseTickArray(data) {
    return parse(anchor_types_1.AccountName.TickArray, data);
}
exports.parseTickArray = parseTickArray;
function parse(accountName, data) {
    const discriminator = anchor_1.BorshAccountsCoder.accountDiscriminator(accountName);
    if (discriminator.compare(data.slice(0, 8))) {
        console.error("incorrect account name during parsing");
        return null;
    }
    try {
        return WhirlpoolCoder.accounts.decode(accountName, data);
    }
    catch (_e) {
        console.error("unknown account name during parsing");
        return null;
    }
}
