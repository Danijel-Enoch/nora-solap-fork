import { Connection, ConfirmOptions, PublicKey, TransactionInstruction, Signer, Transaction, Keypair } from '@solana/web3.js';
import { Program, Provider, BN } from '@project-serum/anchor';
import { Wallet } from '@project-serum/anchor/dist/cjs/provider';
import { u64 } from '@solana/spl-token';
import BN$1 from 'bn.js';
import Decimal from 'decimal.js';

declare type Whirlpool = {
    "version": "0.1.0";
    "name": "whirlpool";
    "instructions": [
        {
            "name": "initializeConfig";
            "accounts": [
                {
                    "name": "config";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "feeAuthority";
                    "type": "publicKey";
                },
                {
                    "name": "collectProtocolFeesAuthority";
                    "type": "publicKey";
                },
                {
                    "name": "rewardEmissionsSuperAuthority";
                    "type": "publicKey";
                },
                {
                    "name": "defaultProtocolFeeRate";
                    "type": "u16";
                }
            ];
        },
        {
            "name": "initializePool";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenMintA";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenMintB";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultA";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "tokenVaultB";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "feeTier";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "bumps";
                    "type": {
                        "defined": "WhirlpoolBumps";
                    };
                },
                {
                    "name": "tickSpacing";
                    "type": "u16";
                },
                {
                    "name": "initialSqrtPrice";
                    "type": "u128";
                }
            ];
        },
        {
            "name": "initializeTickArray";
            "accounts": [
                {
                    "name": "whirlpool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "tickArray";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "startTickIndex";
                    "type": "i32";
                }
            ];
        },
        {
            "name": "initializeFeeTier";
            "accounts": [
                {
                    "name": "config";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "feeTier";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "feeAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "tickSpacing";
                    "type": "u16";
                },
                {
                    "name": "defaultFeeRate";
                    "type": "u16";
                }
            ];
        },
        {
            "name": "initializeReward";
            "accounts": [
                {
                    "name": "rewardAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "rewardMint";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rewardVault";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "rewardIndex";
                    "type": "u8";
                }
            ];
        },
        {
            "name": "setRewardEmissions";
            "accounts": [
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "rewardAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "rewardVault";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "rewardIndex";
                    "type": "u8";
                },
                {
                    "name": "emissionsPerSecondX64";
                    "type": "u128";
                }
            ];
        },
        {
            "name": "openPosition";
            "accounts": [
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionMint";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "positionTokenAccount";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "whirlpool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "associatedTokenProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "bumps";
                    "type": {
                        "defined": "OpenPositionBumps";
                    };
                },
                {
                    "name": "tickLowerIndex";
                    "type": "i32";
                },
                {
                    "name": "tickUpperIndex";
                    "type": "i32";
                }
            ];
        },
        {
            "name": "openPositionWithMetadata";
            "accounts": [
                {
                    "name": "funder";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "owner";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionMint";
                    "isMut": true;
                    "isSigner": true;
                },
                {
                    "name": "positionMetadataAccount";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionTokenAccount";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "whirlpool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "systemProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rent";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "associatedTokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "metadataProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "metadataUpdateAuth";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "bumps";
                    "type": {
                        "defined": "OpenPositionWithMetadataBumps";
                    };
                },
                {
                    "name": "tickLowerIndex";
                    "type": "i32";
                },
                {
                    "name": "tickUpperIndex";
                    "type": "i32";
                }
            ];
        },
        {
            "name": "increaseLiquidity";
            "accounts": [
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "positionAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionTokenAccount";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenOwnerAccountA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenOwnerAccountB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickArrayLower";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickArrayUpper";
                    "isMut": true;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "liquidityAmount";
                    "type": "u128";
                },
                {
                    "name": "tokenMaxA";
                    "type": "u64";
                },
                {
                    "name": "tokenMaxB";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "decreaseLiquidity";
            "accounts": [
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "positionAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionTokenAccount";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenOwnerAccountA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenOwnerAccountB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickArrayLower";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickArrayUpper";
                    "isMut": true;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "liquidityAmount";
                    "type": "u128";
                },
                {
                    "name": "tokenMaxA";
                    "type": "u64";
                },
                {
                    "name": "tokenMaxB";
                    "type": "u64";
                }
            ];
        },
        {
            "name": "updateFeesAndRewards";
            "accounts": [
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickArrayLower";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tickArrayUpper";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "collectFees";
            "accounts": [
                {
                    "name": "whirlpool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "positionAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionTokenAccount";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenOwnerAccountA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenOwnerAccountB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "collectReward";
            "accounts": [
                {
                    "name": "whirlpool";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "positionAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionTokenAccount";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "rewardOwnerAccount";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "rewardVault";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "rewardIndex";
                    "type": "u8";
                }
            ];
        },
        {
            "name": "collectProtocolFees";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "collectProtocolFeesAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "tokenVaultA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenDestinationA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenDestinationB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "swap";
            "accounts": [
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "tokenAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenOwnerAccountA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultA";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenOwnerAccountB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenVaultB";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickArray0";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickArray1";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tickArray2";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "oracle";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "amount";
                    "type": "u64";
                },
                {
                    "name": "otherAmountThreshold";
                    "type": "u64";
                },
                {
                    "name": "sqrtPriceLimit";
                    "type": "u128";
                },
                {
                    "name": "exactInput";
                    "type": "bool";
                },
                {
                    "name": "aToB";
                    "type": "bool";
                }
            ];
        },
        {
            "name": "closePosition";
            "accounts": [
                {
                    "name": "positionAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "receiver";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "position";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionMint";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "positionTokenAccount";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "tokenProgram";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "setDefaultFeeRate";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "feeTier";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "feeAuthority";
                    "isMut": false;
                    "isSigner": true;
                }
            ];
            "args": [
                {
                    "name": "defaultFeeRate";
                    "type": "u16";
                }
            ];
        },
        {
            "name": "setDefaultProtocolFeeRate";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "feeAuthority";
                    "isMut": false;
                    "isSigner": true;
                }
            ];
            "args": [
                {
                    "name": "defaultProtocolFeeRate";
                    "type": "u16";
                }
            ];
        },
        {
            "name": "setFeeRate";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "feeAuthority";
                    "isMut": false;
                    "isSigner": true;
                }
            ];
            "args": [
                {
                    "name": "feeRate";
                    "type": "u16";
                }
            ];
        },
        {
            "name": "setProtocolFeeRate";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "feeAuthority";
                    "isMut": false;
                    "isSigner": true;
                }
            ];
            "args": [
                {
                    "name": "protocolFeeRate";
                    "type": "u16";
                }
            ];
        },
        {
            "name": "setFeeAuthority";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "feeAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "newFeeAuthority";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "setCollectProtocolFeesAuthority";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "collectProtocolFeesAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "newCollectProtocolFeesAuthority";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        },
        {
            "name": "setRewardAuthority";
            "accounts": [
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "rewardAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "newRewardAuthority";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "rewardIndex";
                    "type": "u8";
                }
            ];
        },
        {
            "name": "setRewardAuthorityBySuperAuthority";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": false;
                    "isSigner": false;
                },
                {
                    "name": "whirlpool";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "rewardEmissionsSuperAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "newRewardAuthority";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [
                {
                    "name": "rewardIndex";
                    "type": "u8";
                }
            ];
        },
        {
            "name": "setRewardEmissionsSuperAuthority";
            "accounts": [
                {
                    "name": "whirlpoolsConfig";
                    "isMut": true;
                    "isSigner": false;
                },
                {
                    "name": "rewardEmissionsSuperAuthority";
                    "isMut": false;
                    "isSigner": true;
                },
                {
                    "name": "newRewardEmissionsSuperAuthority";
                    "isMut": false;
                    "isSigner": false;
                }
            ];
            "args": [];
        }
    ];
    "accounts": [
        {
            "name": "whirlpoolsConfig";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "feeAuthority";
                        "type": "publicKey";
                    },
                    {
                        "name": "collectProtocolFeesAuthority";
                        "type": "publicKey";
                    },
                    {
                        "name": "rewardEmissionsSuperAuthority";
                        "type": "publicKey";
                    },
                    {
                        "name": "defaultProtocolFeeRate";
                        "type": "u16";
                    }
                ];
            };
        },
        {
            "name": "feeTier";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "whirlpoolsConfig";
                        "type": "publicKey";
                    },
                    {
                        "name": "tickSpacing";
                        "type": "u16";
                    },
                    {
                        "name": "defaultFeeRate";
                        "type": "u16";
                    }
                ];
            };
        },
        {
            "name": "position";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "whirlpool";
                        "type": "publicKey";
                    },
                    {
                        "name": "positionMint";
                        "type": "publicKey";
                    },
                    {
                        "name": "liquidity";
                        "type": "u128";
                    },
                    {
                        "name": "tickLowerIndex";
                        "type": "i32";
                    },
                    {
                        "name": "tickUpperIndex";
                        "type": "i32";
                    },
                    {
                        "name": "feeGrowthCheckpointA";
                        "type": "u128";
                    },
                    {
                        "name": "feeOwedA";
                        "type": "u64";
                    },
                    {
                        "name": "feeGrowthCheckpointB";
                        "type": "u128";
                    },
                    {
                        "name": "feeOwedB";
                        "type": "u64";
                    },
                    {
                        "name": "rewardInfos";
                        "type": {
                            "array": [
                                {
                                    "defined": "PositionRewardInfo";
                                },
                                3
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "tickArray";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "startTickIndex";
                        "type": "i32";
                    },
                    {
                        "name": "ticks";
                        "type": {
                            "array": [
                                {
                                    "defined": "Tick";
                                },
                                88
                            ];
                        };
                    },
                    {
                        "name": "whirlpool";
                        "type": "publicKey";
                    }
                ];
            };
        },
        {
            "name": "whirlpool";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "whirlpoolsConfig";
                        "type": "publicKey";
                    },
                    {
                        "name": "whirlpoolBump";
                        "type": {
                            "array": [
                                "u8",
                                1
                            ];
                        };
                    },
                    {
                        "name": "tickSpacing";
                        "type": "u16";
                    },
                    {
                        "name": "tickSpacingSeed";
                        "type": {
                            "array": [
                                "u8",
                                2
                            ];
                        };
                    },
                    {
                        "name": "feeRate";
                        "type": "u16";
                    },
                    {
                        "name": "protocolFeeRate";
                        "type": "u16";
                    },
                    {
                        "name": "liquidity";
                        "type": "u128";
                    },
                    {
                        "name": "sqrtPrice";
                        "type": "u128";
                    },
                    {
                        "name": "tickCurrentIndex";
                        "type": "i32";
                    },
                    {
                        "name": "protocolFeeOwedA";
                        "type": "u64";
                    },
                    {
                        "name": "protocolFeeOwedB";
                        "type": "u64";
                    },
                    {
                        "name": "tokenMintA";
                        "type": "publicKey";
                    },
                    {
                        "name": "tokenVaultA";
                        "type": "publicKey";
                    },
                    {
                        "name": "feeGrowthGlobalA";
                        "type": "u128";
                    },
                    {
                        "name": "tokenMintB";
                        "type": "publicKey";
                    },
                    {
                        "name": "tokenVaultB";
                        "type": "publicKey";
                    },
                    {
                        "name": "feeGrowthGlobalB";
                        "type": "u128";
                    },
                    {
                        "name": "rewardLastUpdatedTimestamp";
                        "type": "u64";
                    },
                    {
                        "name": "rewardInfos";
                        "type": {
                            "array": [
                                {
                                    "defined": "WhirlpoolRewardInfo";
                                },
                                3
                            ];
                        };
                    }
                ];
            };
        }
    ];
    "types": [
        {
            "name": "OpenPositionBumps";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "positionBump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "OpenPositionWithMetadataBumps";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "positionBump";
                        "type": "u8";
                    },
                    {
                        "name": "metadataBump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "PositionRewardInfo";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "growthInsideCheckpoint";
                        "type": "u128";
                    },
                    {
                        "name": "amountOwed";
                        "type": "u64";
                    }
                ];
            };
        },
        {
            "name": "Tick";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "initialized";
                        "type": "bool";
                    },
                    {
                        "name": "liquidityNet";
                        "type": "i128";
                    },
                    {
                        "name": "liquidityGross";
                        "type": "u128";
                    },
                    {
                        "name": "feeGrowthOutsideA";
                        "type": "u128";
                    },
                    {
                        "name": "feeGrowthOutsideB";
                        "type": "u128";
                    },
                    {
                        "name": "rewardGrowthsOutside";
                        "type": {
                            "array": [
                                "u128",
                                3
                            ];
                        };
                    }
                ];
            };
        },
        {
            "name": "WhirlpoolRewardInfo";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "mint";
                        "type": "publicKey";
                    },
                    {
                        "name": "vault";
                        "type": "publicKey";
                    },
                    {
                        "name": "authority";
                        "type": "publicKey";
                    },
                    {
                        "name": "emissionsPerSecondX64";
                        "type": "u128";
                    },
                    {
                        "name": "growthGlobalX64";
                        "type": "u128";
                    }
                ];
            };
        },
        {
            "name": "WhirlpoolBumps";
            "type": {
                "kind": "struct";
                "fields": [
                    {
                        "name": "whirlpoolBump";
                        "type": "u8";
                    }
                ];
            };
        },
        {
            "name": "CurrIndex";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "Below";
                    },
                    {
                        "name": "Inside";
                    },
                    {
                        "name": "Above";
                    }
                ];
            };
        },
        {
            "name": "TickLabel";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "Upper";
                    },
                    {
                        "name": "Lower";
                    }
                ];
            };
        },
        {
            "name": "Direction";
            "type": {
                "kind": "enum";
                "variants": [
                    {
                        "name": "Left";
                    },
                    {
                        "name": "Right";
                    }
                ];
            };
        }
    ];
    "errors": [
        {
            "code": 6000;
            "name": "InvalidEnum";
            "msg": "Enum value could not be converted";
        },
        {
            "code": 6001;
            "name": "InvalidStartTick";
            "msg": "Invalid start tick index provided.";
        },
        {
            "code": 6002;
            "name": "TickArrayExistInPool";
            "msg": "Tick-array already exists in this whirlpool";
        },
        {
            "code": 6003;
            "name": "TickArrayIndexOutofBounds";
            "msg": "Attempt to search for a tick-array failed";
        },
        {
            "code": 6004;
            "name": "InvalidTickSpacing";
            "msg": "Tick-spacing is not supported";
        },
        {
            "code": 6005;
            "name": "ClosePositionNotEmpty";
            "msg": "Position is not empty It cannot be closed";
        },
        {
            "code": 6006;
            "name": "DivideByZero";
            "msg": "Unable to divide by zero";
        },
        {
            "code": 6007;
            "name": "NumberCastError";
            "msg": "Unable to cast number into BigInt";
        },
        {
            "code": 6008;
            "name": "NumberDownCastError";
            "msg": "Unable to down cast number";
        },
        {
            "code": 6009;
            "name": "TickNotFound";
            "msg": "Tick not found within tick array";
        },
        {
            "code": 6010;
            "name": "InvalidTickIndex";
            "msg": "Provided tick index is either out of bounds or uninitializable";
        },
        {
            "code": 6011;
            "name": "SqrtPriceOutOfBounds";
            "msg": "Provided sqrt price out of bounds";
        },
        {
            "code": 6012;
            "name": "LiquidityZero";
            "msg": "Liquidity amount must be greater than zero";
        },
        {
            "code": 6013;
            "name": "LiquidityTooHigh";
            "msg": "Liquidity amount must be less than i64::MAX";
        },
        {
            "code": 6014;
            "name": "LiquidityOverflow";
            "msg": "Liquidity overflow";
        },
        {
            "code": 6015;
            "name": "LiquidityUnderflow";
            "msg": "Liquidity underflow";
        },
        {
            "code": 6016;
            "name": "LiquidityNetError";
            "msg": "Tick liquidity net underflowed or overflowed";
        },
        {
            "code": 6017;
            "name": "TokenMaxExceeded";
            "msg": "Exceeded token max";
        },
        {
            "code": 6018;
            "name": "TokenMinSubceeded";
            "msg": "Did not meet token min";
        },
        {
            "code": 6019;
            "name": "MissingOrInvalidDelegate";
            "msg": "Position token account has a missing or invalid delegate";
        },
        {
            "code": 6020;
            "name": "InvalidPositionTokenAmount";
            "msg": "Position token amount must be 1";
        },
        {
            "code": 6021;
            "name": "InvalidTimestampConversion";
            "msg": "Timestamp should be convertible from i64 to u64";
        },
        {
            "code": 6022;
            "name": "InvalidTimestamp";
            "msg": "Timestamp should be greater than the last updated timestamp";
        },
        {
            "code": 6023;
            "name": "InvalidTickArraySequence";
            "msg": "Invalid tick array sequence provided for instruction.";
        },
        {
            "code": 6024;
            "name": "InvalidTokenMintOrder";
            "msg": "Token Mint in wrong order";
        },
        {
            "code": 6025;
            "name": "RewardNotInitialized";
            "msg": "Reward not initialized";
        },
        {
            "code": 6026;
            "name": "InvalidRewardIndex";
            "msg": "Invalid reward index";
        },
        {
            "code": 6027;
            "name": "RewardVaultAmountInsufficient";
            "msg": "Reward vault requires amount to support emissions for at least one day";
        },
        {
            "code": 6028;
            "name": "FeeRateMaxExceeded";
            "msg": "Exceeded max fee rate";
        },
        {
            "code": 6029;
            "name": "ProtocolFeeRateMaxExceeded";
            "msg": "Exceeded max protocol fee rate";
        },
        {
            "code": 6030;
            "name": "MultiplicationShiftRightOverflow";
            "msg": "Multiplication with shift right overflow";
        },
        {
            "code": 6031;
            "name": "MulDivOverflow";
            "msg": "Muldiv overflow";
        },
        {
            "code": 6032;
            "name": "MulDivInvalidInput";
            "msg": "Invalid div_u256 input";
        },
        {
            "code": 6033;
            "name": "MultiplicationOverflow";
            "msg": "Multiplication overflow";
        },
        {
            "code": 6034;
            "name": "InvalidSqrtPriceLimitDirection";
            "msg": "Provided SqrtPriceLimit not in the same direction as the swap.";
        },
        {
            "code": 6035;
            "name": "ZeroTradableAmount";
            "msg": "There are no tradable amount to swap.";
        },
        {
            "code": 6036;
            "name": "AmountOutBelowMinimum";
            "msg": "Amount out below minimum threshold";
        },
        {
            "code": 6037;
            "name": "AmountInAboveMaximum";
            "msg": "Amount in above maximum threshold";
        }
    ];
};

declare class WhirlpoolContext {
    readonly connection: Connection;
    readonly wallet: Wallet;
    readonly opts: ConfirmOptions;
    readonly program: Program<Whirlpool>;
    readonly provider: Provider;
    static from(connection: Connection, wallet: Wallet, programId: PublicKey, opts?: ConfirmOptions): WhirlpoolContext;
    static fromWorkspace(provider: Provider, program: Program, opts?: ConfirmOptions): WhirlpoolContext;
    static withProvider(provider: Provider, programId: PublicKey, opts?: ConfirmOptions): WhirlpoolContext;
    constructor(provider: Provider, program: Program, opts: ConfirmOptions);
}

/**
 * This file contains the types that the client exposes to SDK users.
 *
 * TODO: This file may or may not exist pending SDK's approach on parsing
 * the Whirlpool Accounts.
 *
 */
interface WhirlpoolConfigAccount {
    feeAuthority: PublicKey;
    collectProtocolFeesAuthority: PublicKey;
    rewardEmissionsSuperAuthority: PublicKey;
    defaultFeeRate: number;
    defaultProtocolFeeRate: number;
}
declare enum TickSpacing {
    Stable = 8,
    Standard = 128
}

declare const EMPTY_INSTRUCTION: Instruction;
declare type Instruction = {
    instructions: TransactionInstruction[];
    cleanupInstructions: TransactionInstruction[];
    signers: Signer[];
};
declare type TransactionPayload = {
    transaction: Transaction;
    signers: Signer[];
};
declare class TransactionBuilder {
    private provider;
    private instructions;
    private signers;
    constructor(provider: Provider);
    addInstruction(instruction: Instruction): TransactionBuilder;
    addSigner(signer: Signer): TransactionBuilder;
    isEmpty(): boolean;
    /**
     * Compresses all instructions & signers in this builder
     * into one single instruction
     * @param compressPost Compress all post instructions into the instructions field
     * @returns Instruction object containing all
     */
    compressIx(compressPost: boolean): Instruction;
    /**
     * Constructs a transaction payload with the gathered instructions
     * @returns a TransactionPayload object that can be excuted or agregated into other transactions
     */
    build(): Promise<TransactionPayload>;
    /**
     * Constructs a transaction payload with the gathered instructions, sign it with the provider and send it out
     * @returns the txId of the transaction
     */
    buildAndExecute(): Promise<string>;
}

/**
 * This file contains the types that has the same structure as the types anchor functions returns.
 * These types are hard-casted by the client function.
 *
 * This file must be manually updated every time the idl updates as accounts will
 * be hard-casted to fit the type.
 */
declare enum AccountName {
    WhirlpoolsConfig = "WhirlpoolsConfig",
    Position = "Position",
    TickArray = "TickArray",
    Whirlpool = "Whirlpool"
}
declare type TickSpacingData = {
    stable?: {};
    standard?: {};
};
declare type WhirlpoolRewardInfoData = {
    mint: PublicKey;
    vault: PublicKey;
    authority: PublicKey;
    emissionsPerSecondX64: BN;
    growthGlobalX64: BN;
};
declare type WhirlpoolBumpsData = {
    whirlpoolBump: number;
};
declare type WhirlpoolData = {
    whirlpoolsConfig: PublicKey;
    whirlpoolBump: number[];
    feeRate: number;
    protocolFeeRate: number;
    liquidity: BN;
    sqrtPrice: BN;
    tickCurrentIndex: number;
    protocolFeeOwedA: BN;
    protocolFeeOwedB: BN;
    tokenMintA: PublicKey;
    tokenVaultA: PublicKey;
    feeGrowthGlobalA: BN;
    tokenMintB: PublicKey;
    tokenVaultB: PublicKey;
    feeGrowthGlobalB: BN;
    rewardLastUpdatedTimestamp: BN;
    rewardInfos: WhirlpoolRewardInfoData[];
    tickSpacing: number;
};
declare type TickArrayData = {
    whirlpool: PublicKey;
    startTickIndex: number;
    ticks: TickData[];
};
declare type TickData = {
    initialized: boolean;
    liquidityNet: BN;
    liquidityGross: BN;
    feeGrowthOutsideA: BN;
    feeGrowthOutsideB: BN;
    rewardGrowthsOutside: BN[];
};
declare type PositionRewardInfoData = {
    growthInsideCheckpoint: BN;
    amountOwed: BN;
};
declare type OpenPositionBumpsData = {
    positionBump: number;
};
declare type OpenPositionWithMetadataBumpsData = {
    positionBump: number;
    metadataBump: number;
};
declare type PositionData = {
    whirlpool: PublicKey;
    positionMint: PublicKey;
    liquidity: BN;
    tickLowerIndex: number;
    tickUpperIndex: number;
    feeGrowthCheckpointA: BN;
    feeOwedA: BN;
    feeGrowthCheckpointB: BN;
    feeOwedB: BN;
    rewardInfos: PositionRewardInfoData[];
};
declare type FeeTierData = {
    whirlpoolsConfig: PublicKey;
    tickSpacing: number;
    defaultFeeRate: number;
};

/**
 * WhirlpoolClient provides a portal to perform admin-type tasks on the Whirlpool protocol.
 */
declare class WhirlpoolClient {
    readonly context: WhirlpoolContext;
    constructor(context: WhirlpoolContext);
    /**
     * Construct a TransactionBuilder to initialize a WhirlpoolConfig account with the provided parameters.
     * @param params Parameters to configure the initialized WhirlpoolConfig account
     * @returns A TransactionBuilder to initialize a WhirlpoolConfig account with the provided parameters.
     */
    initConfigTx(params: InitConfigParams): TransactionBuilder;
    /**
     * Fetches and parses a WhirlpoolConfig account.
     * @param poolPubKey A public key of a WhirlpoolConfig account
     * @returns A WhirlpoolConfig type containing the parameters stored on the account
     */
    getConfig(configPubKey: PublicKey): Promise<WhirlpoolConfigAccount>;
    /**
     * Parses a WhirlpoolConfig account.
     * @param data A buffer containing data fetched from an account
     * @returns A WhirlpoolConfig type containing the parameters stored on the account
     */
    parseConfig(data: Buffer): WhirlpoolConfigAccount | null;
    /**
     * Construct a TransactionBuilder to initialize a FeeTier account with the provided parameters.
     * @param params Parameters to configure the initialized FeeTier account
     * @returns A TransactionBuilder to initialize a FeeTier account with the provided parameters.
     */
    initFeeTierTx(params: InitFeeTierParams): TransactionBuilder;
    /**
     * Fetches and parses a FeeTier account.
     * @param feeTierKey A public key of a FeeTier account
     * @returns A FeeTier type containing the parameters stored on the account
     */
    getFeeTier(feeTierKey: PublicKey): Promise<FeeTierData>;
    /**
     * Construct a TransactionBuilder to initialize a Whirlpool account with the provided parameters.
     * @param params Parameters to configure the initialized Whirlpool account
     * @returns A TransactionBuilder to initialize a Whirlpool account with the provided parameters.
     */
    initPoolTx(params: InitPoolParams): TransactionBuilder;
    /**
     * Fetches and parses a Whirlpool account.
     * @param poolPubKey A public key of a Whirlpool account
     * @returns A Whirlpool type containing the parameters stored on the account
     */
    getPool(poolKey: PublicKey): Promise<WhirlpoolData>;
    /**
     * Parses a Whirlpool account.
     * @param data A buffer containing data fetched from an account
     * @returns A Whirlpool type containing the parameters stored on the account
     */
    parsePool(data: Buffer): WhirlpoolData | null;
    /**
     * Construct a TransactionBuilder to open a Position account.
     * @param params Parameters to configure the initialized Position account.
     * @returns A TransactionBuilder to initialize a Position account with the provided parameters.
     */
    openPositionTx(params: OpenPositionParams): TransactionBuilder;
    /**
     * Construct a TransactionBuilder to open a Position account with metadata.
     * @param params Parameters to configure the initialized Position account.
     * @returns A TransactionBuilder to initialize a Position account with the provided parameters.
     */
    openPositionWithMetadataTx(params: Required<OpenPositionParams>): TransactionBuilder;
    closePositionTx(params: ClosePositionParams): TransactionBuilder;
    /**
     * Fetches a Position account.
     * @param positionKey The public key of the Position account
     * @returns A Position type containing the parameters stored on the account
     */
    getPosition(positionKey: PublicKey): Promise<PositionData>;
    /**
     * Parses a Position account.
     * @param data A buffer containing data fetched from an account
     * @returns A Position type containing the parameters stored on the account
     */
    parsePosition(data: Buffer): PositionData | null;
    initTickArrayTx(params: InitTickArrayParams): TransactionBuilder;
    /**
     * Fetches and parses a TickArray account. Account is used to store Ticks for a Whirlpool.
     * @param arrayPubKey A public key of a TickArray account
     * @returns A TickArrayData type containing the parameters stored on the account
     */
    getTickArray(arrayPubKey: PublicKey): Promise<TickArrayData>;
    /**
     * Parses a TickArray account.
     * @param data A buffer containing data fetched from an account
     * @returns A Position type containing the parameters stored on the account
     */
    parseTickArray(data: Buffer): TickArrayData | null;
    initializeRewardTx(params: InitializeRewardParams): TransactionBuilder;
    setRewardEmissionsTx(params: SetRewardEmissionsParams): TransactionBuilder;
    /**
     * Construct a TransactionBuilder to increase the liquidity of a Position.
     * @param params Parameters to configure the increase liquidity instruction
     * @returns A TransactionBuilder containing one increase liquidity instruction
     */
    increaseLiquidityTx(params: IncreaseLiquidityParams): TransactionBuilder;
    decreaseLiquidityTx(params: DecreaseLiquidityParams): TransactionBuilder;
    updateFeesAndRewards(params: UpdateFeesAndRewardsParams): TransactionBuilder;
    /**
     * Construct a TransactionBuilder to collect the fees for a Position.
     * @param params Parameters to configure the collect fees instruction
     * @returns A TransactionBuilder containing one collect fees instruction
     */
    collectFeesTx(params: CollectFeesParams): TransactionBuilder;
    /**
     * Construct a TransactionBuilder to collect a reward at the specified index for a Position.
     * @param params Parameters to configure the collect reward instruction
     * @returns A TransactionBuilder containing one collect reward instruction
     */
    collectRewardTx(params: CollectRewardParams): TransactionBuilder;
    collectProtocolFeesTx(params: CollectProtocolFeesParams): TransactionBuilder;
    swapTx(params: SwapParams): TransactionBuilder;
    setRewardEmissionsSuperAuthorityTx(params: SetRewardEmissionsSuperAuthorityParams): TransactionBuilder;
    setRewardAuthorityTx(params: SetRewardAuthorityParams): TransactionBuilder;
    setRewardAuthorityBySuperAuthorityTx(params: SetRewardAuthorityBySuperAuthorityParams): TransactionBuilder;
    setFeeAuthorityTx(params: SetFeeAuthorityParams): TransactionBuilder;
    setCollectProtocolFeesAuthorityTx(params: SetCollectProtocolFeesAuthorityParams): TransactionBuilder;
    setFeeRateIx(params: SetFeeRateParams): TransactionBuilder;
    setProtocolFeeRateIx(params: SetProtocolFeeRateParams): TransactionBuilder;
    setDefaultFeeRateIx(params: SetDefaultFeeRateParams): TransactionBuilder;
    setDefaultProtocolFeeRateIx(params: SetDefaultProtocolFeeRateParams): TransactionBuilder;
}

declare type PDA = {
    publicKey: PublicKey;
    bump: number;
};

declare type InitConfigParams = {
    whirlpoolConfigKeypair: Keypair;
    feeAuthority: PublicKey;
    collectProtocolFeesAuthority: PublicKey;
    rewardEmissionsSuperAuthority: PublicKey;
    defaultProtocolFeeRate: number;
    funder: PublicKey;
};
declare type InitFeeTierParams = {
    feeTierPda: PDA;
    feeAuthority: PublicKey;
    whirlpoolConfigKey: PublicKey;
    tickSpacing: TickSpacing;
    defaultFeeRate: number;
    funder: PublicKey;
};
declare type InitPoolParams = {
    initSqrtPrice: BN$1;
    whirlpoolConfigKey: PublicKey;
    tokenMintA: PublicKey;
    tokenMintB: PublicKey;
    whirlpoolPda: PDA;
    feeTierKey: PublicKey;
    tokenVaultAKeypair: Keypair;
    tokenVaultBKeypair: Keypair;
    tickSpacing: TickSpacing;
    funder: PublicKey;
};
declare type InitTickArrayParams = {
    whirlpool: PublicKey;
    tickArrayPda: PDA;
    startTick: number;
    funder: PublicKey;
};
declare type InitializeRewardParams = {
    rewardAuthority: PublicKey;
    funder: PublicKey;
    whirlpool: PublicKey;
    rewardMint: PublicKey;
    rewardVaultKeypair: Keypair;
    rewardIndex: number;
};
declare type SetRewardEmissionsParams = {
    rewardAuthority: PublicKey;
    whirlpool: PublicKey;
    rewardIndex: number;
    rewardVault: PublicKey;
    emissionsPerSecondX64: BN$1;
};
declare type OpenPositionParams = {
    funder: PublicKey;
    ownerKey: PublicKey;
    positionPda: PDA;
    metadataPda?: PDA;
    positionMintAddress: PublicKey;
    positionTokenAccountAddress: PublicKey;
    whirlpoolKey: PublicKey;
    tickLowerIndex: number;
    tickUpperIndex: number;
};
declare type ClosePositionParams = {
    positionAuthority: PublicKey;
    receiver: PublicKey;
    position: PublicKey;
    positionMint: PublicKey;
    positionTokenAccount: PublicKey;
};
declare type IncreaseLiquidityParams = {
    liquidityAmount: BN$1;
    tokenMaxA: u64;
    tokenMaxB: u64;
    whirlpool: PublicKey;
    positionAuthority: PublicKey;
    position: PublicKey;
    positionTokenAccount: PublicKey;
    tokenOwnerAccountA: PublicKey;
    tokenOwnerAccountB: PublicKey;
    tokenVaultA: PublicKey;
    tokenVaultB: PublicKey;
    tickArrayLower: PublicKey;
    tickArrayUpper: PublicKey;
};
declare type DecreaseLiquidityParams = {
    liquidityAmount: BN$1;
    tokenMinA: u64;
    tokenMinB: u64;
    whirlpool: PublicKey;
    positionAuthority: PublicKey;
    position: PublicKey;
    positionTokenAccount: PublicKey;
    tokenOwnerAccountA: PublicKey;
    tokenOwnerAccountB: PublicKey;
    tokenVaultA: PublicKey;
    tokenVaultB: PublicKey;
    tickArrayLower: PublicKey;
    tickArrayUpper: PublicKey;
};
declare type UpdateFeesAndRewardsParams = {
    whirlpool: PublicKey;
    position: PublicKey;
    tickArrayLower: PublicKey;
    tickArrayUpper: PublicKey;
};
declare type CollectFeesParams = {
    whirlpool: PublicKey;
    positionAuthority: PublicKey;
    position: PublicKey;
    positionTokenAccount: PublicKey;
    tokenOwnerAccountA: PublicKey;
    tokenOwnerAccountB: PublicKey;
    tokenVaultA: PublicKey;
    tokenVaultB: PublicKey;
};
declare type CollectRewardParams = {
    whirlpool: PublicKey;
    positionAuthority: PublicKey;
    position: PublicKey;
    positionTokenAccount: PublicKey;
    rewardOwnerAccount: PublicKey;
    rewardVault: PublicKey;
    rewardIndex: number;
};
declare type CollectProtocolFeesParams = {
    whirlpoolsConfig: PublicKey;
    whirlpool: PublicKey;
    collectProtocolFeesAuthority: PublicKey;
    tokenVaultA: PublicKey;
    tokenVaultB: PublicKey;
    tokenDestinationA: PublicKey;
    tokenDestinationB: PublicKey;
};
declare type SwapParams = {
    amount: u64;
    otherAmountThreshold: u64;
    sqrtPriceLimit: BN$1;
    amountSpecifiedIsInput: boolean;
    aToB: boolean;
    whirlpool: PublicKey;
    tokenAuthority: PublicKey;
    tokenOwnerAccountA: PublicKey;
    tokenVaultA: PublicKey;
    tokenOwnerAccountB: PublicKey;
    tokenVaultB: PublicKey;
    tickArray0: PublicKey;
    tickArray1: PublicKey;
    tickArray2: PublicKey;
    oracle: PublicKey;
};
declare type SetRewardEmissionsSuperAuthorityParams = {
    whirlpoolsConfig: PublicKey;
    rewardEmissionsSuperAuthority: PublicKey;
    newRewardEmissionsSuperAuthority: PublicKey;
};
declare type SetRewardAuthorityParams = {
    whirlpool: PublicKey;
    rewardAuthority: PublicKey;
    newRewardAuthority: PublicKey;
    rewardIndex: number;
};
declare type SetRewardAuthorityBySuperAuthorityParams = {
    whirlpoolsConfig: PublicKey;
    whirlpool: PublicKey;
    rewardEmissionsSuperAuthority: PublicKey;
    newRewardAuthority: PublicKey;
    rewardIndex: number;
};
declare type SetFeeAuthorityParams = {
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    newFeeAuthority: PublicKey;
};
declare type SetCollectProtocolFeesAuthorityParams = {
    whirlpoolsConfig: PublicKey;
    collectProtocolFeesAuthority: PublicKey;
    newCollectProtocolFeesAuthority: PublicKey;
};
declare type SetFeeRateParams = {
    whirlpool: PublicKey;
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    feeRate: number;
};
declare type SetProtocolFeeRateParams = {
    whirlpool: PublicKey;
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    protocolFeeRate: number;
};
declare type SetDefaultFeeRateParams = {
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    tickSpacing: TickSpacing;
    defaultFeeRate: number;
};
declare type SetDefaultProtocolFeeRateParams = {
    whirlpoolsConfig: PublicKey;
    feeAuthority: PublicKey;
    defaultProtocolFeeRate: number;
};

declare const NUM_REWARDS = 3;

declare function getWhirlpoolPda(programId: PublicKey, whirlpoolConfigKey: PublicKey, tokenMintAKey: PublicKey, tokenMintBKey: PublicKey, tickSpacing: TickSpacing): PDA;
declare function getWhirlpoolVaultAPda(programId: PublicKey, whirlpoolKey: PublicKey, tokenMintAKey: PublicKey): PDA;
declare function getWhirlpoolVaultBPda(programId: PublicKey, whirlpoolKey: PublicKey, tokenMintBKey: PublicKey): PDA;
declare function getPositionPda(programId: PublicKey, positionMintKey: PublicKey): PDA;
declare const METADATA_PROGRAM_ADDRESS: PublicKey;
declare function getPositionMetadataPda(positionMintKey: PublicKey): PDA;
declare function getTickArrayPda(programId: PublicKey, whirlpoolAddress: PublicKey, startTick: number): PDA;
declare function getFeeTierPda(programId: PublicKey, whirlpoolsConfigAddress: PublicKey, tickSpacing: TickSpacing): PDA;
declare function getOraclePda(programId: PublicKey, whirlpoolAddress: PublicKey): PDA;

declare function toX64_BN(num: BN): BN;
declare function toX64_Decimal(num: Decimal): Decimal;
declare function toX64(num: Decimal): BN;
declare function fromX64(num: BN): Decimal;
declare function fromX64_Decimal(num: Decimal): Decimal;
declare function fromX64_BN(num: BN): BN;

declare function parseWhirlpoolsConfig(data: Buffer): WhirlpoolConfigAccount | null;
declare function parseWhirlpool(data: Buffer): WhirlpoolData | null;
declare function parsePosition(data: Buffer): PositionData | null;
declare function parseTickArray(data: Buffer): TickArrayData | null;

declare const MAX_TICK_INDEX = 443636;
declare const MIN_TICK_INDEX = -443636;
declare const TICK_ARRAY_SIZE = 88;
declare const MAX_SQRT_PRICE = "79226673515401279992447579055";
declare const MIN_SQRT_PRICE = "4295048016";
declare function tickIndexToSqrtPriceX64(tickIndex: number): BN;
declare function sqrtPriceX64ToTickIndex(sqrtPriceX64: BN): number;
declare function getStartTickIndex(tickIndex: number, tickSpacing: TickSpacing): number;

declare type TokenAmounts = {
    tokenA: u64;
    tokenB: u64;
};
declare function toTokenAmount(a: number, b: number): TokenAmounts;
/**
 * Estimate the liquidity amount required to increase/decrease liquidity.
 *
 * // TODO: At the top end of the price range, tick calcuation is off therefore the results can be off
 *
 * @param currTick - Whirlpool's current tick index (aka price)
 * @param lowerTick - Position lower tick index
 * @param upperTick - Position upper tick index
 * @param tokenAmount - The desired amount of tokens to deposit/withdraw
 * @returns An estimated amount of liquidity needed to deposit/withdraw the desired amount of tokens.
 */
declare function estimateLiquidityFromTokenAmounts(currTick: number, lowerTick: number, upperTick: number, tokenAmount: TokenAmounts): BN;
declare function getTokenAmountsFromLiquidity(liquidity: u64, currentPrice: u64, lowerPrice: u64, upperPrice: u64, round_up: boolean): TokenAmounts;

export { AccountName, ClosePositionParams, CollectFeesParams, CollectProtocolFeesParams, CollectRewardParams, DecreaseLiquidityParams, EMPTY_INSTRUCTION, FeeTierData, IncreaseLiquidityParams, InitConfigParams, InitFeeTierParams, InitPoolParams, InitTickArrayParams, InitializeRewardParams, Instruction, MAX_SQRT_PRICE, MAX_TICK_INDEX, METADATA_PROGRAM_ADDRESS, MIN_SQRT_PRICE, MIN_TICK_INDEX, NUM_REWARDS, OpenPositionBumpsData, OpenPositionParams, OpenPositionWithMetadataBumpsData, PDA, PositionData, PositionRewardInfoData, SetCollectProtocolFeesAuthorityParams, SetDefaultFeeRateParams, SetDefaultProtocolFeeRateParams, SetFeeAuthorityParams, SetFeeRateParams, SetProtocolFeeRateParams, SetRewardAuthorityBySuperAuthorityParams, SetRewardAuthorityParams, SetRewardEmissionsParams, SetRewardEmissionsSuperAuthorityParams, SwapParams, TICK_ARRAY_SIZE, TickArrayData, TickData, TickSpacing, TickSpacingData, TokenAmounts, TransactionBuilder, TransactionPayload, UpdateFeesAndRewardsParams, WhirlpoolBumpsData, WhirlpoolClient, WhirlpoolConfigAccount, WhirlpoolContext, WhirlpoolData, WhirlpoolRewardInfoData, estimateLiquidityFromTokenAmounts, fromX64, fromX64_BN, fromX64_Decimal, getFeeTierPda, getOraclePda, getPositionMetadataPda, getPositionPda, getStartTickIndex, getTickArrayPda, getTokenAmountsFromLiquidity, getWhirlpoolPda, getWhirlpoolVaultAPda, getWhirlpoolVaultBPda, parsePosition, parseTickArray, parseWhirlpool, parseWhirlpoolsConfig, sqrtPriceX64ToTickIndex, tickIndexToSqrtPriceX64, toTokenAmount, toX64, toX64_BN, toX64_Decimal };
