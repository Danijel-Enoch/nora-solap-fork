/// <reference types="node" />
import { WhirlpoolContext } from "./context";
import { PublicKey } from "@solana/web3.js";
import { WhirlpoolConfigAccount } from "./types/public/account-types";
import { TransactionBuilder } from "./utils/transactions/transactions-builder";
import { ClosePositionParams, CollectFeesParams, CollectProtocolFeesParams, CollectRewardParams, InitConfigParams, InitializeRewardParams, InitPoolParams, InitTickArrayParams, OpenPositionParams, SetCollectProtocolFeesAuthorityParams, SetFeeAuthorityParams, SetRewardAuthorityBySuperAuthorityParams, SetRewardAuthorityParams, SetRewardEmissionsParams, SetRewardEmissionsSuperAuthorityParams, SwapParams, UpdateFeesAndRewardsParams, SetFeeRateParams, SetDefaultProtocolFeeRateParams, SetProtocolFeeRateParams, SetDefaultFeeRateParams, DecreaseLiquidityParams, IncreaseLiquidityParams, InitFeeTierParams } from ".";
import { FeeTierData, PositionData, TickArrayData, WhirlpoolData } from "./types/public/anchor-types";
/**
 * WhirlpoolClient provides a portal to perform admin-type tasks on the Whirlpool protocol.
 */
export declare class WhirlpoolClient {
    readonly context: WhirlpoolContext;
    constructor(context: WhirlpoolContext);
    /**
     * Construct a TransactionBuilder to initialize a WhirlpoolConfig account with the provided parameters.
     * @param params Parameters to configure the initialized WhirlpoolConfig account
     * @returns A TransactionBuilder to initialize a WhirlpoolConfig account with the provided parameters.
     */
    initConfigTx(params: InitConfigParams): TransactionBuilder;
    /**
     * Fetches and parses a WhirlpoolConfig account.
     * @param poolPubKey A public key of a WhirlpoolConfig account
     * @returns A WhirlpoolConfig type containing the parameters stored on the account
     */
    getConfig(configPubKey: PublicKey): Promise<WhirlpoolConfigAccount>;
    /**
     * Parses a WhirlpoolConfig account.
     * @param data A buffer containing data fetched from an account
     * @returns A WhirlpoolConfig type containing the parameters stored on the account
     */
    parseConfig(data: Buffer): WhirlpoolConfigAccount | null;
    /**
     * Construct a TransactionBuilder to initialize a FeeTier account with the provided parameters.
     * @param params Parameters to configure the initialized FeeTier account
     * @returns A TransactionBuilder to initialize a FeeTier account with the provided parameters.
     */
    initFeeTierTx(params: InitFeeTierParams): TransactionBuilder;
    /**
     * Fetches and parses a FeeTier account.
     * @param feeTierKey A public key of a FeeTier account
     * @returns A FeeTier type containing the parameters stored on the account
     */
    getFeeTier(feeTierKey: PublicKey): Promise<FeeTierData>;
    /**
     * Construct a TransactionBuilder to initialize a Whirlpool account with the provided parameters.
     * @param params Parameters to configure the initialized Whirlpool account
     * @returns A TransactionBuilder to initialize a Whirlpool account with the provided parameters.
     */
    initPoolTx(params: InitPoolParams): TransactionBuilder;
    /**
     * Fetches and parses a Whirlpool account.
     * @param poolPubKey A public key of a Whirlpool account
     * @returns A Whirlpool type containing the parameters stored on the account
     */
    getPool(poolKey: PublicKey): Promise<WhirlpoolData>;
    /**
     * Parses a Whirlpool account.
     * @param data A buffer containing data fetched from an account
     * @returns A Whirlpool type containing the parameters stored on the account
     */
    parsePool(data: Buffer): WhirlpoolData | null;
    /**
     * Construct a TransactionBuilder to open a Position account.
     * @param params Parameters to configure the initialized Position account.
     * @returns A TransactionBuilder to initialize a Position account with the provided parameters.
     */
    openPositionTx(params: OpenPositionParams): TransactionBuilder;
    /**
     * Construct a TransactionBuilder to open a Position account with metadata.
     * @param params Parameters to configure the initialized Position account.
     * @returns A TransactionBuilder to initialize a Position account with the provided parameters.
     */
    openPositionWithMetadataTx(params: Required<OpenPositionParams>): TransactionBuilder;
    closePositionTx(params: ClosePositionParams): TransactionBuilder;
    /**
     * Fetches a Position account.
     * @param positionKey The public key of the Position account
     * @returns A Position type containing the parameters stored on the account
     */
    getPosition(positionKey: PublicKey): Promise<PositionData>;
    /**
     * Parses a Position account.
     * @param data A buffer containing data fetched from an account
     * @returns A Position type containing the parameters stored on the account
     */
    parsePosition(data: Buffer): PositionData | null;
    initTickArrayTx(params: InitTickArrayParams): TransactionBuilder;
    /**
     * Fetches and parses a TickArray account. Account is used to store Ticks for a Whirlpool.
     * @param arrayPubKey A public key of a TickArray account
     * @returns A TickArrayData type containing the parameters stored on the account
     */
    getTickArray(arrayPubKey: PublicKey): Promise<TickArrayData>;
    /**
     * Parses a TickArray account.
     * @param data A buffer containing data fetched from an account
     * @returns A Position type containing the parameters stored on the account
     */
    parseTickArray(data: Buffer): TickArrayData | null;
    initializeRewardTx(params: InitializeRewardParams): TransactionBuilder;
    setRewardEmissionsTx(params: SetRewardEmissionsParams): TransactionBuilder;
    /**
     * Construct a TransactionBuilder to increase the liquidity of a Position.
     * @param params Parameters to configure the increase liquidity instruction
     * @returns A TransactionBuilder containing one increase liquidity instruction
     */
    increaseLiquidityTx(params: IncreaseLiquidityParams): TransactionBuilder;
    decreaseLiquidityTx(params: DecreaseLiquidityParams): TransactionBuilder;
    updateFeesAndRewards(params: UpdateFeesAndRewardsParams): TransactionBuilder;
    /**
     * Construct a TransactionBuilder to collect the fees for a Position.
     * @param params Parameters to configure the collect fees instruction
     * @returns A TransactionBuilder containing one collect fees instruction
     */
    collectFeesTx(params: CollectFeesParams): TransactionBuilder;
    /**
     * Construct a TransactionBuilder to collect a reward at the specified index for a Position.
     * @param params Parameters to configure the collect reward instruction
     * @returns A TransactionBuilder containing one collect reward instruction
     */
    collectRewardTx(params: CollectRewardParams): TransactionBuilder;
    collectProtocolFeesTx(params: CollectProtocolFeesParams): TransactionBuilder;
    swapTx(params: SwapParams): TransactionBuilder;
    setRewardEmissionsSuperAuthorityTx(params: SetRewardEmissionsSuperAuthorityParams): TransactionBuilder;
    setRewardAuthorityTx(params: SetRewardAuthorityParams): TransactionBuilder;
    setRewardAuthorityBySuperAuthorityTx(params: SetRewardAuthorityBySuperAuthorityParams): TransactionBuilder;
    setFeeAuthorityTx(params: SetFeeAuthorityParams): TransactionBuilder;
    setCollectProtocolFeesAuthorityTx(params: SetCollectProtocolFeesAuthorityParams): TransactionBuilder;
    setFeeRateIx(params: SetFeeRateParams): TransactionBuilder;
    setProtocolFeeRateIx(params: SetProtocolFeeRateParams): TransactionBuilder;
    setDefaultFeeRateIx(params: SetDefaultFeeRateParams): TransactionBuilder;
    setDefaultProtocolFeeRateIx(params: SetDefaultProtocolFeeRateParams): TransactionBuilder;
}
