"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const __1 = require("../..");
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const config_1 = require("../../config");
const config = new config_1.Config(__1.IDS);
const cluster = (process.env.CLUSTER || 'devnet');
const groupName = process.env.GROUP || 'devnet.3';
const marketIndex = 5;
const groupIds = config.getGroup(cluster, groupName);
const perpMarketInfo = groupIds.perpMarkets.find((m) => m.marketIndex == marketIndex);
const payer = web3_js_1.Keypair.fromSecretKey(Uint8Array.from(JSON.parse(process.env.PRIVATE_KEY ||
    fs.readFileSync(process.env.KEYPAIR || os.homedir() + '/.config/solana/devnet.json', 'utf-8'))));
function removeMarket() {
    return __awaiter(this, void 0, void 0, function* () {
        const connection = new web3_js_1.Connection(config.cluster_urls[cluster]);
        const client = new __1.MangoClient(connection, groupIds.mangoProgramId);
        const group = yield client.getMangoGroup(groupIds.publicKey);
        //const perpMarket = await group.loadPerpMarket(connection, marketIndex, perpMarketInfo.baseDecimals, perpMarketInfo.quoteDecimals);
        const [dustAccountPk] = yield web3_js_1.PublicKey.findProgramAddress([group.publicKey.toBytes(), Buffer.from('DustAccount', 'utf-8')], groupIds.mangoProgramId);
        const rootBanks = yield group.loadRootBanks(connection);
        const setMarketModeTx = new web3_js_1.Transaction().add(
        // makeRemovePerpMarketInstruction(
        //     groupIds.mangoProgramId,
        //     groupIds.publicKey,
        //     payer.publicKey,
        //     perpMarket.publicKey,
        //     perpMarket.eventQueue,
        //     perpMarket.bids,
        //     perpMarket.asks,
        //     perpMarket.mngoVault,
        //     new PublicKey('HA36WDCQUCFzqYB69sNTshs4yLZNkCtHVRdDML4nXHzD'),
        //     group.signerKey,
        // )
        (0, __1.makeRemoveSpotMarketInstruction)(groupIds.mangoProgramId, groupIds.publicKey, payer.publicKey, dustAccountPk, rootBanks[marketIndex].publicKey, new web3_js_1.PublicKey('FW7r4ZhJc7J78R76Z2wK9uUq6tazucx2GNrTzENCxqvA'), group.signerKey, [rootBanks[marketIndex].nodeBanks[0]], [rootBanks[marketIndex].nodeBankAccounts[0].vault]));
        yield client.sendTransaction(setMarketModeTx, payer, []);
    });
}
removeMarket();
//# sourceMappingURL=removeMarket.js.map