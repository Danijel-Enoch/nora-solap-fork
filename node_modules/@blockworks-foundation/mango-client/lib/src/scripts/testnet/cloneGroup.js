"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Clones an existing group, writers to ids.json
 */
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const os = __importStar(require("os"));
const fs = __importStar(require("fs"));
const __1 = require("../..");
const serum_1 = require("@project-serum/serum");
const path_1 = __importDefault(require("path"));
const cluster = (process.env.CLUSTER || 'devnet');
const clusterUrl = 'https://mango.devnet.rpcpool.com';
const keypairPath = os.homedir() + '/.config/solana/devnet.json';
const oldGroupName = 'devnet.2';
const newGroupName = 'devnet.4';
const mangoProgramId = '5mUyxYoFX2fyQ5A34jErFBRipC5rQNQ8gC2K73qV6xiJ';
const serumProgramId = new web3_js_1.PublicKey('DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY');
const cloneGroup = () => __awaiter(void 0, void 0, void 0, function* () {
    console.log(`Cloning ${oldGroupName} into ${newGroupName}`);
    const payer = web3_js_1.Keypair.fromSecretKey(Uint8Array.from(JSON.parse(process.env.KEYPAIR ||
        fs.readFileSync(os.homedir() + '/.config/solana/devnet.json', 'utf-8'))));
    const connection = new web3_js_1.Connection(clusterUrl, 'processed');
    const client = new __1.MangoClient(connection, new web3_js_1.PublicKey(mangoProgramId));
    const oldGroupIds = new __1.Config(__1.IDS).getGroup(cluster, oldGroupName);
    const oldGroup = yield client.getMangoGroup(oldGroupIds.publicKey);
    const quoteMint = oldGroup.tokens[__1.QUOTE_INDEX].mint;
    const quoteToken = new spl_token_1.Token(connection, quoteMint, spl_token_1.TOKEN_PROGRAM_ID, payer);
    const newGroupExists = new __1.Config(__1.IDS).getGroup(cluster, newGroupName) != undefined;
    const feesVault = yield quoteToken
        .getOrCreateAssociatedAccountInfo(payer.publicKey)
        .then((a) => a.address);
    if (!newGroupExists) {
        yield execCommand(`yarn cli init-group ${newGroupName} ${mangoProgramId} ${serumProgramId.toBase58()} ${quoteMint.toBase58()} ${feesVault.toBase58()}`);
        console.log(`new group initialized`);
        yield (0, __1.sleep)(500);
    }
    const groupIds = new __1.Config(getLatestIds()).getGroup(cluster, newGroupName);
    const newGroup = yield client.getMangoGroup(groupIds.publicKey);
    for (let i = 0; i < oldGroupIds.oracles.length; i++) {
        const oracle = oldGroupIds.oracles[i];
        const symbol = oracle.symbol;
        const tokenConfig = oldGroupIds.tokens.find(x => x.symbol == symbol);
        const spotMarketConfig = oldGroupIds.spotMarkets.find(x => x.baseSymbol == symbol);
        const perpMarketConfig = oldGroupIds.perpMarkets.find(t => t.baseSymbol == symbol);
        const oracleProvider = cluster == 'mainnet' && ['MNGO', 'AVAX'].includes(symbol) ? 'switchboard' : 'pyth';
        if (!newGroup.oracles[i] || newGroup.oracles[i].equals(web3_js_1.PublicKey.default)) {
            console.log(`adding ${symbol} oracle`);
            yield execCommand(`yarn cli add-oracle ${newGroupName} ${symbol} --provider ${oracleProvider}`);
            yield (0, __1.sleep)(2500);
        }
        if (spotMarketConfig && newGroup.spotMarkets[i].isEmpty() && !oldGroup.spotMarkets[i].isEmpty()) {
            console.log(`listing and adding ${symbol} spot market`);
            const spotMarketInfo = oldGroup.spotMarkets[spotMarketConfig.marketIndex];
            const oldMarket = yield serum_1.Market.load(connection, spotMarketInfo.spotMarket, undefined, serumProgramId);
            const initLeverage = Math.round((100 * -1) / (spotMarketInfo.initAssetWeight.toNumber() - 1));
            const maintLeverage = Math.round((100 * -1) / (spotMarketInfo.maintAssetWeight.toNumber() - 1));
            const oldRootBank = (yield oldGroup.loadRootBanks(connection)).find(x => x && x.publicKey.equals(tokenConfig.rootKey));
            yield execCommand(`yarn cli add-spot-market ${newGroupName} ${symbol} ${tokenConfig.mintKey.toBase58()} ${spotMarketInfo.spotMarket.toBase58()}` +
                ` --init_leverage ${initLeverage}` +
                ` --maint_leverage ${maintLeverage}` +
                ` --liquidation_fee ${spotMarketInfo.liquidationFee.toNumber()}` +
                ` --optimal_util ${oldRootBank.optimalUtil.toNumber()}` +
                ` --optimal_rate ${oldRootBank.optimalRate.toNumber()}` +
                ` --max_rate ${oldRootBank.maxRate.toNumber()}`);
            yield (0, __1.sleep)(2500);
        }
        if (perpMarketConfig && newGroup.perpMarkets[i].isEmpty() && !oldGroup.perpMarkets[i].isEmpty()) {
            console.log(`adding ${symbol} perp market`);
            const perpMarketInfo = oldGroup.perpMarkets[perpMarketConfig.marketIndex];
            const initLeverage = Math.round((100 * -1) / (perpMarketInfo.initAssetWeight.toNumber() - 1));
            const maintLeverage = Math.round((100 * -1) / (perpMarketInfo.maintAssetWeight.toNumber() - 1));
            const perpMarket = yield oldGroup.loadPerpMarket(connection, perpMarketConfig.marketIndex, perpMarketConfig.baseDecimals, perpMarketConfig.quoteDecimals);
            yield execCommand(`yarn cli add-perp-market ${newGroupName} ${symbol}` +
                ` --init_leverage ${initLeverage}` +
                ` --maint_leverage ${maintLeverage}` +
                ` --liquidation_fee ${perpMarketInfo.liquidationFee.toNumber()}` +
                ` --base_lot_size ${perpMarketInfo.baseLotSize}` +
                ` --quote_lot_size ${perpMarketInfo.quoteLotSize}` +
                ` --maker_fee ${perpMarketInfo.makerFee.toNumber()}` +
                ` --taker_fee ${perpMarketInfo.takerFee.toNumber()}` +
                ` --max_num_events 256` +
                ` --rate ${perpMarket.liquidityMiningInfo.rate.toNumber()}` +
                ` --max_depth_bps ${perpMarket.liquidityMiningInfo.maxDepthBps.toNumber()}` +
                ` --target_period_length ${perpMarket.liquidityMiningInfo.targetPeriodLength.toNumber()}` +
                ` --mngo_per_period ${perpMarket.liquidityMiningInfo.mngoPerPeriod.toNumber()}` +
                ` --exp ${Math.max(Math.min(perpMarket.metaData.extraInfo[0], 1), 8)}`);
        }
        console.log('---');
    }
    console.log('Succcessfully created new mango group.');
});
function execCommand(cmd) {
    const exec = require('child_process').exec;
    cmd = cmd + ` --cluster ${cluster} --keypair ${keypairPath}`;
    return new Promise((resolve, reject) => {
        exec(cmd, (error, stdout, stderr) => {
            console.log(stdout);
            //console.log('!!!!!!', error, stdout, stderr)
            if (error) {
                console.warn(error);
                reject(error);
            }
            resolve(stdout ? stdout : stderr);
        });
    });
}
function getLatestIds() {
    return JSON.parse(fs.readFileSync(path_1.default.resolve(__dirname, '..', '..', 'ids.json'), 'utf-8'));
}
cloneGroup();
//# sourceMappingURL=cloneGroup.js.map