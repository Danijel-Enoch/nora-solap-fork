"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenAmount = exports.validateU256 = exports.validateU64 = exports.TokenAmountUnderflow = exports.TokenAmountOverflow = void 0;
const tslib_1 = require("tslib");
const jsbi_1 = tslib_1.__importDefault(require("jsbi"));
const tiny_invariant_1 = tslib_1.__importDefault(require("tiny-invariant"));
const constants_1 = require("./constants");
const fraction_1 = require("./fraction");
const percent_1 = require("./percent");
const utils_1 = require("./utils");
class TokenAmountOverflow extends RangeError {
    constructor(type, amount) {
        super(`Token amount overflows ${type}: ${amount.toString()}`);
    }
}
exports.TokenAmountOverflow = TokenAmountOverflow;
class TokenAmountUnderflow extends RangeError {
    constructor(amount) {
        super(`Token amount must be greater than zero: ${amount.toString()}`);
    }
}
exports.TokenAmountUnderflow = TokenAmountUnderflow;
function validateU64(value) {
    if (!jsbi_1.default.greaterThanOrEqual(value, constants_1.ZERO)) {
        throw new TokenAmountUnderflow(value);
    }
    if (!jsbi_1.default.lessThanOrEqual(value, constants_1.MAX_U64)) {
        throw new TokenAmountOverflow("u64", value);
    }
}
exports.validateU64 = validateU64;
function validateU256(value) {
    if (!jsbi_1.default.greaterThanOrEqual(value, constants_1.ZERO)) {
        throw new TokenAmountUnderflow(value);
    }
    if (!jsbi_1.default.lessThanOrEqual(value, constants_1.MAX_U256)) {
        throw new TokenAmountOverflow("u256", value);
    }
}
exports.validateU256 = validateU256;
const stripTrailingZeroes = (num) => {
    const [head, tail, ...rest] = num.split(".");
    if (rest.length > 0 || !head) {
        console.warn(`Invalid number passed to stripTrailingZeroes: ${num}`);
        return num;
    }
    if (!tail) {
        return num;
    }
    return `${head}.${tail.replace(/\.0+$/, "")}`;
};
class TokenAmount extends fraction_1.Fraction {
    // amount _must_ be raw, i.e. in the native representation
    constructor(token, amount, validate) {
        const parsedAmount = (0, utils_1.parseBigintIsh)(amount);
        validate === null || validate === void 0 ? void 0 : validate(parsedAmount);
        super(parsedAmount, (0, utils_1.makeDecimalMultiplier)(token.decimals));
        this.token = token;
    }
    /**
     * Parses a token amount from a decimal representation.
     * @param token
     * @param uiAmount
     * @returns
     */
    static parseFromString(token, uiAmount) {
        const parts = uiAmount.split(".");
        if (parts.length === 0) {
            throw new Error("empty number");
        }
        (0, tiny_invariant_1.default)(parts[0]);
        const whole = jsbi_1.default.BigInt(parts[0]);
        const fraction = parts[1]
            ? jsbi_1.default.BigInt(parts[1].slice(0, token.decimals) +
                Array(token.decimals).fill("0").slice(parts[1].length).join(""))
            : jsbi_1.default.BigInt(0);
        const combined = jsbi_1.default.add(jsbi_1.default.multiply(whole, jsbi_1.default.exponentiate(jsbi_1.default.BigInt(10), jsbi_1.default.BigInt(token.decimals))), fraction);
        return new TokenAmount(token, combined);
    }
    get raw() {
        return this.numerator;
    }
    toSignificant(significantDigits = 6, format, rounding = constants_1.Rounding.ROUND_DOWN) {
        return super.toSignificant(significantDigits, format, rounding);
    }
    toFixed(decimalPlaces = this.token.decimals, format, rounding = constants_1.Rounding.ROUND_DOWN) {
        (0, tiny_invariant_1.default)(decimalPlaces <= this.token.decimals, "DECIMALS");
        return super.toFixed(decimalPlaces, format, rounding);
    }
    toExact(format = { groupSeparator: "" }) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        fraction_1.Big.DP = this.token.decimals;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
        return new fraction_1.Big(this.numerator).div(this.denominator.toString()).toFormat(format);
    }
    add(other) {
        (0, tiny_invariant_1.default)(this.token.equals(other.token), `add token mismatch: ${this.token.toString()} !== ${other.token.toString()}`);
        return new TokenAmount(this.token, jsbi_1.default.add(this.raw, other.raw));
    }
    subtract(other) {
        (0, tiny_invariant_1.default)(this.token.equals(other.token), `subtract token mismatch: ${this.token.toString()} !== ${other.token.toString()}`);
        return new TokenAmount(this.token, jsbi_1.default.subtract(this.raw, other.raw));
    }
    /**
     * Gets this TokenAmount as a percentage of the other TokenAmount.
     * @param other
     * @returns
     */
    divideByAmount(other) {
        (0, tiny_invariant_1.default)(this.token.equals(other.token), `divideByAmount token mismatch: ${this.token.toString()} !== ${other.token.toString()}`);
        const frac = this.divide(other);
        return new percent_1.Percent(frac.numerator, frac.denominator);
    }
    /**
     * Gets this TokenAmount as a percentage of the other TokenAmount.
     * @param other
     * @returns
     */
    divideBy(other) {
        const frac = this.divide(other);
        return new percent_1.Percent(frac.numerator, frac.denominator);
    }
    /**
     * Multiplies this token amount by a percent.
     * WARNING: this loses precision
     * @param percent
     * @returns
     */
    multiplyBy(percent) {
        return new TokenAmount(this.token, percent.asFraction.multiply(this.raw).toFixed(0));
    }
    /**
     * Reduces this token amount by a percent.
     * WARNING: this loses precision
     * @param percent
     * @returns
     */
    reduceBy(percent) {
        return this.multiplyBy(new percent_1.Percent(1, 1).subtract(percent));
    }
    /**
     * Formats this number using Intl.NumberFormatOptions
     * @param param0
     * @returns
     */
    format({ numberFormatOptions, locale } = {}) {
        const asExactString = this.toFixed(this.token.decimals);
        const asNumber = parseFloat(asExactString);
        return `${numberFormatOptions !== undefined
            ? asNumber.toLocaleString(locale, numberFormatOptions)
            : stripTrailingZeroes(asExactString)}`;
    }
    /**
     * Gets the value of this {@link TokenAmount} as a number.
     */
    get asNumber() {
        return parseFloat(this.toExact());
    }
    /**
     * Returns true if the other object is a {@link TokenAmount}.
     *
     * @param other
     * @returns
     */
    static isTokenAmount(other) {
        return (fraction_1.Fraction.isFraction(other) &&
            !!(other === null || other === void 0 ? void 0 : other.token));
    }
}
exports.TokenAmount = TokenAmount;
//# sourceMappingURL=tokenAmount.js.map