import { Rounding } from "./constants";
import { Fraction, NumberFormat } from "./fraction";
import { Token } from "./token";
import { TokenAmount } from "./tokenAmount";
import { BigintIsh } from "./utils";
export declare class Price<T extends Token<T>> extends Fraction {
    readonly baseCurrency: T;
    readonly quoteCurrency: T;
    readonly scalar: Fraction;
    constructor(baseCurrency: T, quoteCurrency: T, denominator: BigintIsh, numerator: BigintIsh);
    get raw(): Fraction;
    get adjusted(): Fraction;
    invert(): Price<T>;
    multiply(other: Price<T>): Price<T>;
    quote(tokenAmount: TokenAmount<T>): TokenAmount<T>;
    toSignificant(significantDigits?: number, format?: NumberFormat, rounding?: Rounding): string;
    toFixed(decimalPlaces?: number, format?: NumberFormat, rounding?: Rounding): string;
}
//# sourceMappingURL=price.d.ts.map