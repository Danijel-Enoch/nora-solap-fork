import _Big from "big.js";
import _Decimal from "decimal.js-light";
import JSBI from "jsbi";
import { Rounding } from "./constants";
import { BigintIsh } from "./utils";
export declare const Decimal: typeof _Decimal;
export declare const Big: typeof _Big;
export interface NumberFormat {
    decimalSeparator?: string;
    groupSeparator?: string;
    groupSize?: number;
    secondaryGroupSize?: number;
    fractionGroupSeparator?: string;
    fractionGroupSize?: number;
}
/**
 * Number with an integer numerator and denominator.
 */
export declare class Fraction {
    /**
     * This boolean checks to see if this is actually a {@link Fraction}.
     */
    readonly isFraction: true;
    readonly numerator: JSBI;
    readonly denominator: JSBI;
    static readonly ZERO: Fraction;
    static readonly ONE: Fraction;
    constructor(numerator: BigintIsh, denominator?: BigintIsh);
    /**
     * Returns true if the other object is a {@link Fraction}.
     *
     * @param other
     * @returns
     */
    static isFraction(other: unknown): other is Fraction;
    /**
     * Compares this {@link Fraction} to the other {@link Fraction}.
     */
    compareTo(other: Fraction): -1 | 0 | 1;
    /**
     * Parses a {@link Fraction} from a float.
     * @param number Number to parse.
     * @param decimals Number of decimals of precision. (default 10)
     * @returns Fraction
     */
    static fromNumber(number: number, decimals?: number): Fraction;
    /**
     * Attempts to parse a {@link Fraction}.
     * @param fractionish Fraction or BigintIsh.
     * @returns
     */
    private static tryParseFraction;
    /**
     * Performs floor division.
     */
    get quotient(): JSBI;
    /**
     * Remainder after floor division.
     */
    get remainder(): Fraction;
    invert(): Fraction;
    add(other: Fraction | BigintIsh): Fraction;
    subtract(other: Fraction | BigintIsh): Fraction;
    lessThan(other: Fraction | BigintIsh): boolean;
    equalTo(other: Fraction | BigintIsh): boolean;
    greaterThan(other: Fraction | BigintIsh): boolean;
    multiply(other: Fraction | BigintIsh): Fraction;
    divide(other: Fraction | BigintIsh): Fraction;
    toSignificant(significantDigits: number, format?: NumberFormat, rounding?: Rounding): string;
    toFixed(decimalPlaces: number, format?: NumberFormat, rounding?: Rounding): string;
    /**
     * Helper method for converting any super class back to a fraction
     */
    get asFraction(): Fraction;
    /**
     * Gets the value of this {@link Fraction} as a number.
     */
    get asNumber(): number;
    /**
     * Returns true if this number (the numerator) is equal to zero and the denominator is non-zero.
     * @returns
     */
    isZero(): boolean;
    /**
     * Returns true if this number (the numerator) is not equal to zero.
     * @returns
     */
    isNonZero(): boolean;
}
//# sourceMappingURL=fraction.d.ts.map