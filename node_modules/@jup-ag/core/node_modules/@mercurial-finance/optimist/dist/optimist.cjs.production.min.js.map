{"version":3,"file":"optimist.cjs.production.min.js","sources":["../src/tx/errors.ts","../src/utils/deserializeAccount.ts"],"sourcesContent":["import { SystemProgram, TransactionResponse } from '@solana/web3.js';\n\ntype CustomInstructionError = [index: number, code: { Custom: number }];\ninterface ITransactionError {\n  InstructionError: CustomInstructionError;\n}\n\nexport class TransactionError extends Error {\n  constructor(m: string, public txid?: string, public code?: number) {\n    super(m);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Error.prototype);\n  }\n}\nconst UNKNOWN_ERROR = 'Unknown error, visit the explorer';\n\nexport async function parseErrorForTransaction(tx: TransactionResponse): Promise<{ message: string; code?: number }> {\n  // Easy case, logMessages has an obvious error message. From dapp-scaffold\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  if (errors.length > 0) {\n    return { message: errors.join(',') };\n  }\n\n  // Harder case, we need to dig for a custom code\n  const transactionError = tx?.meta?.err;\n  const transactionErrorString = JSON.stringify(transactionError);\n  let errorCode;\n\n  if (transactionError && typeof transactionError !== 'string') {\n    const instructionError = (transactionError as ITransactionError).InstructionError;\n\n    const [index, { Custom }] = instructionError;\n    errorCode = Custom;\n\n    // We have found what caused the error so we can map it\n    const innerInstructions = tx?.meta?.innerInstructions;\n    if (!innerInstructions || index >= innerInstructions.length) {\n      if (tx?.meta && tx.meta.logMessages && isSystemProgram(tx.meta?.logMessages)) {\n        return getSystemProgramError(instructionError);\n      }\n\n      return { message: transactionErrorString, code: errorCode };\n    }\n    const innerInstruction = innerInstructions.find((innerIx) => innerIx.index === index);\n    if (!innerInstruction) {\n      return { message: transactionErrorString, code: errorCode };\n    }\n\n    const programIdIndex = innerInstruction.instructions[innerInstruction.instructions.length - 1].programIdIndex;\n    const programId = tx.transaction.message.accountKeys[programIdIndex];\n    if (programId.equals(SystemProgram.programId)) {\n      return getSystemProgramError(instructionError);\n    }\n  }\n\n  return { message: typeof transactionError === 'string' ? transactionError : UNKNOWN_ERROR, code: errorCode };\n}\n\nasync function isSystemProgram(logMessages: String[]) {\n  logMessages.forEach((log) => {\n    if (log.includes('Program 11111111111111111111111111111111 invoke')) return true;\n  });\n\n  return false;\n}\n\nasync function getSystemProgramError(instructionError: CustomInstructionError) {\n  const code = instructionError[1].Custom;\n\n  let message = '';\n  switch (code) {\n    // https://github.com/solana-labs/solana/blob/22a18a68e3ee68ae013d647e62e12128433d7230/sdk/program/src/system_instruction.rs#L12-L26\n    // TODO: Do we need to translate all error codes.\n    case 0:\n      message = 'An account with the same address already exists';\n    case 1:\n      message = 'The account does not have enough SOL to perform the operation';\n    default:\n      message = UNKNOWN_ERROR;\n  }\n\n  return {\n    code,\n    message,\n  };\n}\n","import { AccountInfo, AccountLayout, u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const deserializeAccount = (data: Buffer | undefined): AccountInfo | undefined => {\n  if (data == undefined || data.length == 0) {\n    return undefined;\n  }\n\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n"],"names":["TransactionError","Error","constructor","m","txid","code","super","this","Object","setPrototypeOf","prototype","async","getSystemProgramError","instructionError","Custom","message","data","undefined","length","accountInfo","AccountLayout","decode","mint","PublicKey","owner","amount","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","state","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthority","closeAuthorityOption","tx","_tx$meta","errors","meta","logMessages","forEach","log","regex","exec","index","lastIndex","push","join","transactionError","err","transactionErrorString","JSON","stringify","errorCode","_tx$meta2","InstructionError","innerInstructions","_tx$meta3","includes","isSystemProgram","innerInstruction","find","innerIx","programId","transaction","accountKeys","instructions","programIdIndex","equals","SystemProgram"],"mappings":"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"}