{"version":3,"file":"programErr.js","sourceRoot":"","sources":["../../../src/transaction/programErr.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Borrowed from explorer.solana.com code written by @jstarry.\n */\n\nimport type { TransactionError } from \"@solana/web3.js\";\n\n/**\n * Solana error messages built-in.\n */\nexport const BUILTIN_SOLANA_ERROR_MESSAGES: Map<string, string> = new Map([\n  [\"GenericError\", \"generic instruction error\"],\n  [\"InvalidArgument\", \"invalid program argument\"],\n  [\"InvalidInstructionData\", \"invalid instruction data\"],\n  [\"InvalidAccountData\", \"invalid account data for instruction\"],\n  [\"AccountDataTooSmall\", \"account data too small for instruction\"],\n  [\"InsufficientFunds\", \"insufficient funds for instruction\"],\n  [\"IncorrectProgramId\", \"incorrect program id for instruction\"],\n  [\"MissingRequiredSignature\", \"missing required signature for instruction\"],\n  [\n    \"AccountAlreadyInitialized\",\n    \"instruction requires an uninitialized account\",\n  ],\n  [\"UninitializedAccount\", \"instruction requires an initialized account\"],\n  [\n    \"UnbalancedInstruction\",\n    \"sum of account balances before and after instruction do not match\",\n  ],\n  [\"ModifiedProgramId\", \"instruction modified the program id of an account\"],\n  [\n    \"ExternalAccountLamportSpend\",\n    \"instruction spent from the balance of an account it does not own\",\n  ],\n  [\n    \"ExternalAccountDataModified\",\n    \"instruction modified data of an account it does not own\",\n  ],\n  [\n    \"ReadonlyLamportChange\",\n    \"instruction changed the balance of a read-only account\",\n  ],\n  [\"ReadonlyDataModified\", \"instruction modified data of a read-only account\"],\n  [\"DuplicateAccountIndex\", \"instruction contains duplicate accounts\"],\n  [\"ExecutableModified\", \"instruction changed executable bit of an account\"],\n  [\"RentEpochModified\", \"instruction modified rent epoch of an account\"],\n  [\"NotEnoughAccountKeys\", \"insufficient account keys for instruction\"],\n  [\"AccountDataSizeChanged\", \"non-system instruction changed account size\"],\n  [\"AccountNotExecutable\", \"instruction expected an executable account\"],\n  [\n    \"AccountBorrowFailed\",\n    \"instruction tries to borrow reference for an account which is already borrowed\",\n  ],\n  [\n    \"AccountBorrowOutstanding\",\n    \"instruction left account with an outstanding borrowed reference\",\n  ],\n  [\n    \"DuplicateAccountOutOfSync\",\n    \"instruction modifications of multiply-passed account differ\",\n  ],\n  [\"Custom\", \"custom program error: {0}\"],\n  [\"InvalidError\", \"program returned invalid error code\"],\n  [\"ExecutableDataModified\", \"instruction changed executable accounts data\"],\n  [\n    \"ExecutableLamportChange\",\n    \"instruction changed the balance of a executable account\",\n  ],\n  [\"ExecutableAccountNotRentExempt\", \"executable accounts must be rent exempt\"],\n  [\"UnsupportedProgramId\", \"Unsupported program id\"],\n  [\"CallDepth\", \"Cross-program invocation call depth too deep\"],\n  [\"MissingAccount\", \"An account required by the instruction is missing\"],\n  [\n    \"ReentrancyNotAllowed\",\n    \"Cross-program invocation reentrancy not allowed for this instruction\",\n  ],\n  [\n    \"MaxSeedLengthExceeded\",\n    \"Length of the seed is too long for address generation\",\n  ],\n  [\"InvalidSeeds\", \"Provided seeds do not result in a valid address\"],\n  [\"InvalidRealloc\", \"Failed to reallocate account data\"],\n  [\"ComputationalBudgetExceeded\", \"Computational budget exceeded\"],\n  [\n    \"PrivilegeEscalation\",\n    \"Cross-program invocation with unauthorized signer or writable account\",\n  ],\n  [\n    \"ProgramEnvironmentSetupFailure\",\n    \"Failed to create program execution environment\",\n  ],\n  [\"ProgramFailedToComplete\", \"Program failed to complete\"],\n  [\"ProgramFailedToCompile\", \"Program failed to compile\"],\n  [\"Immutable\", \"Account is immutable\"],\n  [\"IncorrectAuthority\", \"Incorrect authority provided\"],\n  [\"BorshIoError\", \"Failed to serialize or deserialize account data: {0}\"],\n  [\n    \"AccountNotRentExempt\",\n    \"An account does not have enough lamports to be rent-exempt\",\n  ],\n  [\"InvalidAccountOwner\", \"Invalid account owner\"],\n  [\"ArithmeticOverflow\", \"Program arithmetic overflowed\"],\n  [\"UnsupportedSysvar\", \"Unsupported sysvar\"],\n  [\"IllegalOwner\", \"Provided owner is not allowed\"],\n]);\n\nexport type ProgramError = {\n  index: number;\n  message: string;\n};\n\nexport function getTransactionInstructionError(\n  error?: TransactionError | null\n): ProgramError | undefined {\n  if (!error) {\n    return;\n  }\n\n  if (typeof error === \"object\" && \"InstructionError\" in error) {\n    const innerError = error[\"InstructionError\"];\n    const index = innerError[0] as number;\n    const instructionError = innerError[1];\n\n    return {\n      index,\n      message: getInstructionError(instructionError),\n    };\n  }\n}\n\nfunction getInstructionError(error: unknown): string {\n  let out;\n  let value: string | null = null;\n\n  if (typeof error === \"string\") {\n    const message = BUILTIN_SOLANA_ERROR_MESSAGES.get(error);\n    if (message) {\n      return message;\n    }\n  } else if (\"Custom\" in (error as Record<string, string>)) {\n    out = BUILTIN_SOLANA_ERROR_MESSAGES.get(\"Custom\");\n    value = (error as { Custom: string })[\"Custom\"];\n  } else if (\"BorshIoError\" in (error as Record<string, string>)) {\n    out = BUILTIN_SOLANA_ERROR_MESSAGES.get(\"BorshIoError\");\n    value = (error as { BorshIoError: string })[\"BorshIoError\"];\n  }\n\n  if (out && value) {\n    return out.replace(\"{0}\", value);\n  }\n\n  return \"Unknown instruction error\";\n}\n"]}