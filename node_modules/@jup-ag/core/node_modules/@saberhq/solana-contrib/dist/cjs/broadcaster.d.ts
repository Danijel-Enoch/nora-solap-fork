import type { Blockhash, Commitment, ConfirmOptions, Connection, RpcResponseAndContext, SimulatedTransactionResponse, Transaction } from "@solana/web3.js";
import type { Broadcaster } from "./interfaces";
import { PendingTransaction } from "./transaction";
export interface BroadcastOptions extends ConfirmOptions {
    /**
     * Prints the transaction logs as emitted by @solana/web3.js. Defaults to true.
     */
    printLogs?: boolean;
}
/**
 * Broadcasts transactions to a single connection.
 */
export declare class SingleConnectionBroadcaster implements Broadcaster {
    readonly sendConnection: Connection;
    readonly opts: ConfirmOptions;
    constructor(sendConnection: Connection, opts?: ConfirmOptions);
    /**
     * @inheritdoc
     */
    getRecentBlockhash(commitment?: Commitment): Promise<Blockhash>;
    /**
     * @inheritdoc
     */
    broadcast(tx: Transaction, { printLogs, ...opts }?: BroadcastOptions): Promise<PendingTransaction>;
    /**
     * @inheritdoc
     */
    simulate(tx: Transaction, { commitment, verifySigners, }?: {
        commitment?: Commitment;
        verifySigners?: boolean;
    }): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;
}
/**
 * Broadcasts transactions to multiple connections simultaneously.
 */
export declare class MultipleConnectionBroadcaster implements Broadcaster {
    readonly connections: readonly Connection[];
    readonly opts: ConfirmOptions;
    constructor(connections: readonly Connection[], opts?: ConfirmOptions);
    getRecentBlockhash(commitment?: Commitment): Promise<Blockhash>;
    private _sendRawTransaction;
    /**
     * Broadcasts a signed transaction.
     *
     * @param tx
     * @param confirm
     * @param opts
     * @returns
     */
    broadcast(tx: Transaction, { printLogs, ...opts }?: BroadcastOptions): Promise<PendingTransaction>;
    /**
     * Simulates a transaction with a commitment.
     * @param tx
     * @param commitment
     * @returns
     */
    simulate(tx: Transaction, { commitment, verifySigners, }?: {
        commitment?: Commitment;
        verifySigners?: boolean;
    }): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;
}
//# sourceMappingURL=broadcaster.d.ts.map