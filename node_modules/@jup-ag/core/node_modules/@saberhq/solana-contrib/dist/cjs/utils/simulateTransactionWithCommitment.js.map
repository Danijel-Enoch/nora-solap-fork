{"version":3,"file":"simulateTransactionWithCommitment.js","sourceRoot":"","sources":["../../../src/utils/simulateTransactionWithCommitment.ts"],"names":[],"mappings":";;;AAOA,6CAAuD;AAEvD;;GAEG;AACI,KAAK,UAAU,iCAAiC,CACrD,UAAsB,EACtB,WAAwB,EACxB,aAAyB,WAAW;;IAEpC,MAAM,eAAe,GAAG,UAgBvB,CAAC;IACF,MAAM,gBAAgB,GAAG,WAExB,CAAC;IAEF,WAAW,CAAC,eAAe,GAAG,MAAM,eAAe,CAAC,gBAAgB,CAClE,eAAe,CAAC,wBAAwB,CACzC,CAAC;IAEF,MAAM,QAAQ,GAAG,WAAW,CAAC,gBAAgB,EAAE,CAAC;IAEhD,MAAM,eAAe,GAAG,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC9D,MAAM,kBAAkB,GAAG,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC9D,MAAM,MAAM,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;IAElD,MAAM,GAAG,GAAG,MAAM,eAAe,CAAC,WAAW,CAAC,qBAAqB,EAAE;QACnE,kBAAkB;QAClB,MAAM;KACP,CAAC,CAAC;IACH,IAAI,GAAG,CAAC,KAAK,EAAE;QACb,MAAM,IAAI,8BAAoB,CAC5B,kCAAkC,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,EACtD,MAAA,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,mCAAI,SAAS,CACnC,CAAC;KACH;IACD,OAAO,GAAG,CAAC,MAAM,CAAC;AACpB,CAAC;AA/CD,8EA+CC","sourcesContent":["import type {\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SimulatedTransactionResponse,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { SendTransactionError } from \"@solana/web3.js\";\n\n/**\n * Copy of Connection.simulateTransaction that takes a commitment parameter.\n */\nexport async function simulateTransactionWithCommitment(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment = \"confirmed\"\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  const connectionInner = connection as Connection & {\n    _disableBlockhashCaching: boolean;\n    _recentBlockhash: (disableBlockhashCaching: boolean) => Promise<string>;\n    _rpcRequest: (\n      rpc: \"simulateTransaction\",\n      args: [\n        string,\n        {\n          encoding: string;\n          commitment: Commitment;\n        }\n      ]\n    ) => Promise<{\n      error: Error;\n      result: RpcResponseAndContext<SimulatedTransactionResponse>;\n    }>;\n  };\n  const transactionTyped = transaction as Transaction & {\n    _serialize: (buffer: Buffer) => Buffer;\n  };\n\n  transaction.recentBlockhash = await connectionInner._recentBlockhash(\n    connectionInner._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n\n  const wireTransaction = transactionTyped._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config = { encoding: \"base64\", commitment };\n\n  const res = await connectionInner._rpcRequest(\"simulateTransaction\", [\n    encodedTransaction,\n    config,\n  ]);\n  if (res.error) {\n    throw new SendTransactionError(\n      \"failed to simulate transaction: \" + res.error.message,\n      res.result.value.logs ?? undefined\n    );\n  }\n  return res.result;\n}\n"]}