{"version":3,"file":"misc.js","sourceRoot":"","sources":["../../../src/utils/misc.ts"],"names":[],"mappings":";;;AAAA,MAAM,IAAI,GAAG,GAAG,EAAE;IAChB,OAAO;AACT,CAAC,CAAC;AAEF;;;GAGG;AACI,MAAM,yBAAyB,GAAG,KAAK,EAC5C,EAAoB,EACR,EAAE;IACd,MAAM,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC;IACtC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;IACrB,IAAI;QACF,MAAM,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;QAC1B,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,MAAM,CAAC,CAAC;KACT;AACH,CAAC,CAAC;AAbW,QAAA,yBAAyB,6BAapC;AAEF;;;GAGG;AACI,MAAM,oBAAoB,GAAG,CAAI,EAAW,EAAK,EAAE;IACxD,MAAM,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC;IACtC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;IACrB,IAAI;QACF,MAAM,MAAM,GAAG,EAAE,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,MAAM,CAAC,CAAC;KACT;AACH,CAAC,CAAC;AAXW,QAAA,oBAAoB,wBAW/B;AAEF;;;;;;;GAOG;AACI,MAAM,SAAS,GAAG,CAAS,KAAoB,EAAmB,EAAE;IACzE,OAAO,KAAK,KAAK,IAAI,CAAC;AACxB,CAAC,CAAC;AAFW,QAAA,SAAS,aAEpB;AAEF;;;;;GAKG;AACI,MAAM,cAAc,GAAG,CAC5B,KAAyB,EACR,EAAE;IACnB,OAAO,KAAK,KAAK,SAAS,CAAC;AAC7B,CAAC,CAAC;AAJW,QAAA,cAAc,kBAIzB;AAEF;;;;;GAKG;AACI,MAAM,MAAM,GAAG,CACpB,KAAgC,EACf,EAAE;IACnB,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;AAC/C,CAAC,CAAC;AAJW,QAAA,MAAM,UAIjB","sourcesContent":["const noop = () => {\n  // noop\n};\n\n/**\n * Hide the console.error because @solana/web3.js often emits noisy errors as a\n * side effect.\n */\nexport const suppressConsoleErrorAsync = async <T>(\n  fn: () => Promise<T>\n): Promise<T> => {\n  const oldConsoleError = console.error;\n  console.error = noop;\n  try {\n    const result = await fn();\n    console.error = oldConsoleError;\n    return result;\n  } catch (e) {\n    console.error = oldConsoleError;\n    throw e;\n  }\n};\n\n/**\n * Hide the console.error because @solana/web3.js often emits noisy errors as a\n * side effect.\n */\nexport const suppressConsoleError = <T>(fn: () => T): T => {\n  const oldConsoleError = console.error;\n  console.error = noop;\n  try {\n    const result = fn();\n    console.error = oldConsoleError;\n    return result;\n  } catch (e) {\n    console.error = oldConsoleError;\n    throw e;\n  }\n};\n\n/**\n * Checks to see if the provided value is not null.\n *\n * Useful for preserving types in filtering out non-null values.\n *\n * @param value\n * @returns\n */\nexport const isNotNull = <TValue>(value: TValue | null): value is TValue => {\n  return value !== null;\n};\n\n/**\n * Checks to see if the provided value is not undefined.\n *\n * @param value\n * @returns\n */\nexport const isNotUndefined = <TValue>(\n  value: TValue | undefined\n): value is TValue => {\n  return value !== undefined;\n};\n\n/**\n * Checks to see if the provided value is not null or undefined.\n *\n * @param value\n * @returns\n */\nexport const exists = <TValue>(\n  value: TValue | null | undefined\n): value is TValue => {\n  return value !== null && value !== undefined;\n};\n"]}