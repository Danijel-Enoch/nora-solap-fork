{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  Blockhash,\n  Commitment,\n  ConfirmOptions,\n  Connection,\n  KeyedAccountInfo,\n  PublicKey,\n  RpcResponseAndContext,\n  Signer,\n  SimulatedTransactionResponse,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport type { PendingTransaction } from \".\";\n\n/**\n * Wallet interface for objects that can be used to sign provider transactions.\n *\n * This interface comes from Anchor.\n */\nexport interface Wallet {\n  /**\n   * Signs a transaction with the wallet.\n   * @param tx\n   */\n  signTransaction(tx: Transaction): Promise<Transaction>;\n\n  /**\n   * Signs all transactions with the wallet.\n   * @param txs\n   */\n  signAllTransactions(txs: Transaction[]): Promise<Transaction[]>;\n\n  /**\n   * The PublicKey of the wallet.\n   */\n  publicKey: PublicKey;\n}\n\n/**\n * Request to send a transaction.\n */\nexport interface SendTxRequest {\n  tx: Transaction;\n  signers: Array<Signer | undefined>;\n}\n\n/**\n * An entity that can fetch {@link KeyedAccountInfo}.\n */\nexport interface AccountInfoFetcher {\n  /**\n   * Fetches the {@link KeyedAccountInfo} associated with a\n   * {@link PublicKey}, if it exists.\n   *\n   * @param accountId The account\n   */\n  getAccountInfo(accountId: PublicKey): Promise<KeyedAccountInfo | null>;\n}\n\nexport interface ReadonlyProvider extends AccountInfoFetcher {\n  /**\n   * Connection for reading data.\n   */\n  connection: Connection;\n\n  /**\n   * Read-only wallet for use with Anchor programs.\n   */\n  wallet: Wallet;\n\n  /**\n   * Transaction confirmation options to use by default.\n   */\n  opts: ConfirmOptions;\n}\n\n/**\n * A Broadcaster broadcasts signed transactions to a node or set of nodes,\n * returning the transaction signatures.\n */\nexport interface Broadcaster {\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @param commitment\n   */\n  getRecentBlockhash(commitment?: Commitment): Promise<Blockhash>;\n\n  /**\n   * Broadcasts a signed transaction to the connected Solana cluster.\n   *\n   * @param tx      The transaction to send.\n   * @param opts    Transaction confirmation options.\n   */\n  broadcast: (\n    tx: Transaction,\n    opts?: ConfirmOptions\n  ) => Promise<PendingTransaction>;\n\n  /**\n   * Simulates the given transaction, returning emitted logs from execution.\n   *\n   * @param tx      The transaction to simulate.\n   * @param opts    Transaction confirmation options.\n   */\n  simulate(\n    tx: Transaction,\n    opts: {\n      commitment?: Commitment;\n      verifySigners?: boolean;\n    }\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n}\n\n/**\n * An interface that can sign transactions.\n */\nexport interface TransactionSigner {\n  publicKey: PublicKey;\n\n  /**\n   * Signs the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to sign.\n   * @param signers The set of signers in addition to the provdier wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  sign: (\n    tx: Transaction,\n    signers?: readonly (Signer | undefined)[],\n    opts?: ConfirmOptions\n  ) => Promise<Transaction>;\n\n  /**\n   * Similar to `sign`, but for an array of transactions and signers.\n   */\n  signAll: (\n    reqs: readonly SendTxRequest[],\n    opts?: ConfirmOptions\n  ) => Promise<Transaction[]>;\n}\n\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n *\n * This interface is based on Anchor, but includes more features.\n */\nexport interface Provider extends ReadonlyProvider {\n  /**\n   * Connection for reading data.\n   */\n  connection: Connection;\n\n  /**\n   * Signs transactions.\n   */\n  signer: TransactionSigner;\n\n  /**\n   * Broadcasts transactions.\n   */\n  broadcaster: Broadcaster;\n\n  /**\n   * Transaction confirmation options to use by default.\n   */\n  opts: ConfirmOptions;\n\n  /**\n   * The wallet used to pay for and sign all transactions.\n   */\n  wallet: Wallet;\n\n  /**\n   * Sends the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provdier wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  send: (\n    tx: Transaction,\n    signers?: (Signer | undefined)[],\n    opts?: ConfirmOptions\n  ) => Promise<PendingTransaction>;\n\n  /**\n   * Similar to `send`, but for an array of transactions and signers.\n   */\n  sendAll: (\n    reqs: readonly SendTxRequest[],\n    opts?: ConfirmOptions\n  ) => Promise<PendingTransaction[]>;\n\n  /**\n   * Simulates the given transaction, returning emitted logs from execution.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provider wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  simulate: (\n    tx: Transaction,\n    signers?: (Signer | undefined)[],\n    opts?: ConfirmOptions\n  ) => Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n}\n\n/**\n * An event emitted by a program.\n */\nexport interface Event {\n  name: string;\n  data: Record<string, unknown>;\n}\n\n/**\n * Parses the events from logs.\n */\nexport type EventParser<E extends Event> = (logs: string[]) => E[];\n\n/**\n * A parser for program-owned accounts.\n *\n * This is used downstream by Sail.\n */\nexport interface ProgramAccountParser<T> {\n  /**\n   * ID of the program.\n   */\n  programID: PublicKey;\n  /**\n   * Name of the account.\n   */\n  name: string;\n  /**\n   * Function which parses the account.\n   */\n  parse: (data: Buffer) => T;\n}\n"]}