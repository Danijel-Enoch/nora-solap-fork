"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exists = exports.isNotUndefined = exports.isNotNull = exports.suppressConsoleError = exports.suppressConsoleErrorAsync = void 0;
const noop = () => {
    // noop
};
/**
 * Hide the console.error because @solana/web3.js often emits noisy errors as a
 * side effect.
 */
const suppressConsoleErrorAsync = async (fn) => {
    const oldConsoleError = console.error;
    console.error = noop;
    try {
        const result = await fn();
        console.error = oldConsoleError;
        return result;
    }
    catch (e) {
        console.error = oldConsoleError;
        throw e;
    }
};
exports.suppressConsoleErrorAsync = suppressConsoleErrorAsync;
/**
 * Hide the console.error because @solana/web3.js often emits noisy errors as a
 * side effect.
 */
const suppressConsoleError = (fn) => {
    const oldConsoleError = console.error;
    console.error = noop;
    try {
        const result = fn();
        console.error = oldConsoleError;
        return result;
    }
    catch (e) {
        console.error = oldConsoleError;
        throw e;
    }
};
exports.suppressConsoleError = suppressConsoleError;
/**
 * Checks to see if the provided value is not null.
 *
 * Useful for preserving types in filtering out non-null values.
 *
 * @param value
 * @returns
 */
const isNotNull = (value) => {
    return value !== null;
};
exports.isNotNull = isNotNull;
/**
 * Checks to see if the provided value is not undefined.
 *
 * @param value
 * @returns
 */
const isNotUndefined = (value) => {
    return value !== undefined;
};
exports.isNotUndefined = isNotUndefined;
/**
 * Checks to see if the provided value is not null or undefined.
 *
 * @param value
 * @returns
 */
const exists = (value) => {
    return value !== null && value !== undefined;
};
exports.exists = exists;
//# sourceMappingURL=misc.js.map