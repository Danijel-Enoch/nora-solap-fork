{"version":3,"file":"TransactionEnvelope.js","sourceRoot":"","sources":["../../../src/transaction/TransactionEnvelope.ts"],"names":[],"mappings":";;;;AAQA,6CAA2E;AAC3E,4EAAuC;AAGvC,oDAG0B;AAE1B,oCAMkB;AAGlB,uCAAkD;AAElD,mCAA+E;AAE/E,MAAM,2BAA2B,GAAG,IAAI,mBAAS,CAC/C,8CAA8C,CAC/C,CAAC;AAEF;;;;GAIG;AACH,MAAM,qBAAqB,GAAG,CAC5B,GAA6B,EAC7B,OAAiB,EACP,EAAE;IACZ,sDAAsD;IACtD,MAAM,eAAe,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CACzC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CACvD,CAAC;IACF,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAC1B,eAAe,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CACrD,CAAC;AACJ,CAAC,CAAC;AAYF;;GAEG;AACH,MAAa,mBAAmB;IAC9B;IACE;;OAEG;IACM,QAAkB;IAC3B;;OAEG;IACM,YAAsC;IAC/C;;OAEG;IACM,UAAoB,EAAE;QARtB,aAAQ,GAAR,QAAQ,CAAU;QAIlB,iBAAY,GAAZ,YAAY,CAA0B;QAItC,YAAO,GAAP,OAAO,CAAe;IAC9B,CAAC;IAEJ;;;;OAIG;IACH,OAAO,CACL,GAAG,YAAqE;QAExE,IAAI,CAAC,YAAY,CAAC,OAAO,CACvB,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,EAAgC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CACnE,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,MAAM,CACJ,GAAG,YAAqE;QAExE,IAAI,CAAC,YAAY,CAAC,IAAI,CACpB,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,EAAgC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CACnE,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,eAAe,CACb,GAAG,YAAqE;QAExE,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,GAAG,OAAiB;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,WAAsB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;QACxD,MAAM,EAAE,GAAG,IAAI,qBAAW,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QACvD,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACvB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;;OAKG;IACH,kBAAkB;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAC7B,gEAAgE;QAChE,OAAO,CAAC,eAAe,GAAG,6CAA6C,CAAC;QAExE,OAAO,IAAA,+BAAqB,EAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;;;;OAUG;IACH,YAAY;QAKV,OAAO,IAAA,4BAAoB,EAAC,GAAG,EAAE;YAC/B,IAAI;gBACF,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;gBAC7B,gEAAgE;gBAChE,OAAO,CAAC,eAAe,GAAG,6CAA6C,CAAC;gBAExE,MAAM,IAAI,GAAG,IAAA,+BAAqB,EAAC,OAAO,CAAC,CAAC;gBAC5C,IAAI,IAAI,GAAG,0BAAgB,EAAE;oBAC3B,OAAO,EAAE,KAAK,EAAE,IAAI,8BAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC;iBAC7D;gBACD,OAAO,EAAE,IAAI,EAAE,CAAC;aACjB;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,EAAE,KAAK,EAAE,IAAI,6BAAqB,CAAC,CAAC,CAAC,EAAE,CAAC;aAChD;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,cAAc,CACZ,WAAsB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;QAEpD,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QACnC,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACH,SAAS;QACP,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACvC,IAAI,MAAM,IAAI,UAAU,EAAE;YACxB,OAAO,CAAC,IAAI,CAAC,CAAC;SACf;QAED,2CAA2C;QAC3C,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,OAAO,EAAE,CAAC;SACX;QAED,IAAI,SAAS,GAAwB,IAAI,mBAAmB,CAC1D,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAC7B,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAC3D,CAAC;QACF,IAAI,cAAc,GAAW,SAAS,CAAC,kBAAkB,EAAE,CAAC;QAC5D,MAAM,GAAG,GAA0B,EAAE,CAAC;QACtC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAI,cAAc,GAAG,0BAAgB,EAAE;gBACrC,MAAM,IAAI,KAAK,CACb,mDAAmD,CAAC,kBAAkB,cAAc,MAAM,0BAAgB,GAAG,CAC9G,CAAC;aACH;YACD,MAAM,OAAO,GAAG,CAAC,GAAG,SAAS,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YAChD,MAAM,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YACzD,MAAM,SAAS,GAAG,IAAI,mBAAmB,CACvC,IAAI,CAAC,QAAQ,EACb,OAAO,EACP,WAAW,CACZ,CAAC;YACF,MAAM,cAAc,GAAG,SAAS,CAAC,kBAAkB,EAAE,CAAC;YAEtD,sCAAsC;YACtC,IAAI,cAAc,GAAG,0BAAgB,EAAE;gBACrC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACpB,MAAM,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC;gBACrB,SAAS,GAAG,IAAI,mBAAmB,CACjC,IAAI,CAAC,QAAQ,EACb,OAAO,EACP,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CACrC,CAAC;gBACF,cAAc,GAAG,SAAS,CAAC,kBAAkB,EAAE,CAAC;aACjD;iBAAM;gBACL,SAAS,GAAG,SAAS,CAAC;gBACtB,cAAc,GAAG,cAAc,CAAC;aACjC;QACH,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEpB,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;OAIG;IACK,sBAAsB,CAAC,GAA6B;QAC1D,OAAO,qBAAqB,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,UAAmB,cAAc;QACnD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC,CAAC,eAAe,GAAG,6BAAqB,CAAC;QAC1C,MAAM,GAAG,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACpD,OAAO,IAAA,qCAA6B,EAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IACrD,CAAC;IAED;;;;OAIG;IACH,QAAQ,CACN,OAAkC;QAChC,aAAa,EAAE,IAAI;KACpB;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,IAAI,CAAC,KAAK,EAAE,EACZ,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAC7C,IAAI,CACL,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,iBAAiB,CACf,IAAoB;QAEpB,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,aAAa,CACX,IAAgC;QAEhC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;;YAC7C,IAAI,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,KAAK,0CAAE,IAAI,EAAE;gBAC3B,IAAA,oBAAY,EAAC,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aAC/C;YACD,OAAO,UAAU,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAI,CAAC,IAAuB;QAChC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAC5C,IAAI,CAAC,KAAK,EAAE,EACZ,IAAI,CAAC,OAAO,EACZ,IAAI,CACL,CAAC;QACF,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC3D,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO,CAAC,IAAuB;QACnC,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,KAA0B;QAChC,OAAO,IAAI,mBAAmB,CAC5B,IAAI,CAAC,QAAQ,EACb,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,GAAG,KAAK,CAAC,YAAY,CAAC,EAC7C,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,CACpC,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,IAAI,YAAY;QACd,OAAO;YACL,GAAG,IAAI,GAAG,CAAC;gBACT,GAAG,IAAI,CAAC,YAAY;qBACjB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACZ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAC/D;qBACA,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aACvC,CAAC,CAAC,MAAM,EAAE;SACZ,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YAC7C,SAAS,EAAE,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE;YAC3C,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBACjC,QAAQ,EAAE,CAAC,CAAC,QAAQ;gBACpB,UAAU,EAAE,CAAC,CAAC,UAAU;gBACxB,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE;aAC/B,CAAC,CAAC;YACH,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;SAC1C,CAAC,CAAC,CAAC;IACN,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,OAAO;YACL,iBAAiB;YACjB,IAAI,CAAC,YAAY;iBACd,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBACd,OAAO;oBACL,eAAe,CAAC,KAAK,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE;oBAC/C,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CACb,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACP,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,IAC7B,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC3B,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CACrC;oBACD,oBAAoB,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;iBAClD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACf,CAAC,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC;YACb,YAAY;YACZ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;SAC7D,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACf,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,MAAM,CACX,QAAkB,EAClB,YAAqE,EACrE,UAAoB,EAAE;QAEtB,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,EAAgC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAC5E,OAAO,IAAI,mBAAmB,CAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,QAAQ,CACb,IAAY,EACZ,GAAG,GAA0B;QAE7B,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,UAAU,CAAC,GAAG,GAA0B;QAC7C,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,IAAI,CAAC,GAAG,GAAmC;QAChD,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,OAAO,EAAE,CAAC;SACX;QACD,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC;QAC7B,IAAA,wBAAS,EAAC,KAAK,CAAC,CAAC;QAEjB,MAAM,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;QAE3B,IAAI,SAAS,GAAwB,KAAK,CAAC;QAC3C,IAAI,cAAc,GAAW,SAAS,CAAC,kBAAkB,EAAE,CAAC;QAC5D,MAAM,SAAS,GAA0B,EAAE,CAAC;QAE5C,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YAC1B,IAAI,cAAc,GAAG,0BAAgB,EAAE;gBACrC,MAAM,IAAI,KAAK,CACb,mDAAmD,CAAC,kBAAkB,cAAc,MAAM,0BAAgB,GAAG,CAC9G,CAAC;aACH;YACD,MAAM,OAAO,GAAG,CAAC,GAAG,SAAS,CAAC,YAAY,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;YACrE,MAAM,WAAW,GAAG,qBAAqB,CAAC,OAAO,EAAE;gBACjD,GAAG,SAAS,CAAC,OAAO;gBACpB,GAAG,OAAO,CAAC,OAAO;aACnB,CAAC,CAAC;YACH,MAAM,SAAS,GAAG,IAAI,mBAAmB,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;YAC1E,MAAM,cAAc,GAAG,SAAS,CAAC,kBAAkB,EAAE,CAAC;YAEtD,sCAAsC;YACtC,IAAI,cAAc,GAAG,0BAAgB,EAAE;gBACrC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1B,SAAS,GAAG,OAAO,CAAC;gBACpB,cAAc,GAAG,SAAS,CAAC,kBAAkB,EAAE,CAAC;aACjD;iBAAM;gBACL,SAAS,GAAG,SAAS,CAAC;gBACtB,cAAc,GAAG,cAAc,CAAC;aACjC;QACH,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE1B,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,eAAe,CAC1B,OAAqC,EACrC,GAAG,GAAmC;QAEtC,IAAI,GAAG,GAAwB,MAAM,OAAO,CAAC;QAC7C,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE;YACpB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;SAC7B;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,KAAK,CAAC,OAAO,CAClB,GAA0B,EAC1B,IAAqB;QAErB,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,EAAE,CAAC;SACX;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAClC,OAAO,MAAM,QAAQ,CAAC,OAAO,CAC3B,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,EAC1D,IAAI,CACL,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,YAAY;QACV,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC;SACb;QAED,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAU,CAAC;QACnC,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY;aACnC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;;YACV,MAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;YAC/B,IAAI,SAAS,CAAC,MAAM,CAAC,2BAA2B,CAAC,EAAE;gBACjD,MAAM,MAAM,GAAG,MAAA,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,0CAAE,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAC7C,IAAI,CAAC,MAAM,EAAE;oBACX,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;iBAC9D;gBACD,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;oBACxB,OAAO,IAAI,CAAC;iBACb;gBACD,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACtB;YACD,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC;aACD,MAAM,CAAC,CAAC,EAAE,EAAgC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACtD,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACH,WAAW;QAIT,MAAM,MAAM,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACxE,MAAM,KAAK,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAEvE,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,YAAY,EAAE;YAClC,IAAI,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,2BAA2B,CAAC,EAAE;gBACpD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAC9B;iBAAM;gBACL,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAC7B;SACF;QAED,OAAO;YACL,MAAM,EAAE,MAAM,CAAC,YAAY,EAAE;YAC7B,EAAE,EAAE,KAAK;SACV,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,KAAa;QAC1B,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,EAAE,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;SAC3D;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAA,6BAAqB,EAAC,IAAI,CAAC,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,0BAA0B,CACxB,KAAa,EACb,aAAqB;QAErB,IAAI,CAAC,YAAY,CAAC,OAAO,CACvB,IAAA,8CAA8B,EAAC,KAAK,EAAE,aAAa,CAAC,CACrD,CAAC;QACF,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,sBAAsB,CAAC,KAAa;QAClC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAA,2CAA2B,EAAC,KAAK,CAAC,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAjkBD,kDAikBC","sourcesContent":["import type {\n  Cluster,\n  ConfirmOptions,\n  RpcResponseAndContext,\n  Signer,\n  SimulatedTransactionResponse,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { PACKET_DATA_SIZE, PublicKey, Transaction } from \"@solana/web3.js\";\nimport invariant from \"tiny-invariant\";\n\nimport type { BroadcastOptions } from \"../broadcaster\";\nimport {\n  requestComputeUnitsInstruction,\n  requestHeapFrameInstruction,\n} from \"../computeBudget\";\nimport type { Provider } from \"../interfaces\";\nimport {\n  createMemoInstruction,\n  EstimatedTXTooBigError,\n  printTXTable,\n  suppressConsoleError,\n  TXSizeEstimationError,\n} from \"../utils\";\nimport type { PendingTransaction } from \"./PendingTransaction\";\nimport type { TransactionReceipt } from \"./TransactionReceipt\";\nimport { calculateTxSizeUnsafe } from \"./txSizer\";\nimport type { SerializableInstruction } from \"./utils\";\nimport { generateInspectLinkFromBase64, RECENT_BLOCKHASH_STUB } from \"./utils\";\n\nconst ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\n/**\n * Filters the required signers for a list of instructions.\n * @param ixs\n * @returns\n */\nconst filterRequiredSigners = (\n  ixs: TransactionInstruction[],\n  signers: Signer[]\n): Signer[] => {\n  // filter out the signers required for the transaction\n  const requiredSigners = ixs.flatMap((ix) =>\n    ix.keys.filter((k) => k.isSigner).map((k) => k.pubkey)\n  );\n  return signers.filter((s) =>\n    requiredSigners.find((rs) => rs.equals(s.publicKey))\n  );\n};\n\n/**\n * Options for simulating a transaction.\n */\nexport interface TXEnvelopeSimulateOptions extends ConfirmOptions {\n  /**\n   * Verify that the signers of the TX enveloper are valid.\n   */\n  verifySigners?: boolean;\n}\n\n/**\n * Contains a Transaction that is being built.\n */\nexport class TransactionEnvelope {\n  constructor(\n    /**\n     * Provider that will be sending the transaction as the fee payer.\n     */\n    readonly provider: Provider,\n    /**\n     * Instructions associated with the transaction.\n     */\n    readonly instructions: TransactionInstruction[],\n    /**\n     * Optional signers of the transaction.\n     */\n    readonly signers: Signer[] = []\n  ) {}\n\n  /**\n   * Prepends the given {@link TransactionInstruction}s to the {@link TransactionEnvelope}.\n   * @param instructions The instructions to prepend.\n   * @returns\n   */\n  prepend(\n    ...instructions: (TransactionInstruction | null | undefined | boolean)[]\n  ): TransactionEnvelope {\n    this.instructions.unshift(\n      ...instructions.filter((ix): ix is TransactionInstruction => !!ix)\n    );\n    return this;\n  }\n\n  /**\n   * Appends the given {@link TransactionInstruction}s to the {@link TransactionEnvelope}.\n   * @param instructions The instructions to append.\n   * @returns\n   */\n  append(\n    ...instructions: (TransactionInstruction | null | undefined | boolean)[]\n  ): TransactionEnvelope {\n    this.instructions.push(\n      ...instructions.filter((ix): ix is TransactionInstruction => !!ix)\n    );\n    return this;\n  }\n\n  /**\n   * A the given {@link TransactionInstruction}s to the {@link TransactionEnvelope}.\n   * @param instructions The instructions to add.\n   * @deprecated Use {@link #append} instead.\n   * @returns\n   */\n  addInstructions(\n    ...instructions: (TransactionInstruction | null | undefined | boolean)[]\n  ): TransactionEnvelope {\n    return this.append(...instructions);\n  }\n\n  /**\n   * Adds the given {@link Signer}s to the {@link TransactionEnvelope}.\n   * @param signers The signers to add.\n   * @returns\n   */\n  addSigners(...signers: Signer[]): TransactionEnvelope {\n    this.signers.push(...signers);\n    return this;\n  }\n\n  /**\n   * Builds a transaction from this envelope.\n   * @param feePayer Optional override for the fee payer.\n   */\n  build(feePayer: PublicKey = this.provider.wallet.publicKey): Transaction {\n    const tx = new Transaction().add(...this.instructions);\n    tx.feePayer = feePayer;\n    return tx;\n  }\n\n  /**\n   * Builds a transaction and estimates the size in bytes.\n   * Does not check to see if the transaction is too big.\n   *\n   * @returns Byte count\n   */\n  estimateSizeUnsafe(): number {\n    const builtTx = this.build();\n    // dummy blockhash that is required for building the transaction\n    builtTx.recentBlockhash = \"MaryHadALittLeLambZNdhAUTrsLE1ydg6rmtvFEpKT\";\n\n    return calculateTxSizeUnsafe(builtTx);\n  }\n\n  /**\n   * Builds a transaction and estimates the size in bytes. This number is primrily\n   * to be used for checking to see if a transaction is too big and instructions\n   * need to be split. It may not be 100% accurate.\n   *\n   * This is used in expectTXTable and is useful for increasing efficiency in\n   * dapps that build large transactions.\n   *\n   * The max transaction size of a v1 Transaction in Solana is 1232 bytes.\n   * For info about Transaction v2: https://docs.solana.com/proposals/transactions-v2\n   */\n  estimateSize():\n    | { size: number }\n    | {\n        error: EstimatedTXTooBigError | TXSizeEstimationError;\n      } {\n    return suppressConsoleError(() => {\n      try {\n        const builtTx = this.build();\n        // dummy blockhash that is required for building the transaction\n        builtTx.recentBlockhash = \"MaryHadALittLeLambZNdhAUTrsLE1ydg6rmtvFEpKT\";\n\n        const size = calculateTxSizeUnsafe(builtTx);\n        if (size > PACKET_DATA_SIZE) {\n          return { error: new EstimatedTXTooBigError(builtTx, size) };\n        }\n        return { size };\n      } catch (e) {\n        return { error: new TXSizeEstimationError(e) };\n      }\n    });\n  }\n\n  /**\n   * Partition a large {@link TransactionEnvelope} into smaller, valid {@link Transaction}s.\n   * This relies on this envelope already having the correct number of signers.\n   *\n   * @param feePayer Optional fee payer override.\n   * @returns A list of {@link Transaction}s.\n   */\n  buildPartition(\n    feePayer: PublicKey = this.provider.wallet.publicKey\n  ): Transaction[] {\n    const partition = this.partition();\n    return partition.map((env) => env.build(feePayer));\n  }\n\n  /**\n   * Partition a large {@link TransactionEnvelope} into smaller, valid transaction envelopes which can be built.\n   * This relies on this envelope already having the correct number of signers.\n   *\n   * @returns\n   */\n  partition(): TransactionEnvelope[] {\n    const estimation = this.estimateSize();\n    if (\"size\" in estimation) {\n      return [this];\n    }\n\n    // empty partition should have no envelopes\n    if (this.instructions.length === 0) {\n      return [];\n    }\n\n    let lastTXEnv: TransactionEnvelope = new TransactionEnvelope(\n      this.provider,\n      this.instructions.slice(0, 1),\n      this._filterRequiredSigners(this.instructions.slice(0, 1))\n    );\n    let lastEstimation: number = lastTXEnv.estimateSizeUnsafe();\n    const txs: TransactionEnvelope[] = [];\n    this.instructions.slice(1).forEach((ix, i) => {\n      if (lastEstimation > PACKET_DATA_SIZE) {\n        throw new Error(\n          `cannot construct a valid partition: instruction ${i} is too large (${lastEstimation} > ${PACKET_DATA_SIZE})`\n        );\n      }\n      const nextIXs = [...lastTXEnv.instructions, ix];\n      const nextSigners = this._filterRequiredSigners(nextIXs);\n      const nextTXEnv = new TransactionEnvelope(\n        this.provider,\n        nextIXs,\n        nextSigners\n      );\n      const nextEstimation = nextTXEnv.estimateSizeUnsafe();\n\n      // move to next tx envelope if too big\n      if (nextEstimation > PACKET_DATA_SIZE) {\n        txs.push(lastTXEnv);\n        const nextIXs = [ix];\n        lastTXEnv = new TransactionEnvelope(\n          this.provider,\n          nextIXs,\n          this._filterRequiredSigners(nextIXs)\n        );\n        lastEstimation = lastTXEnv.estimateSizeUnsafe();\n      } else {\n        lastTXEnv = nextTXEnv;\n        lastEstimation = nextEstimation;\n      }\n    });\n    txs.push(lastTXEnv);\n\n    return txs;\n  }\n\n  /**\n   * Filters the required signers for a list of instructions.\n   * @param ixs\n   * @returns\n   */\n  private _filterRequiredSigners(ixs: TransactionInstruction[]): Signer[] {\n    return filterRequiredSigners(ixs, this.signers);\n  }\n\n  /**\n   * Generates a link for inspecting the contents of this {@link TransactionEnvelope}.\n   *\n   * @returns URL\n   */\n  generateInspectLink(cluster: Cluster = \"mainnet-beta\"): string {\n    const t = this.build();\n    t.recentBlockhash = RECENT_BLOCKHASH_STUB;\n    const str = t.serializeMessage().toString(\"base64\");\n    return generateInspectLinkFromBase64(cluster, str);\n  }\n\n  /**\n   * Simulates the transaction.\n   * @param opts\n   * @returns\n   */\n  simulate(\n    opts: TXEnvelopeSimulateOptions = {\n      verifySigners: true,\n    }\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    return this.provider.simulate(\n      this.build(),\n      opts.verifySigners ? this.signers : undefined,\n      opts\n    );\n  }\n\n  /**\n   * Simulates the transaction, without validating signers.\n   *\n   * @deprecated Use {@link TXEnvelope#simulate} instead.\n   * @param opts\n   * @returns\n   */\n  simulateUnchecked(\n    opts: ConfirmOptions\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    return this.simulate({ ...opts, verifySigners: false });\n  }\n\n  /**\n   * Simulates the transaction and prints a fancy table in the console.\n   * ```\n   *    ┌─────┬───┬───┬───┬───────────┬──────┬─────┬──────┬───┐\n   *    │index│iso│mar│cum│ programId │quota │used │ left │CPI│\n   *    ├─────┼───┼───┼───┼───────────┼──────┼─────┼──────┼───┤\n   *    │  0  │298│281│464│'ATokenG..'│200000│24270│175730│ 1 │\n   *    │  1  │298│ 74│538│'ATokenG..'│178730│21270│157460│ 1 │\n   *    │  2  │298│ 74│612│'ATokenG..'│157460│27277│130183│ 1 │\n   *    │  3  │298│ 42│686│'ATokenG..'│130183│21270│108913│ 1 │\n   *    │  4  │338│265│951│'qExampL..'│108913│76289│ 32624│ 3 │\n   *    └─────┴───┴───┴───┴───────────┴──────┴─────┴──────┴───┘\n   * ```\n   *\n   * - **index**: the array index of the instruction within the transaction\n   * - **iso**: the isolated size of the instruction (marginal cost of only the instruction)\n   * - **mar**: the marginal size cost of the instruction (when added to previous)\n   * - **cum**: the cumulative size of the instructions up until that instruction\n   * - **quota/used/left**: [BPF instruction compute unit info](https://docs.solana.com/developing/programming-model/runtime)\n   * - **CPI**: [the maximum depth of CPI](https://docs.solana.com/developing/programming-model/calling-between-programs) (current limit in Solana is 4)\n   *\n   * @param opts\n   * @returns\n   */\n  simulateTable(\n    opts?: TXEnvelopeSimulateOptions\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    return this.simulate(opts).then((simulation) => {\n      if (simulation?.value?.logs) {\n        printTXTable(this, simulation.value.logs, \"\");\n      }\n      return simulation;\n    });\n  }\n\n  /**\n   * Sends the transaction without confirming it.\n   * @param opts\n   * @returns\n   */\n  async send(opts?: BroadcastOptions): Promise<PendingTransaction> {\n    const signed = await this.provider.signer.sign(\n      this.build(),\n      this.signers,\n      opts\n    );\n    return this.provider.broadcaster.broadcast(signed, opts);\n  }\n\n  /**\n   * Sends the transaction and waits for confirmation.\n   * @param opts\n   */\n  async confirm(opts?: BroadcastOptions): Promise<TransactionReceipt> {\n    return (await this.send(opts)).wait();\n  }\n\n  /**\n   * Combines the instructions/signers of the other envelope to create one large transaction.\n   */\n  combine(other: TransactionEnvelope): TransactionEnvelope {\n    return new TransactionEnvelope(\n      this.provider,\n      [...this.instructions, ...other.instructions],\n      [...this.signers, ...other.signers]\n    );\n  }\n\n  /**\n   * Get a list of all writable accounts, deduped\n   * All of these accounts likely need to be updated after the transaction is confirmed.\n   */\n  get writableKeys(): PublicKey[] {\n    return [\n      ...new Set([\n        ...this.instructions\n          .map((inst) =>\n            inst.keys.filter((key) => key.isWritable).map((k) => k.pubkey)\n          )\n          .reduce((acc, el) => acc.concat(el)),\n      ]).values(),\n    ];\n  }\n\n  /**\n   * Gets the instructions in a format that can be serialized easily to JSON.\n   */\n  get instructionsJSON(): SerializableInstruction[] {\n    return this.instructions.map((instruction) => ({\n      programId: instruction.programId.toString(),\n      keys: instruction.keys.map((m) => ({\n        isSigner: m.isSigner,\n        isWritable: m.isWritable,\n        publicKey: m.pubkey.toString(),\n      })),\n      data: instruction.data.toString(\"base64\"),\n    }));\n  }\n\n  /**\n   * Returns a string representation of the {@link TransactionEnvelope}.\n   */\n  get debugStr(): string {\n    return [\n      \"=> Instructions\",\n      this.instructions\n        .map((ser, i) => {\n          return [\n            `Instruction ${i}: ${ser.programId.toString()}`,\n            ...ser.keys.map(\n              (k, i) =>\n                `  [${i}] ${k.pubkey.toString()} ${\n                  k.isWritable ? \"(mut)\" : \"\"\n                } ${k.isSigner ? \"(signer)\" : \"\"}`\n            ),\n            `  Data (base64): ${ser.data.toString(\"base64\")}`,\n          ].join(\"\\n\");\n        })\n        .join(\"\\n\"),\n      \"=> Signers\",\n      this.signers.map((sg) => sg.publicKey.toString()).join(\"\\n\"),\n    ].join(\"\\n\");\n  }\n\n  /**\n   * Creates a new {@link TransactionEnvelope}.\n   * @param provider\n   * @param instructions\n   * @param signers\n   * @returns\n   */\n  static create(\n    provider: Provider,\n    instructions: (TransactionInstruction | null | undefined | boolean)[],\n    signers: Signer[] = []\n  ): TransactionEnvelope {\n    const ixs = instructions.filter((ix): ix is TransactionInstruction => !!ix);\n    return new TransactionEnvelope(provider, ixs, signers);\n  }\n\n  /**\n   * Add a memo to each transaction envelope specified.\n   */\n  static addMemos(\n    memo: string,\n    ...txs: TransactionEnvelope[]\n  ): TransactionEnvelope[] {\n    return txs.map((tx) => tx.addMemo(memo));\n  }\n\n  /**\n   * Combines multiple TransactionEnvelopes into one.\n   */\n  static combineAll(...txs: TransactionEnvelope[]): TransactionEnvelope {\n    return txs.reduce((acc, tx) => acc.combine(tx));\n  }\n\n  /**\n   * Takes a list of {@link TransactionEnvelope}s and combines them if they\n   * are able to be combined under the maximum TX size limit.\n   *\n   * @param txs\n   * @returns\n   */\n  static pack(...txs: readonly TransactionEnvelope[]): TransactionEnvelope[] {\n    if (txs.length === 0) {\n      return [];\n    }\n    const [first, ...rest] = txs;\n    invariant(first);\n\n    const { provider } = first;\n\n    let lastTXEnv: TransactionEnvelope = first;\n    let lastEstimation: number = lastTXEnv.estimateSizeUnsafe();\n    const partition: TransactionEnvelope[] = [];\n\n    rest.forEach((addedTX, i) => {\n      if (lastEstimation > PACKET_DATA_SIZE) {\n        throw new Error(\n          `cannot construct a valid partition: instruction ${i} is too large (${lastEstimation} > ${PACKET_DATA_SIZE})`\n        );\n      }\n      const nextIXs = [...lastTXEnv.instructions, ...addedTX.instructions];\n      const nextSigners = filterRequiredSigners(nextIXs, [\n        ...lastTXEnv.signers,\n        ...addedTX.signers,\n      ]);\n      const nextTXEnv = new TransactionEnvelope(provider, nextIXs, nextSigners);\n      const nextEstimation = nextTXEnv.estimateSizeUnsafe();\n\n      // move to next tx envelope if too big\n      if (nextEstimation > PACKET_DATA_SIZE) {\n        partition.push(lastTXEnv);\n        lastTXEnv = addedTX;\n        lastEstimation = lastTXEnv.estimateSizeUnsafe();\n      } else {\n        lastTXEnv = nextTXEnv;\n        lastEstimation = nextEstimation;\n      }\n    });\n    partition.push(lastTXEnv);\n\n    return partition;\n  }\n\n  /**\n   * Combines multiple async TransactionEnvelopes into one, serially.\n   */\n  static async combineAllAsync(\n    firstTX: Promise<TransactionEnvelope>,\n    ...txs: Promise<TransactionEnvelope>[]\n  ): Promise<TransactionEnvelope> {\n    let acc: TransactionEnvelope = await firstTX;\n    for (const tx of txs) {\n      acc = acc.combine(await tx);\n    }\n    return acc;\n  }\n\n  /**\n   * Sends all of the envelopes.\n   * @returns Pending transactions\n   */\n  static async sendAll(\n    txs: TransactionEnvelope[],\n    opts?: ConfirmOptions\n  ): Promise<PendingTransaction[]> {\n    const firstTX = txs[0];\n    if (!firstTX) {\n      return [];\n    }\n    const provider = firstTX.provider;\n    return await provider.sendAll(\n      txs.map((tx) => ({ tx: tx.build(), signers: tx.signers })),\n      opts\n    );\n  }\n\n  /**\n   * Deduplicate ATA instructions inside the transaction envelope.\n   */\n  dedupeATAIXs(): TransactionEnvelope {\n    if (this.instructions.length === 0) {\n      return this;\n    }\n\n    const seenATAs = new Set<string>();\n    const instructions = this.instructions\n      .map((ix) => {\n        const programId = ix.programId;\n        if (programId.equals(ASSOCIATED_TOKEN_PROGRAM_ID)) {\n          const ataKey = ix.keys[1]?.pubkey.toString();\n          if (!ataKey) {\n            throw new Error(\"ATA key does not exist on ATA instruction\");\n          }\n          if (seenATAs.has(ataKey)) {\n            return null;\n          }\n          seenATAs.add(ataKey);\n        }\n        return ix;\n      })\n      .filter((ix): ix is TransactionInstruction => !!ix);\n    return new TransactionEnvelope(this.provider, instructions, this.signers);\n  }\n\n  /**\n   * Split out ATA instructions to a separate transaction envelope.\n   */\n  splitATAIXs(): {\n    ataIXs: TransactionEnvelope;\n    tx: TransactionEnvelope;\n  } {\n    const ataIXs = new TransactionEnvelope(this.provider, [], this.signers);\n    const newTx = new TransactionEnvelope(this.provider, [], this.signers);\n\n    for (const ix of this.instructions) {\n      if (ix.programId.equals(ASSOCIATED_TOKEN_PROGRAM_ID)) {\n        ataIXs.instructions.push(ix);\n      } else {\n        newTx.instructions.push(ix);\n      }\n    }\n\n    return {\n      ataIXs: ataIXs.dedupeATAIXs(),\n      tx: newTx,\n    };\n  }\n\n  /**\n   * Get an instruction from the transaction envelope by index.\n   */\n  getInstruction(index: number): TransactionInstruction {\n    const ix = this.instructions[index];\n    if (!ix) {\n      throw new Error(`No instruction found at index ${index}`);\n    }\n    return ix;\n  }\n\n  /**\n   * Attach a memo instruction to this transaction.\n   */\n  addMemo(memo: string): TransactionEnvelope {\n    this.instructions.push(createMemoInstruction(memo));\n    return this;\n  }\n\n  /**\n   * Request for additional compute units before processing this transaction.\n   */\n  addAdditionalComputeBudget(\n    units: number,\n    additionalFee: number\n  ): TransactionEnvelope {\n    this.instructions.unshift(\n      requestComputeUnitsInstruction(units, additionalFee)\n    );\n    return this;\n  }\n\n  /**\n   * Request a specific transaction-wide program heap region size in bytes.\n   */\n  addAdditionalHeapFrame(bytes: number): TransactionEnvelope {\n    this.instructions.unshift(requestHeapFrameInstruction(bytes));\n    return this;\n  }\n}\n"]}