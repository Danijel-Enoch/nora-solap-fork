{"version":3,"file":"printAccountOwners.js","sourceRoot":"","sources":["../../../src/utils/printAccountOwners.ts"],"names":[],"mappings":"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","sourcesContent":["// import { Provider as AnchorProvider } from \"@project-serum/anchor\";\nimport type { AccountInfo, Connection } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\n\n/**\n * A useful tool for debugging account structs. It gives a quick glance at\n * addresses and owners. It also converts bignums into JS numbers.\n *\n * Types converted:\n * - **big numbers**: converted to native numbers\n * - **addresses**: format in base58, and prints the owner in parentheses if the account exists\n * - **plain objects**: recursively converts\n *\n * HINT: This function is mainly useful for the browser. If you are writing\n * Rust integration tests, use debugAccountOwners from chai-solana instead, so\n * that you don't have to pass in connection.\n *\n * Usage:\n * ```\n * await printAccountOwners(connection, depositAccounts);\n * // using void is recommend in dapps to avoid slowing down the user experience\n * void printAccountOwners(connection, depositAccounts);\n * ```\n *\n * Example output:\n * ```\n * tests/awesomeTest.spec.ts:583:29 {\n *   payer: 'CEGhKVeyXUrihUnNU9EchSuu6pMHEsB8MiKgvhJqYgd1 (11111111111111111111111111111111)',\n *   foo: '61tMNVhG66QZQ4UEAoHytqaUN4G1xpk1zsS5YU7Y2Qui (135QzSyjKTKaZ7ebhLpvNA2KUahEjykMjbqz3JV1V4k9)',\n *   bar: '9oPMxXVSm5msAecxi4zJpKDwbHS9c6Yos1ru739rVExc (TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA)',\n *   tokenProgram: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA (BPFLoader2111111111111111111111111111111111)'\n * }\n * ```\n *\n * WARNING: This may break silently if web3 changes its api. This is only\n * intended for debugging purposes only. But it should be safe to use in production.\n */\nexport async function printAccountOwners(\n  connection: Connection,\n  plainObj: object\n): Promise<void> {\n  try {\n    if (typeof plainObj !== \"object\") {\n      throw new Error(\"printAccountOwners only works on objects\");\n    } else {\n      let relativePath: string | undefined;\n      const callStack = new Error().stack?.split(\"\\n\");\n      if (callStack) {\n        let expectIndex = callStack.findIndex((l) =>\n          l.includes(`at ${printAccountOwners.name}`)\n        );\n\n        // debugAccountOwners in chai-solana wraps printAccountOwners\n        // We need to get the caller of debugAccountOwners instead\n        const debugAccountOwnersIndex = callStack.findIndex((l) =>\n          l.includes(`at debugAccountOwners`)\n        );\n        if (debugAccountOwnersIndex > expectIndex) {\n          expectIndex = debugAccountOwnersIndex;\n        }\n\n        // Only log the line number in Node.js\n        if (\n          expectIndex > 0 &&\n          typeof process !== \"undefined\" &&\n          typeof window === \"undefined\"\n        ) {\n          const maybeProcess: MaybeProcess = process;\n          const targetLine = callStack[expectIndex + 1];\n          if (targetLine) {\n            const cwd = maybeProcess.cwd?.() || \"/\";\n            // get the part of targetLine after cwd\n            const targetLineAfterCwd = targetLine.substring(\n              targetLine.indexOf(cwd) + cwd.length\n            );\n            if (targetLineAfterCwd.length > 0) {\n              relativePath = targetLineAfterCwd.substring(1).replace(/\\)$/, \"\");\n            }\n          }\n        }\n      }\n\n      if (!connection) {\n        return;\n      }\n\n      if (relativePath) {\n        console.log(\n          relativePath,\n          await _transformAccountOwners(plainObj, connection)\n        );\n      } else {\n        console.log(await _transformAccountOwners(plainObj, connection));\n      }\n    }\n  } catch (e) {\n    console.error(\"Error in printAccountOwners:\", e);\n  }\n}\n\n/**\n * Just in case some browser compilation doesn't polyfill a fake process\n */\ntype MaybeProcess = {\n  cwd?: () => string;\n};\n\n/**\n * This is a patched version of web3's getMultipleAccountsInfo.\n *\n * When it reaches an account that doesn't exist, it will just continue instead\n * of giving up.\n *\n * WARNING: This may break silently if web3 changes its api. This is only\n * intended for debugging purposes only.\n */\nasync function gracefulGetMultipleAccountsInfo(\n  connection: Connection,\n  publicKeys: PublicKey[]\n): ReturnType<Connection[\"getMultipleAccountsInfo\"]> {\n  try {\n    // To be honest, the web3 internals aren't going to change that much. And if\n    // they do, it'll be rare.\n    const unknownConection = connection as ConnectionWithGetMultipleAccounts;\n    const rpcRequest = unknownConection._rpcRequest;\n    if (typeof rpcRequest !== \"function\") {\n      console.error(\"_rpcRequest is not a function. Maybe web3 changed?\");\n      return [];\n    }\n\n    const unsafeRes = await rpcRequest(\"getMultipleAccounts\", [\n      publicKeys.map((key) => key.toBase58()),\n      { encoding: \"base64\", commitment: \"confirmed\" },\n    ]);\n\n    const value = unsafeRes?.result?.value;\n    if (value) {\n      return value;\n    }\n    return [];\n  } catch (e) {\n    console.error(\"Error in gracefulGetMultipleAccountsInfo:\", e);\n    return [];\n  }\n}\n\ntype PublicKeyBase58 = string;\ntype GetMultipleAccountsArgs = [\n  PublicKeyBase58[],\n  { encoding: \"base64\"; commitment: \"confirmed\" }\n];\n\ninterface ConnectionWithGetMultipleAccounts {\n  _rpcRequest?: (\n    method: \"getMultipleAccounts\",\n    args: GetMultipleAccountsArgs\n  ) => Promise<\n    | undefined\n    | {\n        result?: {\n          value: (AccountInfo<Buffer> | null)[];\n        };\n      }\n  >;\n}\n\n/**\n * Lots of complexity in this function. But using getMultipleAccountsInfo is\n * very important. Even locally, it reduces the time from 300ms to 40ms. On a\n * remote RPC server, it would probably save much more time.\n */\nconst _transformAccountOwners = async (\n  plainObjWithAddressesAndBignums: object,\n  connection: Connection\n): Promise<unknown> => {\n  /* eslint-disable */\n  const result: any = {};\n  if (\n    !plainObjWithAddressesAndBignums ||\n    typeof plainObjWithAddressesAndBignums !== \"object\"\n  ) {\n    return plainObjWithAddressesAndBignums;\n  }\n\n  const base58ToResultKey: Record<string, string> = {};\n  const base58ToLookup: PublicKey[] = [];\n\n  const asyncKeys: string[] = [];\n  const asyncPromises: Promise<unknown>[] = [];\n  for (const [key, value] of Object.entries(plainObjWithAddressesAndBignums)) {\n    if (value && value.toBase58 && typeof value.toBase58 === \"function\") {\n      const base58: string = value.toBase58();\n      base58ToResultKey[base58] = key;\n      const pubKey = new PublicKey(base58);\n      if (!base58ToLookup.includes(pubKey)) {\n        base58ToLookup.push(pubKey);\n      }\n    } else if (\n      value &&\n      value.toNumber &&\n      typeof value.toNumber === \"function\"\n    ) {\n      result[key] = value.toNumber();\n    } else if (isPlainObject(value) && value) {\n      asyncKeys.push(key);\n      asyncPromises.push(_transformAccountOwners(value, connection));\n    } else {\n      result[key] = value;\n    }\n  }\n\n  if (Object.keys(base58ToResultKey).length > 0) {\n    const accountInfos = await gracefulGetMultipleAccountsInfo(\n      connection,\n      base58ToLookup\n    );\n\n    for (const [base58, resultKey] of Object.entries(base58ToResultKey)) {\n      const lookupIndex = base58ToLookup.findIndex(\n        (p) => p.toBase58() === base58\n      );\n      if (lookupIndex >= 0) {\n        const accountInfo = accountInfos[lookupIndex];\n        const owner = accountInfo?.owner;\n        if (owner) {\n          result[resultKey] = `${base58} (${owner})`;\n\n          // Uncomment to verify that this implementation is correct\n          // const accountInfo =\n          //   await connection.getAccountInfo(\n          //     new PublicKey(base58)\n          //   );\n          // const correctOwner = accountInfo?.owner; // we know for sure this works\n          // if (!correctOwner) {\n          //   throw new Error(\"Unable to load correct owner\");\n          // }\n          // if (!new PublicKey(owner).equals(correctOwner)) {\n          //   console.log(\"OWNER MISMATCH\", base58, owner, accountInfo?.owner);\n          //   throw new Error(\"OWNER MISMATCH\");\n          // }\n        } else {\n          result[resultKey] = `${base58}`;\n        }\n      } else {\n        result[resultKey] = `${base58}`;\n      }\n    }\n  }\n\n  const asyncValues = await Promise.all(asyncPromises);\n\n  for (let i = 0; i < asyncKeys.length; i++) {\n    result[asyncKeys[i]!!] = asyncValues[i];\n  }\n  return result;\n};\n\nfunction isPlainObject(obj: any) {\n  /* eslint-disable */\n  return (\n    typeof obj === \"object\" && // separate from primitives\n    obj !== null && // is obvious\n    obj.constructor === Object && // separate instances (Array, DOM, ...)\n    Object.prototype.toString.call(obj) === \"[object Object]\"\n  ); // separate build-in like Math\n}\n"]}