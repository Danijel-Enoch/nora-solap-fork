{"version":3,"file":"printTXTable.js","sourceRoot":"","sources":["../../../src/utils/printTXTable.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Signer,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { Keypair, SystemProgram } from \"@solana/web3.js\";\n\nimport type { Provider } from \"..\";\nimport { TransactionEnvelope } from \"..\";\n\n/**\n * Takes in a simulation result of a transaction and prints it in a cool table.\n * ```\n *    ┌─────┬───┬───┬───┬───────────┬──────┬─────┬──────┬───┐\n *    │index│iso│mar│cum│ programId │quota │used │ left │CPI│\n *    ├─────┼───┼───┼───┼───────────┼──────┼─────┼──────┼───┤\n *    │  0  │298│281│464│'ATokenG..'│200000│24270│175730│ 1 │\n *    │  1  │298│ 74│538│'ATokenG..'│178730│21270│157460│ 1 │\n *    │  2  │298│ 74│612│'ATokenG..'│157460│27277│130183│ 1 │\n *    │  3  │298│ 42│686│'ATokenG..'│130183│21270│108913│ 1 │\n *    │  4  │338│265│951│'qExampL..'│108913│76289│ 32624│ 3 │\n *    └─────┴───┴───┴───┴───────────┴──────┴─────┴──────┴───┘\n * ```\n *\n * - **index**: the array index of the instruction within the transaction\n * - **iso**: the isolated size of the instruction (marginal cost of only the instruction)\n * - **mar**: the marginal size cost of the instruction (when added to previous)\n * - **cum**: the cumulative size of the instructions up until that instruction\n * - **quota/used/left**: [BPF instruction compute unit info](https://docs.solana.com/developing/programming-model/runtime)\n * - **CPI**: [the maximum depth of CPI](https://docs.solana.com/developing/programming-model/calling-between-programs) (current limit in Solana is 4)\n *\n * Safe for browser usage. Can be conveniently run with txEnvelope.simulateTable()\n */\nexport const printTXTable = (\n  tx: TransactionEnvelope,\n  transactionLogs: string[],\n  message: string\n) => {\n  if (message && message !== \"\") {\n    console.log(estimateTransactionSize(tx), message);\n  } else {\n    console.log(\"Transaction size:\", estimateTransactionSize(tx));\n  }\n\n  const computeUnitLogStack: string[] = [];\n  const cpiLogStack: number[] = [];\n  let currentIndex = -1;\n\n  transactionLogs.forEach((line) => {\n    if (line.includes(\" invoke [1]\")) {\n      currentIndex++;\n      cpiLogStack[currentIndex] = 0;\n    }\n    const cpiMatch = line.match(/ invoke \\[(\\d)\\]/);\n    if (cpiMatch && cpiMatch[1]) {\n      const cur = cpiLogStack[currentIndex];\n      cpiLogStack[currentIndex] =\n        cur === undefined\n          ? Number(cpiMatch[1]) - 1\n          : Math.max(Number(cpiMatch[1]) - 1, cur);\n    }\n\n    const computeMatch = line.match(/consumed \\d* of \\d* compute units/);\n    if (computeMatch && computeMatch[0]) {\n      computeUnitLogStack[currentIndex] = computeMatch[0];\n    }\n  });\n\n  const instructionTable: {\n    iso: number;\n    mar: number;\n    cum: number;\n    programId: string;\n    quota: number | undefined;\n    used: number | undefined;\n    left: number | undefined;\n    CPI: number | undefined;\n  }[] = [];\n\n  tx.instructions.forEach((instruction, i) => {\n    const computeUnitLog = computeUnitLogStack[i];\n\n    const computeUnitMatch = computeUnitLog?.match(/consumed (\\d*) of (\\d*)/);\n    const [consumed, quota] = computeUnitMatch\n      ?.slice(1, 3)\n      .map((num) => parseInt(num, 10)) || [undefined, undefined];\n\n    instructionTable.push({\n      iso: isolatedInstructionSize(tx.provider, instruction),\n      mar: marginalInstructionSize(\n        tx.provider,\n        tx.instructions.slice(0, i),\n        instruction\n      ),\n      cum: instructionsSize(tx.provider, tx.instructions.slice(0, i + 1)),\n      programId: instruction.programId.toBase58(),\n      quota: quota ? quota : i === 0 ? 200000 : undefined,\n      used: consumed,\n      left: quota && consumed ? quota - consumed : undefined,\n      CPI: cpiLogStack[i],\n    });\n  });\n\n  console.table(instructionTable);\n};\n\nexport class TXSizeEstimationError extends Error {\n  constructor(readonly underlyingError: unknown) {\n    super(`could not estimate transaction size`);\n    this.name = \"TXSizeEstimationError\";\n  }\n}\n\nexport class EstimatedTXTooBigError extends Error {\n  constructor(readonly tx: Transaction, readonly size: number) {\n    super(`Transaction too large`);\n    this.name = \"EstimatedTXTooBigError\";\n  }\n}\n\n/**\n * Builds a transaction and estimates the size in bytes. This number is primrily\n * to be used for checking to see if a transaction is too big and instructions\n * need to be split. It may not be 100% accurate.\n *\n * This is used in expectTXTable and is useful for increasing efficiency in\n * dapps that build large transactions.\n *\n * The max transaction size of a v1 Transaction in Solana is 1232 bytes.\n * For info about Transaction v2: https://docs.solana.com/proposals/transactions-v2\n *\n * Returns 8888 if the transaction was too big.\n * Returns 9999 if the transaction was unable to be built.\n */\nexport const estimateTransactionSize = (\n  txEnvelope: TransactionEnvelope\n): number => {\n  const result = txEnvelope.estimateSize();\n  if (\"size\" in result) {\n    return result.size;\n  }\n  if (result.error instanceof TXSizeEstimationError) {\n    console.error(\n      \"Unknown error estimating transaction size\",\n      result.error.underlyingError\n    );\n    return 9999;\n  }\n  return 8888;\n};\n\n/**\n * A dummy instruction that is probably tiny and has overlap with most instructions\n */\nconst simpleInstruction = () => {\n  const fs = getFakeSigner();\n\n  return SystemProgram.transfer({\n    fromPubkey: fs.publicKey,\n    toPubkey: fs.publicKey,\n    lamports: 1,\n  });\n};\n\nconst isolatedInstructionSize = (\n  randomProvider: Provider,\n  instruction: TransactionInstruction\n): number => {\n  return marginalInstructionSize(\n    randomProvider,\n    [simpleInstruction()],\n    instruction\n  );\n};\nconst marginalInstructionSize = (\n  randomProvider: Provider,\n  previousInstructions: TransactionInstruction[],\n  instruction: TransactionInstruction\n): number => {\n  const previousTxSize = instructionsSize(\n    randomProvider,\n    previousInstructions.length ? previousInstructions : [simpleInstruction()]\n  );\n\n  const biggerTxSize = instructionsSize(randomProvider, [\n    ...previousInstructions,\n    instruction,\n  ]);\n\n  return biggerTxSize - previousTxSize;\n};\nconst instructionsSize = (\n  randomProvider: Provider,\n  instructions: TransactionInstruction[]\n): number => {\n  const instructionedTx = new TransactionEnvelope(randomProvider, [\n    ...instructions,\n  ]);\n\n  return estimateTransactionSize(instructionedTx);\n};\n\nlet fakeSigner: Signer | undefined = undefined;\nconst getFakeSigner = (): Signer => {\n  if (!fakeSigner) {\n    fakeSigner = Keypair.generate();\n  }\n  return fakeSigner;\n};\n"]}