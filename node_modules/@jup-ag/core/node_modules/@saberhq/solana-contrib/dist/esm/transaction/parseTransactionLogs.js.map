{"version":3,"file":"parseTransactionLogs.js","sourceRoot":"","sources":["../../../src/transaction/parseTransactionLogs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Adapted from explorer.solana.com code written by @jstarry.\n */\n\nimport type { TransactionError } from \"@solana/web3.js\";\nimport invariant from \"tiny-invariant\";\n\nimport { getTransactionInstructionError } from \"./programErr\";\n\n/**\n * A log entry.\n */\nexport type InstructionLogEntry = {\n  /**\n   * Stack depth.\n   */\n  depth: number;\n} & (\n  | {\n      type: \"text\";\n      text: string;\n    }\n  | {\n      type: \"system\";\n      text: string;\n    }\n  | {\n      type: \"cpi\";\n      programAddress: string | null;\n    }\n  | {\n      type: \"success\";\n    }\n  | {\n      type: \"programError\";\n      text: string;\n    }\n  | {\n      type: \"runtimeError\";\n      text: string;\n    }\n);\n\n/**\n * Logs of an individual instruction.\n */\nexport interface InstructionLogs {\n  /**\n   * The program invoked, if it exists in the logs.\n   */\n  programAddress?: string;\n  /**\n   * Logs of the instruction.\n   */\n  logs: InstructionLogEntry[];\n  /**\n   * Whether the instruction failed.\n   */\n  failed: boolean;\n}\n\n/**\n * Stack-aware program log parser.\n * @param logs\n * @param error\n * @returns\n */\nexport const parseTransactionLogs = (\n  logs: string[] | null,\n  error: TransactionError | null\n): InstructionLogs[] => {\n  let depth = 0;\n  const prettyLogs: InstructionLogs[] = [];\n\n  let prettyError;\n  if (!logs) {\n    if (error) throw new Error(JSON.stringify(error));\n    throw new Error(\"No logs detected\");\n  } else if (error) {\n    prettyError = getTransactionInstructionError(error);\n  }\n\n  logs.forEach((log) => {\n    if (log.startsWith(\"Program log:\")) {\n      prettyLogs[prettyLogs.length - 1]?.logs.push({\n        type: \"text\",\n        depth,\n        text: log,\n      });\n    } else {\n      const regex = /Program (\\w*) invoke \\[(\\d)\\]/g;\n      const matches = [...log.matchAll(regex)];\n\n      if (matches.length > 0) {\n        const programAddress = matches[0]?.[1];\n        invariant(programAddress, \"program address\");\n\n        if (depth === 0) {\n          prettyLogs.push({\n            programAddress,\n            logs: [],\n            failed: false,\n          });\n        } else {\n          prettyLogs[prettyLogs.length - 1]?.logs.push({\n            type: \"cpi\",\n            depth,\n            programAddress: programAddress ?? null,\n          });\n        }\n\n        depth++;\n      } else if (log.includes(\"success\")) {\n        prettyLogs[prettyLogs.length - 1]?.logs.push({\n          type: \"success\",\n          depth,\n        });\n        depth--;\n      } else if (log.includes(\"failed\")) {\n        const instructionLog = prettyLogs[prettyLogs.length - 1];\n        if (instructionLog && !instructionLog.failed) {\n          instructionLog.failed = true;\n          instructionLog.logs.push({\n            type: \"programError\",\n            depth,\n            text: log.slice(log.indexOf(\": \") + 2),\n          });\n        }\n        depth--;\n      } else {\n        if (depth === 0) {\n          prettyLogs.push({\n            logs: [],\n            failed: false,\n          });\n          depth++;\n        }\n        // system transactions don't start with \"Program log:\"\n        prettyLogs[prettyLogs.length - 1]?.logs.push({\n          type: \"system\",\n          depth,\n          text: log,\n        });\n      }\n    }\n  });\n\n  // If the instruction's simulation returned an error without any logs then add an empty log entry for Runtime error\n  // For example BpfUpgradableLoader fails without returning any logs for Upgrade instruction with buffer that doesn't exist\n  if (prettyError && prettyLogs.length === 0) {\n    prettyLogs.push({\n      logs: [],\n      failed: true,\n    });\n  }\n\n  if (prettyError && prettyError.index === prettyLogs.length - 1) {\n    const failedIx = prettyLogs[prettyError.index];\n    if (failedIx) {\n      failedIx.failed = true;\n      failedIx.logs.push({\n        type: \"runtimeError\",\n        depth: 1,\n        text: prettyError.message,\n      });\n    }\n  }\n\n  return prettyLogs;\n};\n\nconst buildPrefix = (depth: number) => {\n  const prefix = new Array(depth - 1).fill(\"\\u00A0\\u00A0\").join(\"\");\n  return prefix + \"> \";\n};\n\nconst formatLogEntryString = (entry: InstructionLogEntry) => {\n  switch (entry.type) {\n    case \"success\":\n      return `Program returned success`;\n    case \"programError\":\n      return `Program returned error: ${entry.text}`;\n    case \"runtimeError\":\n      return `Runtime error: ${entry.text}`;\n    case \"system\":\n      return entry.text;\n    case \"text\":\n      return entry.text;\n    case \"cpi\":\n      return `Invoking Unknown ${\n        entry.programAddress ? `(${entry.programAddress}) ` : \"\"\n      }Program`;\n  }\n};\n\n/**\n * Formats a log entry to be printed out.\n * @param entry\n * @param prefix\n * @returns\n */\nexport const formatLogEntry = (\n  entry: InstructionLogEntry,\n  prefix = false\n): string => {\n  const prefixString = prefix ? buildPrefix(entry.depth) : \"\";\n  return `${prefixString}${formatLogEntryString(entry)}`;\n};\n\n/**\n * Formats instruction logs.\n * @param logs\n */\nexport const formatInstructionLogs = (\n  logs: readonly InstructionLogs[]\n): string =>\n  logs\n    .map((log, i) => {\n      return [\n        `=> Instruction #${i}: ${\n          log.programAddress ? `Program ${log.programAddress}` : \"System\"\n        }`,\n        ...log.logs.map((entry) => formatLogEntry(entry, true)),\n      ].join(\"\\n\");\n    })\n    .join(\"\\n\");\n"]}