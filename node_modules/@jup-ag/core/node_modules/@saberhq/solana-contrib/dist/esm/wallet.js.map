{"version":3,"file":"wallet.js","sourceRoot":"","sources":["../../src/wallet.ts"],"names":[],"mappings":"AASA,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAE5C;;GAEG;AACH,MAAM,OAAO,YAAY;IACvB,YAAqB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAEvC,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IAC/B,CAAC;IAED,mBAAmB,CAAC,YAA2B;QAC7C,OAAO,OAAO,CAAC,OAAO,CACpB,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;YACtB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC5B,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,WAAwB;QACtC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrC,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,cAAc,CACZ,UAAsB,EACtB,cAA2B,EAC3B,IAAqB;QAErB,OAAO,cAAc,CAAC,IAAI,CAAC;YACzB,UAAU;YACV,cAAc;YACd,MAAM,EAAE,IAAI;YACZ,IAAI;SACL,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import type {\n  ConfirmOptions,\n  Connection,\n  PublicKey,\n  Signer,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport type { Provider, Wallet } from \"./interfaces\";\nimport { SolanaProvider } from \"./provider\";\n\n/**\n * Wallet based on a Signer.\n */\nexport class SignerWallet implements Wallet {\n  constructor(readonly signer: Signer) {}\n\n  get publicKey(): PublicKey {\n    return this.signer.publicKey;\n  }\n\n  signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    return Promise.resolve(\n      transactions.map((tx) => {\n        tx.partialSign(this.signer);\n        return tx;\n      })\n    );\n  }\n\n  signTransaction(transaction: Transaction): Promise<Transaction> {\n    transaction.partialSign(this.signer);\n    return Promise.resolve(transaction);\n  }\n\n  /**\n   * Creates a Provider from this Wallet by adding a Connection.\n   * @param connection\n   * @returns\n   */\n  createProvider(\n    connection: Connection,\n    sendConnection?: Connection,\n    opts?: ConfirmOptions\n  ): Provider {\n    return SolanaProvider.load({\n      connection,\n      sendConnection,\n      wallet: this,\n      opts,\n    });\n  }\n}\n"]}