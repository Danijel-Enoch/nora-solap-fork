{"version":3,"file":"txSizer.js","sourceRoot":"","sources":["../../../src/transaction/txSizer.ts"],"names":[],"mappings":"AAEA,SAAS,oBAAoB,CAAC,KAAoB,EAAE,GAAW;IAC7D,IAAI,OAAO,GAAG,GAAG,CAAC;IAClB,SAAS;QACP,IAAI,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC;QAC1B,OAAO,KAAK,CAAC,CAAC;QACd,IAAI,OAAO,KAAK,CAAC,EAAE;YACjB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjB,MAAM;SACP;aAAM;YACL,IAAI,IAAI,IAAI,CAAC;YACb,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;KACF;AACH,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,EAAe,EAAU,EAAE;IAC/D,6BAA6B;IAC7B,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC;IACxB,MAAM,iBAAiB,GACrB,QAAQ,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtE,MAAM,QAAQ,GAAG,EAAE,CAAC,gBAAgB,EAAE,CAAC;IACvC,MAAM,UAAU,GAAG,EAAE,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtE,MAAM,cAAc,GAAa,EAAE,CAAC;IACpC,oBAAoB,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;IACjD,OAAO,cAAc,CAAC,MAAM,GAAG,UAAU,GAAG,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC;AACnE,CAAC,CAAC","sourcesContent":["import type { Transaction } from \"@solana/web3.js\";\n\nfunction shortvecEncodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len === 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\n/**\n * Calculates transaction size. If the transaction is too large, it does not throw.\n * @param tx\n * @returns\n */\nexport const calculateTxSizeUnsafe = (tx: Transaction): number => {\n  // check if fee payer signed.\n  const { feePayer } = tx;\n  const hasFeePayerSigned =\n    feePayer && tx.signatures.find((s) => s.publicKey.equals(feePayer));\n  const signData = tx.serializeMessage();\n  const numSigners = tx.signatures.length + (hasFeePayerSigned ? 1 : 0);\n  const signatureCount: number[] = [];\n  shortvecEncodeLength(signatureCount, numSigners);\n  return signatureCount.length + numSigners * 64 + signData.length;\n};\n"]}