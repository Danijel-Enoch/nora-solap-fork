/**
 * Hide the console.error because @solana/web3.js often emits noisy errors as a
 * side effect.
 */
export declare const suppressConsoleErrorAsync: <T>(fn: () => Promise<T>) => Promise<T>;
/**
 * Hide the console.error because @solana/web3.js often emits noisy errors as a
 * side effect.
 */
export declare const suppressConsoleError: <T>(fn: () => T) => T;
/**
 * Checks to see if the provided value is not null.
 *
 * Useful for preserving types in filtering out non-null values.
 *
 * @param value
 * @returns
 */
export declare const isNotNull: <TValue>(value: TValue | null) => value is TValue;
/**
 * Checks to see if the provided value is not undefined.
 *
 * @param value
 * @returns
 */
export declare const isNotUndefined: <TValue>(value: TValue | undefined) => value is TValue;
/**
 * Checks to see if the provided value is not null or undefined.
 *
 * @param value
 * @returns
 */
export declare const exists: <TValue>(value: TValue | null | undefined) => value is TValue;
//# sourceMappingURL=misc.d.ts.map