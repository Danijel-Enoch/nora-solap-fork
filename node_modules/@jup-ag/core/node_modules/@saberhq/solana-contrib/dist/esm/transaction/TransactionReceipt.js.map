{"version":3,"file":"TransactionReceipt.js","sourceRoot":"","sources":["../../../src/transaction/TransactionReceipt.ts"],"names":[],"mappings":"AAKA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAIvC;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAC7B;IACE;;OAEG;IACM,SAA+B;IACxC;;OAEG;IACM,QAA6B;QAJ7B,cAAS,GAAT,SAAS,CAAsB;QAI/B,aAAQ,GAAR,QAAQ,CAAqB;IACrC,CAAC;IAEJ;;OAEG;IACH,SAAS,CAAkB,WAA2B;;QACpD,MAAM,IAAI,GAAG,MAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,0CAAE,WAAW,CAAC;QAC7C,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC;SAC1B;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;OAEG;IACH,SAAS;;QACP,OAAO,CAAC,GAAG,CAAC,MAAA,MAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,0CAAE,WAAW,0CAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED;;;OAGG;IACH,IAAI,YAAY;;QACd,MAAM,IAAI,GAAG,MAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,0CAAE,WAAW,CAAC;QAC7C,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACzC,SAAS,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;QACxC,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAC/B,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,0BAA0B,CAAC,UAAmB,cAAc;QAC1D,OAAO,kCAAkC,IAAI,CAAC,SAAS,YAAY,OAAO,EAAE,CAAC;IAC/E,CAAC;CACF","sourcesContent":["import type {\n  Cluster,\n  TransactionResponse,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport invariant from \"tiny-invariant\";\n\nimport type { Event, EventParser } from \"../interfaces\";\n\n/**\n * A transaction that has been processed by the cluster.\n */\nexport class TransactionReceipt {\n  constructor(\n    /**\n     * Signature (id) of the transaction.\n     */\n    readonly signature: TransactionSignature,\n    /**\n     * Raw response from web3.js\n     */\n    readonly response: TransactionResponse\n  ) {}\n\n  /**\n   * Gets the events associated with this transaction.\n   */\n  getEvents<E extends Event>(eventParser: EventParser<E>): readonly E[] {\n    const logs = this.response.meta?.logMessages;\n    if (logs && logs.length > 0) {\n      return eventParser(logs);\n    }\n    return [];\n  }\n\n  /**\n   * Prints the logs associated with this transaction.\n   */\n  printLogs(): void {\n    console.log(this.response.meta?.logMessages?.join(\"\\n\"));\n  }\n\n  /**\n   * Gets the compute units used by the transaction.\n   * @returns\n   */\n  get computeUnits(): number {\n    const logs = this.response.meta?.logMessages;\n    invariant(logs, \"no logs\");\n    const consumeLog = logs[logs.length - 2];\n    invariant(consumeLog, \"no consume log\");\n    const amtStr = consumeLog.split(\" \")[3];\n    invariant(amtStr, \"no amount\");\n    return parseInt(amtStr);\n  }\n\n  /**\n   * Generates a link to view this {@link TransactionReceipt} on the official Solana explorer.\n   * @param network\n   * @returns\n   */\n  generateSolanaExplorerLink(cluster: Cluster = \"mainnet-beta\"): string {\n    return `https://explorer.solana.com/tx/${this.signature}?cluster=${cluster}`;\n  }\n}\n"]}