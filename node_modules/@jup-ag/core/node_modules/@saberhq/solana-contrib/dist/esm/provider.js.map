{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../src/provider.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Commitment,\n  ConfirmOptions,\n  Connection,\n  KeyedAccountInfo,\n  PublicKey,\n  RpcResponseAndContext,\n  Signer,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport invariant from \"tiny-invariant\";\n\nimport type { Broadcaster, ReadonlyProvider } from \".\";\nimport {\n  MultipleConnectionBroadcaster,\n  PendingTransaction,\n  SignerWallet,\n} from \".\";\nimport { SingleConnectionBroadcaster } from \"./broadcaster\";\nimport type {\n  Provider,\n  SendTxRequest,\n  TransactionSigner,\n  Wallet,\n} from \"./interfaces\";\nimport { TransactionEnvelope } from \"./transaction/TransactionEnvelope\";\n\nexport const DEFAULT_PROVIDER_OPTIONS: ConfirmOptions = {\n  preflightCommitment: \"confirmed\",\n  commitment: \"confirmed\",\n};\n\nexport const DEFAULT_READONLY_PUBLIC_KEY: PublicKey = SystemProgram.programId;\n\n/**\n * Provider that can only read.\n */\nexport class SolanaReadonlyProvider implements ReadonlyProvider {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param opts       Transaction confirmation options to use by default.\n   * @param publicKey  Optional public key of read-only wallet.\n   */\n  constructor(\n    readonly connection: Connection,\n    readonly opts: ConfirmOptions = DEFAULT_PROVIDER_OPTIONS,\n    readonly publicKey: PublicKey = DEFAULT_READONLY_PUBLIC_KEY\n  ) {\n    this.wallet = {\n      ...this.wallet,\n      publicKey,\n    };\n  }\n\n  wallet: Wallet = {\n    signTransaction: Promise.resolve.bind(Promise),\n    signAllTransactions: Promise.resolve.bind(Promise),\n    publicKey: DEFAULT_READONLY_PUBLIC_KEY,\n  };\n\n  /**\n   * Gets\n   * @param accountId\n   * @returns\n   */\n  async getAccountInfo(accountId: PublicKey): Promise<KeyedAccountInfo | null> {\n    const accountInfo = await this.connection.getAccountInfo(\n      accountId,\n      this.opts.commitment\n    );\n    if (!accountInfo) {\n      return null;\n    }\n    return {\n      accountId,\n      accountInfo,\n    };\n  }\n}\n\n/**\n * Signs Solana transactions.\n */\nexport class SolanaTransactionSigner implements TransactionSigner {\n  constructor(\n    readonly wallet: Wallet,\n    readonly broadcaster: Broadcaster,\n    readonly preflightCommitment: Commitment = \"confirmed\"\n  ) {}\n\n  get publicKey(): PublicKey {\n    return this.wallet.publicKey;\n  }\n\n  /**\n   * Sends the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provdier wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  async sign(\n    tx: Transaction,\n    signers: readonly (Signer | undefined)[] = [],\n    opts: ConfirmOptions = {\n      preflightCommitment: this.preflightCommitment,\n    }\n  ): Promise<Transaction> {\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = await this.broadcaster.getRecentBlockhash(\n      opts.preflightCommitment\n    );\n\n    await this.wallet.signTransaction(tx);\n    signers\n      .filter((s): s is Signer => s !== undefined)\n      .forEach((kp) => {\n        tx.partialSign(kp);\n      });\n\n    return tx;\n  }\n\n  /**\n   * Similar to `send`, but for an array of transactions and signers.\n   */\n  async signAll(\n    reqs: readonly SendTxRequest[],\n    opts: ConfirmOptions = {\n      preflightCommitment: this.preflightCommitment,\n    }\n  ): Promise<Transaction[]> {\n    const blockhash = await this.broadcaster.getRecentBlockhash(\n      opts.preflightCommitment\n    );\n\n    const txs = reqs.map((r) => {\n      const tx = r.tx;\n      let signers = r.signers;\n\n      if (signers === undefined) {\n        signers = [];\n      }\n\n      tx.feePayer = this.wallet.publicKey;\n      tx.recentBlockhash = blockhash;\n\n      signers\n        .filter((s): s is Signer => s !== undefined)\n        .forEach((kp) => {\n          tx.partialSign(kp);\n        });\n\n      return tx;\n    });\n\n    const signedTxs = await this.wallet.signAllTransactions(txs);\n    return signedTxs;\n  }\n}\n\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n *\n * This implementation was taken from Anchor.\n */\nexport class SolanaProvider extends SolanaReadonlyProvider implements Provider {\n  readonly signer: TransactionSigner;\n\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param sendConnection The connection where transactions are sent to.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  constructor(\n    override readonly connection: Connection,\n    readonly broadcaster: Broadcaster,\n    override readonly wallet: Wallet,\n    override readonly opts: ConfirmOptions = DEFAULT_PROVIDER_OPTIONS\n  ) {\n    super(connection, opts);\n    this.signer = new SolanaTransactionSigner(\n      wallet,\n      broadcaster,\n      opts.preflightCommitment\n    );\n  }\n\n  /**\n   * Creates a new SolanaProvider.\n   * @deprecated use {@link SolanaProvider.init}\n   */\n  static load({\n    connection,\n    sendConnection = connection,\n    wallet,\n    opts,\n  }: {\n    /**\n     * Connection used for general reads\n     */\n    connection: Connection;\n    /**\n     * Connection used for sending transactions\n     */\n    sendConnection?: Connection;\n    /**\n     * Wallet used for signing transactions\n     */\n    wallet: Wallet;\n    /**\n     * Confirmation options\n     */\n    opts?: ConfirmOptions;\n  }): SolanaProvider {\n    return new SolanaProvider(\n      connection,\n      new SingleConnectionBroadcaster(sendConnection, opts),\n      wallet,\n      opts\n    );\n  }\n\n  /**\n   * Initializes a new SolanaProvider.\n   */\n  static init({\n    connection,\n    broadcastConnections = [connection],\n    wallet,\n    opts = DEFAULT_PROVIDER_OPTIONS,\n  }: {\n    /**\n     * Connection used for general reads\n     */\n    readonly connection: Connection;\n    /**\n     * Connections used for broadcasting transactions. Defaults to the read connection.\n     */\n    readonly broadcastConnections?: readonly Connection[];\n    /**\n     * Wallet used for signing transactions\n     */\n    readonly wallet: Wallet;\n    /**\n     * Confirmation options\n     */\n    readonly opts?: ConfirmOptions;\n  }): SolanaProvider {\n    const firstBroadcastConnection = broadcastConnections[0];\n    invariant(\n      firstBroadcastConnection,\n      \"must have at least one broadcast connection\"\n    );\n    return new SolanaProvider(\n      connection,\n      broadcastConnections.length > 1\n        ? new MultipleConnectionBroadcaster(broadcastConnections, opts)\n        : new SingleConnectionBroadcaster(firstBroadcastConnection, opts),\n      wallet,\n      opts\n    );\n  }\n\n  /**\n   * Sends the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provdier wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  async send(\n    tx: Transaction,\n    signers: (Signer | undefined)[] = [],\n    opts: ConfirmOptions = this.opts\n  ): Promise<PendingTransaction> {\n    const theTx = await this.signer.sign(tx, signers, opts);\n    const pending = await this.broadcaster.broadcast(theTx, opts);\n    await pending.wait();\n    return pending;\n  }\n\n  /**\n   * Similar to `send`, but for an array of transactions and signers.\n   */\n  async sendAll(\n    reqs: readonly SendTxRequest[],\n    opts: ConfirmOptions = this.opts\n  ): Promise<PendingTransaction[]> {\n    const txs = await this.signer.signAll(reqs, opts);\n    return await Promise.all(\n      txs.map(async (tx) => {\n        const pending = await this.broadcaster.broadcast(tx, opts);\n        await pending.wait();\n        return pending;\n      })\n    );\n  }\n\n  /**\n   * Simulates the given transaction, returning emitted logs from execution.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provider wallet that\n   *                will sign the transaction. If specified, the provider will\n   *                sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  async simulate(\n    tx: Transaction,\n    signers: (Signer | undefined)[] | undefined,\n    opts: ConfirmOptions = this.opts\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let simTX = tx;\n    if (signers !== undefined) {\n      simTX = await this.signer.sign(tx, signers, opts);\n    }\n    return await this.broadcaster.simulate(simTX, {\n      verifySigners: signers !== undefined,\n      commitment: opts.commitment,\n    });\n  }\n}\n\n/**\n * Provider with utility functions.\n */\nexport interface AugmentedProvider extends Provider {\n  /**\n   * The {@link PublicKey} of the wallet.\n   */\n  readonly walletKey: PublicKey;\n\n  /**\n   * Creates a new transaction using this Provider.\n   * @param instructions\n   * @param signers\n   * @returns\n   */\n  newTX: (\n    instructions?: (TransactionInstruction | null | undefined | boolean)[],\n    signers?: Signer[]\n  ) => TransactionEnvelope;\n\n  /**\n   * Requests an airdrop of tokens.\n   * @param lamports Number of lamports.\n   * @returns\n   */\n  requestAirdrop: (lamports: number) => Promise<PendingTransaction>;\n\n  /**\n   * Returns this provider with a different signer.\n   * @param signer\n   * @returns\n   */\n  withSigner: (signer: Signer) => AugmentedProvider;\n}\n\n/**\n * Wrapper for a Provider containing utility functions.\n */\nexport class SolanaAugmentedProvider implements AugmentedProvider {\n  constructor(readonly provider: Provider) {}\n\n  get walletKey(): PublicKey {\n    return this.provider.wallet.publicKey;\n  }\n\n  get connection(): Connection {\n    return this.provider.connection;\n  }\n\n  get signer(): TransactionSigner {\n    return this.provider.signer;\n  }\n\n  get broadcaster(): Broadcaster {\n    return this.provider.broadcaster;\n  }\n\n  get opts(): ConfirmOptions {\n    return this.provider.opts;\n  }\n\n  get wallet(): Wallet {\n    return this.provider.wallet;\n  }\n\n  send(\n    tx: Transaction,\n    signers?: (Signer | undefined)[] | undefined,\n    opts?: ConfirmOptions | undefined\n  ): Promise<PendingTransaction> {\n    return this.provider.send(tx, signers, opts);\n  }\n\n  sendAll(\n    reqs: readonly SendTxRequest[],\n    opts?: ConfirmOptions | undefined\n  ): Promise<PendingTransaction[]> {\n    return this.provider.sendAll(reqs, opts);\n  }\n\n  simulate(\n    tx: Transaction,\n    signers?: (Signer | undefined)[] | undefined,\n    opts?: ConfirmOptions | undefined\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    return this.provider.simulate(tx, signers, opts);\n  }\n\n  getAccountInfo(accountId: PublicKey): Promise<KeyedAccountInfo | null> {\n    return this.provider.getAccountInfo(accountId);\n  }\n\n  /**\n   * Creates a new transaction using this Provider.\n   * @param instructions\n   * @param signers\n   * @returns\n   */\n  newTX(\n    instructions: (TransactionInstruction | null | undefined | boolean)[] = [],\n    signers: Signer[] = []\n  ): TransactionEnvelope {\n    return TransactionEnvelope.create(this, instructions, signers);\n  }\n\n  /**\n   * Requests an airdrop of tokens.\n   * @param amount\n   * @returns\n   */\n  async requestAirdrop(\n    lamports: number,\n    to: PublicKey = this.wallet.publicKey\n  ): Promise<PendingTransaction> {\n    return new PendingTransaction(\n      this.connection,\n      await this.connection.requestAirdrop(to, lamports)\n    );\n  }\n\n  /**\n   * Returns this provider with a different signer.\n   * @param signer\n   * @returns\n   */\n  withSigner(signer: Signer): SolanaAugmentedProvider {\n    return new SolanaAugmentedProvider(\n      new SolanaProvider(\n        this.connection,\n        this.broadcaster,\n        new SignerWallet(signer),\n        this.opts\n      )\n    );\n  }\n}\n"]}