{"version":3,"file":"curve.js","sourceRoot":"","sources":["../../../src/calculator/curve.ts"],"names":[],"mappings":"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","sourcesContent":["import { ONE, ZERO } from \"@saberhq/token-utils\";\nimport JSBI from \"jsbi\";\n\nconst N_COINS = JSBI.BigInt(2); // n\n\nconst abs = (a: JSBI): JSBI => {\n  if (JSBI.greaterThan(a, ZERO)) {\n    return a;\n  }\n  return JSBI.unaryMinus(a);\n};\n\n// maximum iterations of newton's method approximation\nconst MAX_ITERS = 20;\n\n/**\n * Compute the StableSwap invariant\n * @param ampFactor Amplification coefficient (A)\n * @param amountA Swap balance of token A\n * @param amountB Swap balance of token B\n * Reference: https://github.com/curvefi/curve-contract/blob/7116b4a261580813ef057887c5009e22473ddb7d/tests/simulation.py#L31\n */\nexport const computeD = (\n  ampFactor: JSBI,\n  amountA: JSBI,\n  amountB: JSBI\n): JSBI => {\n  const Ann = JSBI.multiply(ampFactor, N_COINS); // A*n^n\n  const S = JSBI.add(amountA, amountB); // sum(x_i), a.k.a S\n  if (JSBI.equal(S, ZERO)) {\n    return ZERO;\n  }\n\n  let dPrev = ZERO;\n  let d = S;\n\n  for (\n    let i = 0;\n    JSBI.greaterThan(abs(JSBI.subtract(d, dPrev)), ONE) && i < MAX_ITERS;\n    i++\n  ) {\n    dPrev = d;\n    let dP = d;\n    dP = JSBI.divide(JSBI.multiply(dP, d), JSBI.multiply(amountA, N_COINS));\n    dP = JSBI.divide(JSBI.multiply(dP, d), JSBI.multiply(amountB, N_COINS));\n\n    const dNumerator = JSBI.multiply(\n      d,\n      JSBI.add(JSBI.multiply(Ann, S), JSBI.multiply(dP, N_COINS))\n    );\n    const dDenominator = JSBI.add(\n      JSBI.multiply(d, JSBI.subtract(Ann, ONE)),\n      JSBI.multiply(dP, JSBI.add(N_COINS, ONE))\n    );\n    d = JSBI.divide(dNumerator, dDenominator);\n  }\n\n  return d;\n};\n\n/**\n * Compute Y amount in respect to X on the StableSwap curve\n * @param ampFactor Amplification coefficient (A)\n * @param x The quantity of underlying asset\n * @param d StableSwap invariant\n * Reference: https://github.com/curvefi/curve-contract/blob/7116b4a261580813ef057887c5009e22473ddb7d/tests/simulation.py#L55\n */\nexport const computeY = (ampFactor: JSBI, x: JSBI, d: JSBI): JSBI => {\n  const Ann = JSBI.multiply(ampFactor, N_COINS); // A*n^n\n  // sum' = prod' = x\n  const b = JSBI.subtract(JSBI.add(x, JSBI.divide(d, Ann)), d); // b = sum' - (A*n**n - 1) * D / (A * n**n)\n  const c = JSBI.divide(\n    JSBI.multiply(\n      JSBI.multiply(\n        d, // c =  D ** (n + 1) / (n ** (2 * n) * prod' * A)\n        d\n      ),\n      d\n    ),\n    JSBI.multiply(N_COINS, JSBI.multiply(N_COINS, JSBI.multiply(x, Ann)))\n  );\n\n  let yPrev = ZERO;\n  let y = d;\n  for (\n    let i = 0;\n    i < MAX_ITERS && JSBI.greaterThan(abs(JSBI.subtract(y, yPrev)), ONE);\n    i++\n  ) {\n    yPrev = y;\n    y = JSBI.divide(\n      JSBI.add(JSBI.multiply(y, y), c),\n      JSBI.add(JSBI.multiply(N_COINS, y), b)\n    );\n  }\n\n  return y;\n};\n"]}