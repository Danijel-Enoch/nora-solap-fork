{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/state/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,sBAAsB,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAC;AAE5C,cAAc,QAAQ,CAAC;AACvB,cAAc,UAAU,CAAC;AAsEzB;;;;GAIG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAY,EAAmB,EAAE;IAC1D,MAAM,cAAc,GAAG,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrD,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;QACjC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;KAC7C;IACD,MAAM,YAAY,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IAChE,MAAM,gBAAgB,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACxE,MAAM,gBAAgB,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACxE,MAAM,aAAa,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IAClE,MAAM,aAAa,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IAClE,MAAM,aAAa,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IAC9D,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAClD,MAAM,KAAK,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAClD,MAAM,gBAAgB,GAAG,GAAG,CAAC,UAAU,CACrC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAC7C,CAAC;IACF,MAAM,eAAe,GAAG,GAAG,CAAC,UAAU,CACpC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAC5C,CAAC;IACF,MAAM,kBAAkB,GAAG,cAAc,CAAC,WAAW,CAAC;IACtD,MAAM,iBAAiB,GAAG,cAAc,CAAC,UAAU,CAAC;IACpD,MAAM,IAAI,GAAG,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC7C,OAAO;QACL,aAAa,EAAE,CAAC,CAAC,cAAc,CAAC,aAAa;QAC7C,QAAQ,EAAE,CAAC,CAAC,cAAc,CAAC,QAAQ;QACnC,KAAK,EAAE,cAAc,CAAC,KAAK;QAC3B,mBAAmB,EAAE,cAAc,CAAC,mBAAmB;QACvD,kBAAkB,EAAE,IAAI,SAAS,CAAC,cAAc,CAAC,kBAAkB,CAAC;QACpE,YAAY;QACZ,MAAM,EAAE;YACN,eAAe,EAAE,gBAAgB;YACjC,OAAO,EAAE,aAAa;YACtB,IAAI,EAAE,KAAK;SACZ;QACD,MAAM,EAAE;YACN,eAAe,EAAE,gBAAgB;YACjC,OAAO,EAAE,aAAa;YACtB,IAAI,EAAE,KAAK;SACZ;QACD,aAAa;QACb,gBAAgB;QAChB,eAAe;QACf,kBAAkB;QAClB,iBAAiB;QACjB,IAAI;KACL,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { u64 } from \"@saberhq/token-utils\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport type { SwapTokenInfo } from \"../instructions/swap\";\nimport type { Fees } from \"./fees\";\nimport { decodeFees } from \"./fees\";\nimport { StableSwapLayout } from \"./layout\";\n\nexport * from \"./fees\";\nexport * from \"./layout\";\n\n/**\n * State of a StableSwap, read from the swap account.\n */\nexport interface StableSwapState {\n  /**\n   * Whether or not the swap is initialized.\n   */\n  isInitialized: boolean;\n\n  /**\n   * Whether or not the swap is paused.\n   */\n  isPaused: boolean;\n\n  /**\n   * Nonce used to generate the swap authority.\n   */\n  nonce: number;\n\n  /**\n   * Mint account for pool token\n   */\n  poolTokenMint: PublicKey;\n\n  /**\n   * Admin account\n   */\n  adminAccount: PublicKey;\n\n  tokenA: SwapTokenInfo;\n  tokenB: SwapTokenInfo;\n\n  /**\n   * Initial amplification coefficient (A)\n   */\n  initialAmpFactor: u64;\n\n  /**\n   * Target amplification coefficient (A)\n   */\n  targetAmpFactor: u64;\n\n  /**\n   * Ramp A start timestamp\n   */\n  startRampTimestamp: number;\n\n  /**\n   * Ramp A start timestamp\n   */\n  stopRampTimestamp: number;\n\n  /**\n   * When the future admin can no longer become the admin, if applicable.\n   */\n  futureAdminDeadline: number;\n\n  /**\n   * The next admin.\n   */\n  futureAdminAccount: PublicKey;\n\n  /**\n   * Fee schedule\n   */\n  fees: Fees;\n}\n\n/**\n * Decodes the Swap account.\n * @param data\n * @returns\n */\nexport const decodeSwap = (data: Buffer): StableSwapState => {\n  const stableSwapData = StableSwapLayout.decode(data);\n  if (!stableSwapData.isInitialized) {\n    throw new Error(`Invalid token swap state`);\n  }\n  const adminAccount = new PublicKey(stableSwapData.adminAccount);\n  const adminFeeAccountA = new PublicKey(stableSwapData.adminFeeAccountA);\n  const adminFeeAccountB = new PublicKey(stableSwapData.adminFeeAccountB);\n  const tokenAccountA = new PublicKey(stableSwapData.tokenAccountA);\n  const tokenAccountB = new PublicKey(stableSwapData.tokenAccountB);\n  const poolTokenMint = new PublicKey(stableSwapData.tokenPool);\n  const mintA = new PublicKey(stableSwapData.mintA);\n  const mintB = new PublicKey(stableSwapData.mintB);\n  const initialAmpFactor = u64.fromBuffer(\n    Buffer.from(stableSwapData.initialAmpFactor)\n  );\n  const targetAmpFactor = u64.fromBuffer(\n    Buffer.from(stableSwapData.targetAmpFactor)\n  );\n  const startRampTimestamp = stableSwapData.startRampTs;\n  const stopRampTimestamp = stableSwapData.stopRampTs;\n  const fees = decodeFees(stableSwapData.fees);\n  return {\n    isInitialized: !!stableSwapData.isInitialized,\n    isPaused: !!stableSwapData.isPaused,\n    nonce: stableSwapData.nonce,\n    futureAdminDeadline: stableSwapData.futureAdminDeadline,\n    futureAdminAccount: new PublicKey(stableSwapData.futureAdminAccount),\n    adminAccount,\n    tokenA: {\n      adminFeeAccount: adminFeeAccountA,\n      reserve: tokenAccountA,\n      mint: mintA,\n    },\n    tokenB: {\n      adminFeeAccount: adminFeeAccountB,\n      reserve: tokenAccountB,\n      mint: mintB,\n    },\n    poolTokenMint,\n    initialAmpFactor,\n    targetAmpFactor,\n    startRampTimestamp,\n    stopRampTimestamp,\n    fees,\n  };\n};\n"]}