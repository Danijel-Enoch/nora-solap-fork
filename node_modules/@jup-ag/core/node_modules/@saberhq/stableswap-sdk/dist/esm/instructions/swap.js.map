{"version":3,"file":"swap.js","sourceRoot":"","sources":["../../../src/instructions/swap.ts"],"names":[],"mappings":"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","sourcesContent":["import type { u64 } from \"@saberhq/token-utils\";\nimport type { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\n\nimport type { Fees, RawFees } from \"../state\";\nimport { encodeFees, ZERO_FEES } from \"../state\";\nimport type { StableSwapConfig } from \"./common\";\nimport { buildInstruction } from \"./common\";\nimport {\n  DepositIXLayout,\n  InitializeSwapIXLayout,\n  SwapIXLayout,\n  WithdrawIXLayout,\n  WithdrawOneIXLayout,\n} from \"./layouts\";\n\n/**\n * Instruction enum.\n */\nexport enum StableSwapInstruction {\n  INITIALIZE = 0,\n  SWAP = 1,\n  DEPOSIT = 2,\n  WITHDRAW = 3,\n  WITHDRAW_ONE = 4,\n}\n\n/**\n * Info about the tokens to swap.\n */\nexport interface SwapTokenInfo {\n  /**\n   * The account that admin fees go to.\n   */\n  adminFeeAccount: PublicKey;\n  /**\n   * Mint of the token.\n   */\n  mint: PublicKey;\n  /**\n   * This swap's token reserves.\n   */\n  reserve: PublicKey;\n}\n\nexport interface InitializeSwapInstruction {\n  config: StableSwapConfig;\n\n  /**\n   * Account that can manage the swap.\n   */\n  adminAccount: PublicKey;\n\n  tokenA: SwapTokenInfo;\n  tokenB: SwapTokenInfo;\n\n  poolTokenMint: PublicKey;\n\n  /**\n   * Destination account for the initial LP tokens.\n   */\n  destinationPoolTokenAccount: PublicKey;\n\n  nonce: number;\n  ampFactor: u64;\n  fees?: Fees;\n  isPaused?: boolean;\n}\n\nexport interface SwapInstruction {\n  config: StableSwapConfig;\n  /**\n   * User source authority\n   */\n  userAuthority: PublicKey;\n  /**\n   * User source token account\n   */\n  userSource: PublicKey;\n  /**\n   * Swap source token account\n   */\n  poolSource: PublicKey;\n  /**\n   * Swap destination token account\n   */\n  poolDestination: PublicKey;\n  /**\n   * User destination token account\n   */\n  userDestination: PublicKey;\n  adminDestination: PublicKey;\n  amountIn: u64;\n  minimumAmountOut: u64;\n}\n\nexport interface DepositInstruction {\n  config: StableSwapConfig;\n  /**\n   * Authority for user account\n   */\n  userAuthority: PublicKey;\n  /**\n   * Depositor account for token A\n   */\n  sourceA: PublicKey;\n  /**\n   * Depositor account for token B\n   */\n  sourceB: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  poolTokenMint: PublicKey;\n  poolTokenAccount: PublicKey;\n  tokenAmountA: u64;\n  tokenAmountB: u64;\n  minimumPoolTokenAmount: u64;\n}\n\nexport interface WithdrawInstruction {\n  config: StableSwapConfig;\n  /**\n   * User source authority\n   */\n  userAuthority: PublicKey;\n  poolMint: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  adminFeeAccountA: PublicKey;\n  adminFeeAccountB: PublicKey;\n\n  /**\n   * Account which is the source of the pool tokens\n   * that is; the user's pool token account\n   */\n  sourceAccount: PublicKey;\n  userAccountA: PublicKey;\n  userAccountB: PublicKey;\n  poolTokenAmount: u64;\n  minimumTokenA: u64;\n  minimumTokenB: u64;\n}\n\nexport interface WithdrawOneInstruction {\n  config: StableSwapConfig;\n  /**\n   * User source authority\n   */\n  userAuthority: PublicKey;\n  poolMint: PublicKey;\n\n  /**\n   * User account that holds the LP tokens\n   */\n  sourceAccount: PublicKey;\n  /**\n   * Pool account that holds the tokens to withdraw\n   */\n  baseTokenAccount: PublicKey;\n  /**\n   * Pool account that holds the other token\n   */\n  quoteTokenAccount: PublicKey;\n  /**\n   * User base token account to withdraw to\n   */\n  destinationAccount: PublicKey;\n  /**\n   * Admin base token account to send fees to\n   */\n  adminDestinationAccount: PublicKey;\n\n  /**\n   * Amount of pool tokens to burn. User receives an output of token a\n   * or b based on the percentage of the pool tokens that are returned.\n   */\n  poolTokenAmount: u64;\n  /**\n   * Minimum amount of base tokens to receive, prevents excessive slippage\n   */\n  minimumTokenAmount: u64;\n}\n\nexport const initializeSwapInstructionRaw = ({\n  config,\n  adminAccount,\n  tokenA: {\n    adminFeeAccount: adminFeeAccountA,\n    mint: tokenMintA,\n    reserve: tokenAccountA,\n  },\n  tokenB: {\n    adminFeeAccount: adminFeeAccountB,\n    mint: tokenMintB,\n    reserve: tokenAccountB,\n  },\n  poolTokenMint,\n  destinationPoolTokenAccount,\n  nonce,\n  ampFactor,\n  fees,\n}: Omit<InitializeSwapInstruction, \"fees\"> & {\n  fees: RawFees;\n}): TransactionInstruction => {\n  const keys = [\n    { pubkey: config.swapAccount, isSigner: false, isWritable: false },\n    { pubkey: config.authority, isSigner: false, isWritable: false },\n    { pubkey: adminAccount, isSigner: false, isWritable: false },\n    { pubkey: adminFeeAccountA, isSigner: false, isWritable: false },\n    { pubkey: adminFeeAccountB, isSigner: false, isWritable: false },\n    { pubkey: tokenMintA, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountA, isSigner: false, isWritable: false },\n    { pubkey: tokenMintB, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountB, isSigner: false, isWritable: false },\n    { pubkey: poolTokenMint, isSigner: false, isWritable: true },\n    { pubkey: destinationPoolTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: config.tokenProgramID, isSigner: false, isWritable: false },\n  ];\n  const data = Buffer.alloc(InitializeSwapIXLayout.span);\n  InitializeSwapIXLayout.encode(\n    {\n      instruction: StableSwapInstruction.INITIALIZE, // InitializeSwap instruction\n      nonce,\n      ampFactor: ampFactor.toBuffer(),\n      fees,\n    },\n    data\n  );\n  return buildInstruction({\n    config,\n    keys,\n    data,\n  });\n};\n\nexport const initializeSwapInstruction = ({\n  fees = ZERO_FEES,\n  ...args\n}: InitializeSwapInstruction): TransactionInstruction => {\n  return initializeSwapInstructionRaw({ ...args, fees: encodeFees(fees) });\n};\n\nexport const swapInstruction = ({\n  config,\n  userAuthority,\n  userSource,\n  poolSource,\n  poolDestination,\n  userDestination,\n  adminDestination,\n  amountIn,\n  minimumAmountOut,\n}: SwapInstruction): TransactionInstruction => {\n  const data = Buffer.alloc(SwapIXLayout.span);\n  SwapIXLayout.encode(\n    {\n      instruction: StableSwapInstruction.SWAP, // Swap instruction\n      amountIn: amountIn.toBuffer(),\n      minimumAmountOut: minimumAmountOut.toBuffer(),\n    },\n    data\n  );\n  const keys = [\n    { pubkey: config.swapAccount, isSigner: false, isWritable: false },\n    { pubkey: config.authority, isSigner: false, isWritable: false },\n    { pubkey: userAuthority, isSigner: true, isWritable: false },\n    { pubkey: userSource, isSigner: false, isWritable: true },\n    { pubkey: poolSource, isSigner: false, isWritable: true },\n    { pubkey: poolDestination, isSigner: false, isWritable: true },\n    { pubkey: userDestination, isSigner: false, isWritable: true },\n    { pubkey: adminDestination, isSigner: false, isWritable: true },\n    { pubkey: config.tokenProgramID, isSigner: false, isWritable: false },\n  ];\n  return buildInstruction({\n    config,\n    keys,\n    data,\n  });\n};\n\nexport const depositInstruction = ({\n  config,\n  userAuthority,\n  sourceA,\n  sourceB,\n  tokenAccountA,\n  tokenAccountB,\n  poolTokenMint,\n  poolTokenAccount,\n  tokenAmountA,\n  tokenAmountB,\n  minimumPoolTokenAmount,\n}: DepositInstruction): TransactionInstruction => {\n  const data = Buffer.alloc(DepositIXLayout.span);\n  DepositIXLayout.encode(\n    {\n      instruction: StableSwapInstruction.DEPOSIT, // Deposit instruction\n      tokenAmountA: tokenAmountA.toBuffer(),\n      tokenAmountB: tokenAmountB.toBuffer(),\n      minimumPoolTokenAmount: minimumPoolTokenAmount.toBuffer(),\n    },\n    data\n  );\n  const keys = [\n    { pubkey: config.swapAccount, isSigner: false, isWritable: false },\n    { pubkey: config.authority, isSigner: false, isWritable: false },\n    { pubkey: userAuthority, isSigner: true, isWritable: false },\n    { pubkey: sourceA, isSigner: false, isWritable: true },\n    { pubkey: sourceB, isSigner: false, isWritable: true },\n    { pubkey: tokenAccountA, isSigner: false, isWritable: true },\n    { pubkey: tokenAccountB, isSigner: false, isWritable: true },\n    { pubkey: poolTokenMint, isSigner: false, isWritable: true },\n    { pubkey: poolTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: config.tokenProgramID, isSigner: false, isWritable: false },\n  ];\n  return buildInstruction({\n    config,\n    keys,\n    data,\n  });\n};\n\nexport const withdrawInstruction = ({\n  config,\n  userAuthority,\n  poolMint,\n  sourceAccount,\n  tokenAccountA,\n  tokenAccountB,\n  userAccountA,\n  userAccountB,\n  adminFeeAccountA,\n  adminFeeAccountB,\n  poolTokenAmount,\n  minimumTokenA,\n  minimumTokenB,\n}: WithdrawInstruction): TransactionInstruction => {\n  const data = Buffer.alloc(WithdrawIXLayout.span);\n  WithdrawIXLayout.encode(\n    {\n      instruction: StableSwapInstruction.WITHDRAW, // Withdraw instruction\n      poolTokenAmount: poolTokenAmount.toBuffer(),\n      minimumTokenA: minimumTokenA.toBuffer(),\n      minimumTokenB: minimumTokenB.toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: config.swapAccount, isSigner: false, isWritable: false },\n    { pubkey: config.authority, isSigner: false, isWritable: false },\n    { pubkey: userAuthority, isSigner: true, isWritable: false },\n    { pubkey: poolMint, isSigner: false, isWritable: true },\n    { pubkey: sourceAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenAccountA, isSigner: false, isWritable: true },\n    { pubkey: tokenAccountB, isSigner: false, isWritable: true },\n    { pubkey: userAccountA, isSigner: false, isWritable: true },\n    { pubkey: userAccountB, isSigner: false, isWritable: true },\n    { pubkey: adminFeeAccountA, isSigner: false, isWritable: true },\n    { pubkey: adminFeeAccountB, isSigner: false, isWritable: true },\n    { pubkey: config.tokenProgramID, isSigner: false, isWritable: false },\n  ];\n  return buildInstruction({\n    config,\n    keys,\n    data,\n  });\n};\n\nexport const withdrawOneInstruction = ({\n  config,\n  userAuthority,\n  poolMint,\n  sourceAccount,\n  baseTokenAccount,\n  quoteTokenAccount,\n  destinationAccount,\n  adminDestinationAccount,\n  poolTokenAmount,\n  minimumTokenAmount,\n}: WithdrawOneInstruction): TransactionInstruction => {\n  const data = Buffer.alloc(WithdrawOneIXLayout.span);\n  WithdrawOneIXLayout.encode(\n    {\n      instruction: StableSwapInstruction.WITHDRAW_ONE, // Withdraw instruction\n      poolTokenAmount: poolTokenAmount.toBuffer(),\n      minimumTokenAmount: minimumTokenAmount.toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: config.swapAccount, isSigner: false, isWritable: false },\n    { pubkey: config.authority, isSigner: false, isWritable: false },\n    { pubkey: userAuthority, isSigner: true, isWritable: false },\n    { pubkey: poolMint, isSigner: false, isWritable: true },\n    { pubkey: sourceAccount, isSigner: false, isWritable: true },\n    { pubkey: baseTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: quoteTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: destinationAccount, isSigner: false, isWritable: true },\n    { pubkey: adminDestinationAccount, isSigner: false, isWritable: true },\n    { pubkey: config.tokenProgramID, isSigner: false, isWritable: false },\n  ];\n  return buildInstruction({\n    config,\n    keys,\n    data,\n  });\n};\n"]}