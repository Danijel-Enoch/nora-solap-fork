import { TOKEN_PROGRAM_ID } from "@saberhq/token-utils";
import { PublicKey } from "@solana/web3.js";
import { SWAP_PROGRAM_ID } from "./constants";
import * as instructions from "./instructions";
import { decodeSwap } from "./state";
import { StableSwapLayout } from "./state/layout";
import { loadProgramAccount } from "./util/account";
export class StableSwap {
    /**
     * Constructor for new StableSwap client object
     * @param connection
     * @param config
     * @param state
     */
    constructor(config, state) {
        this.config = config;
        this.state = state;
    }
    /**
     * Get the minimum balance for the token swap account to be rent exempt
     *
     * @return Number of lamports required
     */
    static async getMinBalanceRentForExemptStableSwap(connection) {
        return await connection.getMinimumBalanceForRentExemption(StableSwapLayout.span);
    }
    /**
     * Load an onchain StableSwap program.
     *
     * @param connection A {@link Connection} to use.
     * @param swapAccount The {@link PublicKey} of the swap account to load. You can obtain this pubkey by visiting [app.saber.so](https://app.saber.so/], navigating to the pool you want to load, and getting the "swap account" key.
     * @param programID Address of the onchain StableSwap program.
     */
    static async load(connection, swapAccount, programID = SWAP_PROGRAM_ID) {
        const data = await loadProgramAccount(connection, swapAccount, programID);
        const [authority] = await findSwapAuthorityKey(swapAccount, programID);
        return StableSwap.loadWithData(swapAccount, data, authority, programID);
    }
    /**
     * Loads an onchain StableSwap program from an {@link IExchange}.
     *
     * @param connection
     * @param exchange
     * @returns
     */
    static async loadFromExchange(connection, exchange) {
        return StableSwap.load(connection, exchange.swapAccount, exchange.programID);
    }
    /**
     * Loads a StableSwap instance with data.
     *
     * @param programID The program ID.
     * @param swapAccount The address of the swap.
     * @param swapAccountData The data of the swapAccount.
     * @param authority The swap's authority.
     * @returns
     */
    static loadWithData(swapAccount, swapAccountData, authority, programID = SWAP_PROGRAM_ID) {
        try {
            const state = decodeSwap(swapAccountData);
            if (!state.isInitialized) {
                throw new Error(`Invalid token swap state`);
            }
            return new StableSwap({
                swapAccount: swapAccount,
                swapProgramID: programID,
                tokenProgramID: TOKEN_PROGRAM_ID,
                authority,
            }, state);
        }
        catch (e) {
            throw Error(e);
        }
    }
    /**
     * Swap token A for token B
     * @param userSource
     * @param poolSource
     * @param poolDestination
     * @param userDestination
     * @param amountIn
     * @param minimumAmountOut
     */
    swap(args) {
        const adminDestination = args.poolDestination.equals(this.state.tokenA.reserve)
            ? this.state.tokenA.adminFeeAccount
            : this.state.tokenB.adminFeeAccount;
        return instructions.swapInstruction({
            config: this.config,
            ...args,
            adminDestination,
        });
    }
    /**
     * Deposit tokens into the pool.
     */
    deposit(args) {
        return instructions.depositInstruction({
            config: this.config,
            tokenAccountA: this.state.tokenA.reserve,
            tokenAccountB: this.state.tokenB.reserve,
            poolTokenMint: this.state.poolTokenMint,
            ...args,
        });
    }
    /**
     * Withdraw tokens from the pool
     */
    withdraw(args) {
        return instructions.withdrawInstruction({
            config: this.config,
            poolMint: this.state.poolTokenMint,
            tokenAccountA: this.state.tokenA.reserve,
            tokenAccountB: this.state.tokenB.reserve,
            adminFeeAccountA: this.state.tokenA.adminFeeAccount,
            adminFeeAccountB: this.state.tokenB.adminFeeAccount,
            ...args,
        });
    }
    /**
     * Withdraw tokens from the pool
     */
    withdrawOne(args) {
        const [quoteTokenAccount, adminDestinationAccount] = args.baseTokenAccount.equals(this.state.tokenA.reserve)
            ? [this.state.tokenB.reserve, this.state.tokenA.adminFeeAccount]
            : [this.state.tokenA.reserve, this.state.tokenB.adminFeeAccount];
        return instructions.withdrawOneInstruction({
            config: this.config,
            poolMint: this.state.poolTokenMint,
            quoteTokenAccount,
            adminDestinationAccount,
            ...args,
        });
    }
}
/**
 * Finds the swap authority address that is used to sign transactions on behalf of the swap.
 *
 * @param swapAccount
 * @param swapProgramID
 * @returns
 */
export const findSwapAuthorityKey = (swapAccount, swapProgramID = SWAP_PROGRAM_ID) => PublicKey.findProgramAddress([swapAccount.toBuffer()], swapProgramID);
//# sourceMappingURL=stable-swap.js.map