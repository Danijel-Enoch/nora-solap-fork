{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../src/util/account.ts"],"names":[],"mappings":"AAEA;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EACrC,UAAsB,EACtB,OAAkB,EAClB,SAAoB,EACH,EAAE;IACnB,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAC7D,IAAI,WAAW,KAAK,IAAI,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;KAC3C;IAED,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;QACxC,MAAM,IAAI,KAAK,CACb,2BAA2B,SAAS,CAAC,QAAQ,EAAE,WAAW,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CACzF,CAAC;KACH;IAED,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC,CAAC","sourcesContent":["import type { Connection, PublicKey } from \"@solana/web3.js\";\n\n/**\n * Loads the account info of an account owned by a program.\n * @param connection\n * @param address\n * @param programId\n * @returns\n */\nexport const loadProgramAccount = async (\n  connection: Connection,\n  address: PublicKey,\n  programId: PublicKey\n): Promise<Buffer> => {\n  const accountInfo = await connection.getAccountInfo(address);\n  if (accountInfo === null) {\n    throw new Error(\"Failed to find account\");\n  }\n\n  if (!accountInfo.owner.equals(programId)) {\n    throw new Error(\n      `Invalid owner: expected ${programId.toBase58()}, found ${accountInfo.owner.toBase58()}`\n    );\n  }\n\n  return Buffer.from(accountInfo.data);\n};\n"]}