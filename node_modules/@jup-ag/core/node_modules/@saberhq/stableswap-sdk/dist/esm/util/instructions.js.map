{"version":3,"file":"instructions.js","sourceRoot":"","sources":["../../../src/util/instructions.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AA6B9D,MAAM,CAAC,MAAM,oCAAoC,GAC/C,GAAmC,EAAE,CAAC,CAAC;IACrC,YAAY,EAAE,EAAE;IAChB,OAAO,EAAE,EAAE;CACZ,CAAC,CAAC;AAEL;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,EACxC,KAAa,EACb,EAAE,YAAY,EAAE,OAAO,EAA2B,EAClD,EACE,QAAQ,EACR,WAAW,EACX,OAAO,GAKR,EACgB,EAAE;IACnB,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,EAAE,CAAC,CAAC;IACnC,MAAM,KAAK,GAAG,IAAI,mBAAmB,CAAC,QAAQ,EAAE,YAAY,CAAC,KAAK,EAAE,EAAE;QACpE,kBAAkB;QAClB,WAAW;QACX,sBAAsB;QACtB,GAAG,OAAO;KACX,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACzC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,gBAAgB,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;IACrD,OAAO,GAAG,CAAC,SAAS,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,GAAmC,EACnC,IAA6B,EACvB,EAAE;IACR,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5C,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;AACpC,CAAC,CAAC","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type {\n  ConfirmOptions,\n  Signer,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport interface TransactionInstructions {\n  /**\n   * Transaction instructions\n   */\n  instructions: readonly TransactionInstruction[];\n  /**\n   * Additional transaction signers if applicable\n   */\n  signers: readonly Signer[];\n}\n\nexport interface MutableTransactionInstructions {\n  /**\n   * Transaction instructions\n   */\n  instructions: TransactionInstruction[];\n  /**\n   * Additional transaction signers if applicable\n   */\n  signers: Signer[];\n}\n\nexport const createMutableTransactionInstructions =\n  (): MutableTransactionInstructions => ({\n    instructions: [],\n    signers: [],\n  });\n\n/**\n * Executes a TransactionInstructions\n * @param title\n * @param param1\n * @param param2\n * @returns Transaction signature\n */\nexport const executeTxInstructions = async (\n  title: string,\n  { instructions, signers }: TransactionInstructions,\n  {\n    provider,\n    payerSigner,\n    options,\n  }: {\n    provider: Provider;\n    payerSigner: Signer;\n    options?: ConfirmOptions;\n  }\n): Promise<string> => {\n  console.log(`Running tx ${title}`);\n  const txEnv = new TransactionEnvelope(provider, instructions.slice(), [\n    // payer of the tx\n    payerSigner,\n    // initialize the swap\n    ...signers,\n  ]);\n\n  const sig = await txEnv.confirm(options);\n  console.log(`${title} done at tx: ${sig.signature}`);\n  return sig.signature;\n};\n\nexport const mergeInstructions = (\n  mut: MutableTransactionInstructions,\n  inst: TransactionInstructions\n): void => {\n  mut.instructions.push(...inst.instructions);\n  mut.signers.push(...inst.signers);\n};\n"]}