{"version":3,"file":"price.js","sourceRoot":"","sources":["../../../src/calculator/price.ts"],"names":[],"mappings":";;;;AAAA,sDAA0D;AAC1D,0DAAuB;AAGvB,0BAAwD;AAExD;;;;;GAKG;AACI,MAAM,kBAAkB,GAAG,CAAC,YAA2B,EAAS,EAAE;IACvE,MAAM,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IACjD,MAAM,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAEjD,4DAA4D;IAC5D,+DAA+D;IAC/D,iBAAiB;IACjB,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAC7B,KAAM,EACN,IAAI,CAAC,GAAG,CACN,EAAE,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAC7B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,IAAI,eAAE,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CACnE,CACF,CAAC;IAEF,MAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IACpE,MAAM,YAAY,GAAG,IAAA,sCAAkC,EACrD,YAAY,EACZ,WAAW,CACZ,CAAC;IAEF,MAAM,IAAI,GAAG,YAAY,CAAC,sBAAsB,CAAC,UAAU,CAAC,MAAM,CAChE,WAAW,CAAC,UAAU,CACvB,CAAC;IAEF,OAAO,IAAI,mBAAK,CACd,QAAQ,CAAC,KAAK,EACd,QAAQ,CAAC,KAAK,EACd,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,SAAS,CACf,CAAC;AACJ,CAAC,CAAC;AA/BW,QAAA,kBAAkB,sBA+B7B","sourcesContent":["import { Price, TokenAmount } from \"@saberhq/token-utils\";\nimport BN from \"bn.js\";\n\nimport type { IExchangeInfo } from \"..\";\nimport { calculateEstimatedSwapOutputAmount } from \"..\";\n\n/**\n * Gets the price of the second token in the swap, i.e. \"Token 1\", with respect to \"Token 0\".\n *\n * To get the price of \"Token 0\", use `.invert()` on the result of this function.\n * @returns\n */\nexport const calculateSwapPrice = (exchangeInfo: IExchangeInfo): Price => {\n  const reserve0 = exchangeInfo.reserves[0].amount;\n  const reserve1 = exchangeInfo.reserves[1].amount;\n\n  // We try to get at least 4 decimal points of precision here\n  // Otherwise, we attempt to swap 1% of total supply of the pool\n  // or at most, $1\n  const inputAmountNum = Math.max(\n    10_000,\n    Math.min(\n      10 ** reserve0.token.decimals,\n      Math.floor(parseInt(reserve0.toU64().div(new BN(100)).toString()))\n    )\n  );\n\n  const inputAmount = new TokenAmount(reserve0.token, inputAmountNum);\n  const outputAmount = calculateEstimatedSwapOutputAmount(\n    exchangeInfo,\n    inputAmount\n  );\n\n  const frac = outputAmount.outputAmountBeforeFees.asFraction.divide(\n    inputAmount.asFraction\n  );\n\n  return new Price(\n    reserve0.token,\n    reserve1.token,\n    frac.denominator,\n    frac.numerator\n  );\n};\n"]}