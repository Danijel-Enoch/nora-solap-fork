{"version":3,"file":"exchange.js","sourceRoot":"","sources":["../../../src/entities/exchange.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TokenInfo } from \"@saberhq/token-utils\";\nimport {\n  deserializeAccount,\n  deserializeMint,\n  parseBigintIsh,\n  Token,\n  TokenAmount,\n} from \"@saberhq/token-utils\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\nimport type JSBI from \"jsbi\";\n\nimport { SWAP_PROGRAM_ID } from \"../constants\";\nimport { StableSwap } from \"../stable-swap\";\nimport type { Fees } from \"../state/fees\";\nimport { loadProgramAccount } from \"../util/account\";\n\n/**\n * Reserve information.\n */\nexport interface IReserve {\n  /**\n   * Swap account holding the reserve tokens\n   */\n  reserveAccount: PublicKey;\n  /**\n   * Destination account of admin fees of this reserve token\n   */\n  adminFeeAccount: PublicKey;\n  /**\n   * Amount of tokens in the reserve\n   */\n  amount: TokenAmount;\n}\n\n/**\n * Static definition of an exchange.\n */\nexport interface IExchange {\n  programID: PublicKey;\n  swapAccount: PublicKey;\n  lpToken: Token;\n  tokens: readonly [Token, Token];\n}\n\n/**\n * Info loaded from the exchange. This is used by the calculator.\n */\nexport interface IExchangeInfo {\n  ampFactor: JSBI;\n  fees: Fees;\n  lpTotalSupply: TokenAmount;\n  reserves: readonly [IReserve, IReserve];\n}\n\n/**\n * Creates an IExchangeInfo from parameters.\n * @returns\n */\nexport const makeExchangeInfo = ({\n  exchange,\n  swap,\n  accounts,\n}: {\n  exchange: IExchange;\n  swap: StableSwap;\n  accounts: {\n    reserveA: Buffer;\n    reserveB: Buffer;\n    poolMint?: Buffer;\n  };\n}): IExchangeInfo => {\n  const swapAmountA = deserializeAccount(accounts.reserveA).amount;\n  const swapAmountB = deserializeAccount(accounts.reserveB).amount;\n\n  const poolMintSupply = accounts.poolMint\n    ? deserializeMint(accounts.poolMint).supply\n    : undefined;\n\n  return {\n    // TODO(igm): this should be calculated dynamically\n    ampFactor: parseBigintIsh(swap.state.targetAmpFactor.toString()),\n    fees: swap.state.fees,\n    lpTotalSupply: new TokenAmount(exchange.lpToken, poolMintSupply ?? 0),\n    reserves: [\n      {\n        reserveAccount: swap.state.tokenA.reserve,\n        adminFeeAccount: swap.state.tokenA.adminFeeAccount,\n        amount: new TokenAmount(exchange.tokens[0], swapAmountA),\n      },\n      {\n        reserveAccount: swap.state.tokenB.reserve,\n        adminFeeAccount: swap.state.tokenB.adminFeeAccount,\n        amount: new TokenAmount(exchange.tokens[1], swapAmountB),\n      },\n    ],\n  };\n};\n\n/**\n * Loads exchange info.\n * @param exchange\n * @param swap\n * @returns\n */\nexport const loadExchangeInfo = async (\n  connection: Connection,\n  exchange: IExchange,\n  swap: StableSwap\n): Promise<IExchangeInfo> => {\n  if (!exchange.programID.equals(swap.config.swapProgramID)) {\n    throw new Error(\"Swap program id mismatch\");\n  }\n\n  const reserveA = await loadProgramAccount(\n    connection,\n    swap.state.tokenA.reserve,\n    swap.config.tokenProgramID\n  );\n  const reserveB = await loadProgramAccount(\n    connection,\n    swap.state.tokenB.reserve,\n    swap.config.tokenProgramID\n  );\n  const poolMint = await loadProgramAccount(\n    connection,\n    swap.state.poolTokenMint,\n    swap.config.tokenProgramID\n  );\n  return makeExchangeInfo({\n    swap,\n    exchange,\n    accounts: {\n      reserveA,\n      reserveB,\n      poolMint,\n    },\n  });\n};\n\n/**\n * Simplified representation of an IExchange. Useful for configuration.\n */\nexport interface ExchangeBasic {\n  /**\n   * Swap account.\n   */\n  swapAccount: PublicKey;\n  /**\n   * Mint of the LP token.\n   */\n  lpToken: PublicKey;\n  /**\n   * Info of token A.\n   */\n  tokenA: TokenInfo;\n  /**\n   * Info of token B.\n   */\n  tokenB: TokenInfo;\n}\n\n/**\n * Creates an IExchange from an ExchangeBasic.\n * @param tokenMap\n * @param param1\n * @returns\n */\nexport const makeExchange = ({\n  swapAccount,\n  lpToken,\n  tokenA,\n  tokenB,\n}: ExchangeBasic): IExchange | null => {\n  const exchange: IExchange = {\n    swapAccount,\n    programID: SWAP_PROGRAM_ID,\n    lpToken: new Token({\n      symbol: \"SLP\",\n      name: `${tokenA.symbol}-${tokenB.symbol} Saber LP`,\n      logoURI: \"https://app.saber.so/tokens/slp.png\",\n      decimals: tokenA.decimals,\n      address: lpToken.toString(),\n      chainId: tokenA.chainId,\n      tags: [\"saber-stableswap-lp\"],\n    }),\n    tokens: [new Token(tokenA), new Token(tokenB)],\n  };\n  return exchange;\n};\n\n/**\n * Get exchange info from just the swap account.\n * @param connection\n * @param swapAccount\n * @param tokenA\n * @param tokenB\n * @returns\n */\nexport const loadExchangeInfoFromSwapAccount = async (\n  connection: Connection,\n  swapAccount: PublicKey,\n  tokenA: Token | undefined = undefined,\n  tokenB: Token | undefined = undefined\n): Promise<IExchangeInfo | null> => {\n  const stableSwap = await StableSwap.load(connection, swapAccount);\n\n  const theTokenA =\n    tokenA ??\n    (await Token.load(connection, stableSwap.state.tokenA.mint))?.info;\n  if (!theTokenA) {\n    throw new Error(\n      `Token ${stableSwap.state.tokenA.mint.toString()} not found`\n    );\n  }\n\n  const theTokenB =\n    tokenB ??\n    (await Token.load(connection, stableSwap.state.tokenB.mint))?.info;\n  if (!theTokenB) {\n    throw new Error(\n      `Token ${stableSwap.state.tokenB.mint.toString()} not found`\n    );\n  }\n\n  const exchange = makeExchange({\n    swapAccount,\n    lpToken: stableSwap.state.poolTokenMint,\n    tokenA: theTokenA,\n    tokenB: theTokenB,\n  });\n\n  if (exchange === null) {\n    return null;\n  }\n\n  return await loadExchangeInfo(connection, exchange, stableSwap);\n};\n"]}