{"version":3,"file":"stable-swap.js","sourceRoot":"","sources":["../../src/stable-swap.ts"],"names":[],"mappings":";;;;AAAA,sDAAwD;AAExD,6CAA4C;AAE5C,2CAA8C;AAG9C,qEAA+C;AAE/C,mCAAqC;AACrC,2CAAkD;AAClD,4CAAoD;AAEpD,MAAa,UAAU;IACrB;;;;;OAKG;IACH,YACW,MAAwB,EACxB,KAAsB;QADtB,WAAM,GAAN,MAAM,CAAkB;QACxB,UAAK,GAAL,KAAK,CAAiB;IAC9B,CAAC;IAEJ;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,oCAAoC,CAC/C,UAAsB;QAEtB,OAAO,MAAM,UAAU,CAAC,iCAAiC,CACvD,yBAAgB,CAAC,IAAI,CACtB,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,KAAK,CAAC,IAAI,CACf,UAAsB,EACtB,WAAsB,EACtB,YAAuB,2BAAe;QAEtC,MAAM,IAAI,GAAG,MAAM,IAAA,4BAAkB,EAAC,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;QAC1E,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,IAAA,4BAAoB,EAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QACvE,OAAO,UAAU,CAAC,YAAY,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAC3B,UAAsB,EACtB,QAAmB;QAEnB,OAAO,UAAU,CAAC,IAAI,CACpB,UAAU,EACV,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,SAAS,CACnB,CAAC;IACJ,CAAC;IAED;;;;;;;;OAQG;IACH,MAAM,CAAC,YAAY,CACjB,WAAsB,EACtB,eAAuB,EACvB,SAAoB,EACpB,YAAuB,2BAAe;QAEtC,IAAI;YACF,MAAM,KAAK,GAAG,IAAA,kBAAU,EAAC,eAAe,CAAC,CAAC;YAC1C,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBACxB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC7C;YACD,OAAO,IAAI,UAAU,CACnB;gBACE,WAAW,EAAE,WAAW;gBACxB,aAAa,EAAE,SAAS;gBACxB,cAAc,EAAE,8BAAgB;gBAChC,SAAS;aACV,EACD,KAAK,CACN,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,KAAK,CAAC,CAAW,CAAC,CAAC;SAC1B;IACH,CAAC;IAED;;;;;;;;OAQG;IACH,IAAI,CACF,IASC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAClD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAC1B;YACC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe;YACnC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC;QACtC,OAAO,YAAY,CAAC,eAAe,CAAC;YAClC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,GAAG,IAAI;YACP,gBAAgB;SACjB,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,OAAO,CACL,IASC;QAED,OAAO,YAAY,CAAC,kBAAkB,CAAC;YACrC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO;YACxC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO;YACxC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;YACvC,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,QAAQ,CACN,IASC;QAED,OAAO,YAAY,CAAC,mBAAmB,CAAC;YACtC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;YAClC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO;YACxC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO;YACxC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe;YACnD,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe;YACnD,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,WAAW,CACT,IAQC;QAED,MAAM,CAAC,iBAAiB,EAAE,uBAAuB,CAAC,GAChD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;YACrD,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC;YAChE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAErE,OAAO,YAAY,CAAC,sBAAsB,CAAC;YACzC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;YAClC,iBAAiB;YACjB,uBAAuB;YACvB,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;CACF;AA5MD,gCA4MC;AAED;;;;;;GAMG;AACI,MAAM,oBAAoB,GAAG,CAClC,WAAsB,EACtB,gBAA2B,2BAAe,EACZ,EAAE,CAChC,mBAAS,CAAC,kBAAkB,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC;AAJ3D,QAAA,oBAAoB,wBAIuC","sourcesContent":["import { TOKEN_PROGRAM_ID } from \"@saberhq/token-utils\";\nimport type { Connection, TransactionInstruction } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { SWAP_PROGRAM_ID } from \"./constants\";\nimport type { IExchange } from \"./entities/exchange\";\nimport type { StableSwapConfig } from \"./instructions\";\nimport * as instructions from \"./instructions\";\nimport type { StableSwapState } from \"./state\";\nimport { decodeSwap } from \"./state\";\nimport { StableSwapLayout } from \"./state/layout\";\nimport { loadProgramAccount } from \"./util/account\";\n\nexport class StableSwap {\n  /**\n   * Constructor for new StableSwap client object\n   * @param connection\n   * @param config\n   * @param state\n   */\n  constructor(\n    readonly config: StableSwapConfig,\n    readonly state: StableSwapState\n  ) {}\n\n  /**\n   * Get the minimum balance for the token swap account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptStableSwap(\n    connection: Connection\n  ): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(\n      StableSwapLayout.span\n    );\n  }\n\n  /**\n   * Load an onchain StableSwap program.\n   *\n   * @param connection A {@link Connection} to use.\n   * @param swapAccount The {@link PublicKey} of the swap account to load. You can obtain this pubkey by visiting [app.saber.so](https://app.saber.so/], navigating to the pool you want to load, and getting the \"swap account\" key.\n   * @param programID Address of the onchain StableSwap program.\n   */\n  static async load(\n    connection: Connection,\n    swapAccount: PublicKey,\n    programID: PublicKey = SWAP_PROGRAM_ID\n  ): Promise<StableSwap> {\n    const data = await loadProgramAccount(connection, swapAccount, programID);\n    const [authority] = await findSwapAuthorityKey(swapAccount, programID);\n    return StableSwap.loadWithData(swapAccount, data, authority, programID);\n  }\n\n  /**\n   * Loads an onchain StableSwap program from an {@link IExchange}.\n   *\n   * @param connection\n   * @param exchange\n   * @returns\n   */\n  static async loadFromExchange(\n    connection: Connection,\n    exchange: IExchange\n  ): Promise<StableSwap> {\n    return StableSwap.load(\n      connection,\n      exchange.swapAccount,\n      exchange.programID\n    );\n  }\n\n  /**\n   * Loads a StableSwap instance with data.\n   *\n   * @param programID The program ID.\n   * @param swapAccount The address of the swap.\n   * @param swapAccountData The data of the swapAccount.\n   * @param authority The swap's authority.\n   * @returns\n   */\n  static loadWithData(\n    swapAccount: PublicKey,\n    swapAccountData: Buffer,\n    authority: PublicKey,\n    programID: PublicKey = SWAP_PROGRAM_ID\n  ): StableSwap {\n    try {\n      const state = decodeSwap(swapAccountData);\n      if (!state.isInitialized) {\n        throw new Error(`Invalid token swap state`);\n      }\n      return new StableSwap(\n        {\n          swapAccount: swapAccount,\n          swapProgramID: programID,\n          tokenProgramID: TOKEN_PROGRAM_ID,\n          authority,\n        },\n        state\n      );\n    } catch (e) {\n      throw Error(e as string);\n    }\n  }\n\n  /**\n   * Swap token A for token B\n   * @param userSource\n   * @param poolSource\n   * @param poolDestination\n   * @param userDestination\n   * @param amountIn\n   * @param minimumAmountOut\n   */\n  swap(\n    args: Pick<\n      instructions.SwapInstruction,\n      | \"userAuthority\"\n      | \"userSource\"\n      | \"userDestination\"\n      | \"poolSource\"\n      | \"poolDestination\"\n      | \"amountIn\"\n      | \"minimumAmountOut\"\n    >\n  ): TransactionInstruction {\n    const adminDestination = args.poolDestination.equals(\n      this.state.tokenA.reserve\n    )\n      ? this.state.tokenA.adminFeeAccount\n      : this.state.tokenB.adminFeeAccount;\n    return instructions.swapInstruction({\n      config: this.config,\n      ...args,\n      adminDestination,\n    });\n  }\n\n  /**\n   * Deposit tokens into the pool.\n   */\n  deposit(\n    args: Pick<\n      instructions.DepositInstruction,\n      | \"userAuthority\"\n      | \"sourceA\"\n      | \"sourceB\"\n      | \"poolTokenAccount\"\n      | \"tokenAmountA\"\n      | \"tokenAmountB\"\n      | \"minimumPoolTokenAmount\"\n    >\n  ): TransactionInstruction {\n    return instructions.depositInstruction({\n      config: this.config,\n      tokenAccountA: this.state.tokenA.reserve,\n      tokenAccountB: this.state.tokenB.reserve,\n      poolTokenMint: this.state.poolTokenMint,\n      ...args,\n    });\n  }\n\n  /**\n   * Withdraw tokens from the pool\n   */\n  withdraw(\n    args: Pick<\n      instructions.WithdrawInstruction,\n      | \"userAuthority\"\n      | \"userAccountA\"\n      | \"userAccountB\"\n      | \"sourceAccount\"\n      | \"poolTokenAmount\"\n      | \"minimumTokenA\"\n      | \"minimumTokenB\"\n    >\n  ): TransactionInstruction {\n    return instructions.withdrawInstruction({\n      config: this.config,\n      poolMint: this.state.poolTokenMint,\n      tokenAccountA: this.state.tokenA.reserve,\n      tokenAccountB: this.state.tokenB.reserve,\n      adminFeeAccountA: this.state.tokenA.adminFeeAccount,\n      adminFeeAccountB: this.state.tokenB.adminFeeAccount,\n      ...args,\n    });\n  }\n\n  /**\n   * Withdraw tokens from the pool\n   */\n  withdrawOne(\n    args: Pick<\n      instructions.WithdrawOneInstruction,\n      | \"userAuthority\"\n      | \"baseTokenAccount\"\n      | \"destinationAccount\"\n      | \"sourceAccount\"\n      | \"poolTokenAmount\"\n      | \"minimumTokenAmount\"\n    >\n  ): TransactionInstruction {\n    const [quoteTokenAccount, adminDestinationAccount] =\n      args.baseTokenAccount.equals(this.state.tokenA.reserve)\n        ? [this.state.tokenB.reserve, this.state.tokenA.adminFeeAccount]\n        : [this.state.tokenA.reserve, this.state.tokenB.adminFeeAccount];\n\n    return instructions.withdrawOneInstruction({\n      config: this.config,\n      poolMint: this.state.poolTokenMint,\n      quoteTokenAccount,\n      adminDestinationAccount,\n      ...args,\n    });\n  }\n}\n\n/**\n * Finds the swap authority address that is used to sign transactions on behalf of the swap.\n *\n * @param swapAccount\n * @param swapProgramID\n * @returns\n */\nexport const findSwapAuthorityKey = (\n  swapAccount: PublicKey,\n  swapProgramID: PublicKey = SWAP_PROGRAM_ID\n): Promise<[PublicKey, number]> =>\n  PublicKey.findProgramAddress([swapAccount.toBuffer()], swapProgramID);\n"]}