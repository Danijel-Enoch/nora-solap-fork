{"version":3,"file":"tokenProvider.js","sourceRoot":"","sources":["../../src/tokenProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AugmentedProvider,\n  Provider,\n  PublicKey,\n  TransactionEnvelope,\n} from \"@saberhq/solana-contrib\";\nimport { SolanaAugmentedProvider } from \"@saberhq/solana-contrib\";\nimport type { MintInfo } from \"@solana/spl-token\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { Signer } from \"@solana/web3.js\";\nimport { Keypair } from \"@solana/web3.js\";\n\nimport type { TokenAmount, TokenInfo } from \".\";\nimport { getATAAddresses, SPLToken } from \".\";\nimport { getATAAddress } from \"./ata\";\nimport { createMintInstructions, DEFAULT_TOKEN_DECIMALS } from \"./common\";\nimport { getOrCreateATA, getOrCreateATAs } from \"./instructions/ata\";\nimport type { TokenAccountData } from \"./layout\";\nimport { deserializeAccount, deserializeMint } from \"./layout\";\nimport { Token } from \"./token\";\n\n/**\n * Augmented provider with token utilities.\n */\nexport class TokenAugmentedProvider\n  extends SolanaAugmentedProvider\n  implements AugmentedProvider\n{\n  constructor(provider: Provider) {\n    super(provider);\n  }\n\n  /**\n   * Creates a transaction to create a {@link Token}.\n   */\n  async createTokenTX({\n    mintKP = Keypair.generate(),\n    authority = this.walletKey,\n    decimals = DEFAULT_TOKEN_DECIMALS,\n  }: {\n    mintKP?: Signer;\n    authority?: PublicKey;\n    decimals?: number;\n  } = {}): Promise<{ token: Token; tx: TransactionEnvelope }> {\n    const instructions = await createMintInstructions(\n      this.provider,\n      authority,\n      mintKP.publicKey,\n      decimals\n    );\n    return {\n      token: Token.fromMint(mintKP.publicKey, decimals),\n      tx: this.newTX(instructions, [mintKP]),\n    };\n  }\n\n  /**\n   * Transfers tokens from the provider's ATA to a `TokenAccount`.\n   */\n  async transferTo({\n    amount,\n    source,\n    destination,\n  }: {\n    amount: TokenAmount;\n    source?: PublicKey;\n    destination: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const txEnv = this.newTX();\n    if (!source) {\n      const sourceATA = await this.getOrCreateATA({\n        mint: amount.token.mintAccount,\n      });\n      txEnv.append(sourceATA.instruction);\n      source = sourceATA.address;\n    }\n    txEnv.append(\n      SPLToken.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        source,\n        destination,\n        this.walletKey,\n        [],\n        amount.toU64()\n      )\n    );\n    return txEnv;\n  }\n\n  /**\n   * Transfers tokens to a recipient's ATA.\n   */\n  async transfer({\n    amount,\n    source,\n    to,\n  }: {\n    amount: TokenAmount;\n    source?: PublicKey;\n    /**\n     * Recipient of the tokens. This should not be a token account.\n     */\n    to: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const toATA = await this.getOrCreateATA({\n      mint: amount.token.mintAccount,\n      owner: to,\n    });\n    const txEnv = await this.transferTo({\n      amount,\n      source,\n      destination: toATA.address,\n    });\n    txEnv.prepend(toATA.instruction);\n    return txEnv;\n  }\n\n  /**\n   * Creates a {@link Token}.\n   */\n  async createToken({\n    mintKP = Keypair.generate(),\n    authority = this.walletKey,\n    decimals = DEFAULT_TOKEN_DECIMALS,\n  }: {\n    mintKP?: Signer;\n    authority?: PublicKey;\n    decimals?: number;\n  } = {}): Promise<Token> {\n    const { token, tx } = await this.createTokenTX({\n      mintKP,\n      authority,\n      decimals,\n    });\n    await tx.confirm();\n    return token;\n  }\n\n  /**\n   * Gets an ATA address.\n   * @returns\n   */\n  async getATAAddress({\n    mint,\n    owner = this.walletKey,\n  }: {\n    mint: PublicKey;\n    owner?: PublicKey;\n  }) {\n    return await getATAAddress({ mint, owner });\n  }\n\n  /**\n   * Gets an ATA address.\n   * @returns\n   */\n  async getATAAddresses<K extends string>({\n    mints,\n    owner = this.walletKey,\n  }: {\n    mints: {\n      [mint in K]: PublicKey;\n    };\n    owner?: PublicKey;\n  }) {\n    return await getATAAddresses({ mints, owner });\n  }\n\n  /**\n   * Gets an ATA, creating it if it doesn't exist.\n   * @returns\n   */\n  async getOrCreateATA({\n    mint,\n    owner = this.walletKey,\n  }: {\n    mint: PublicKey;\n    owner?: PublicKey;\n  }) {\n    return await getOrCreateATA({ provider: this.provider, mint, owner });\n  }\n\n  /**\n   * Get or create multiple ATAs.\n   * @returns\n   */\n  async getOrCreateATAs<K extends string>({\n    mints,\n    owner = this.walletKey,\n  }: {\n    mints: {\n      [mint in K]: PublicKey;\n    };\n    owner?: PublicKey;\n  }) {\n    return await getOrCreateATAs({ provider: this.provider, mints, owner });\n  }\n\n  /**\n   * Loads a token from the blockchain, only if the decimals are not provided.\n   * @param mint\n   * @returns\n   */\n  async loadToken(\n    mint: PublicKey,\n    info: Partial<Omit<TokenInfo, \"address\">> = {}\n  ): Promise<Token | null> {\n    return Token.load(this.provider.connection, mint, info);\n  }\n\n  /**\n   * Mints tokens to a token account.\n   * @param mint\n   * @returns\n   */\n  mintToAccount({\n    amount,\n    destination,\n  }: {\n    amount: TokenAmount;\n    destination: PublicKey;\n  }): TransactionEnvelope {\n    return this.newTX([\n      SPLToken.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        amount.token.mintAccount,\n        destination,\n        this.walletKey,\n        [],\n        amount.toU64()\n      ),\n    ]);\n  }\n\n  /**\n   * Mints tokens to the ATA of the `to` account.\n   * @param amount The amount of tokens to mint.\n   * @param to The owner of the ATA that may be created.\n   * @returns\n   */\n  async mintTo({\n    amount,\n    to = this.walletKey,\n  }: {\n    amount: TokenAmount;\n    to?: PublicKey;\n  }): Promise<TransactionEnvelope> {\n    const toATA = await this.getOrCreateATA({\n      mint: amount.token.mintAccount,\n      owner: to,\n    });\n    const txEnv = this.mintToAccount({\n      amount,\n      destination: toATA.address,\n    });\n    txEnv.prepend(toATA.instruction);\n    return txEnv;\n  }\n\n  /**\n   * Fetches a mint.\n   * @param address\n   * @returns\n   */\n  async fetchMint(address: PublicKey): Promise<MintInfo | null> {\n    const accountInfo = await this.getAccountInfo(address);\n    if (accountInfo === null) {\n      return null;\n    }\n    return deserializeMint(accountInfo.accountInfo.data);\n  }\n\n  /**\n   * Fetches a token account.\n   * @param address\n   * @returns\n   */\n  async fetchTokenAccount(\n    address: PublicKey\n  ): Promise<TokenAccountData | null> {\n    const tokenAccountInfo = await this.getAccountInfo(address);\n    if (tokenAccountInfo === null) {\n      return null;\n    }\n    return deserializeAccount(tokenAccountInfo.accountInfo.data);\n  }\n\n  /**\n   * Fetches an ATA.\n   * @param mint\n   * @param owner\n   * @returns\n   */\n  async fetchATA(\n    mint: PublicKey,\n    owner: PublicKey = this.walletKey\n  ): Promise<TokenAccountData | null> {\n    const taAddress = await getATAAddress({ mint, owner });\n    return await this.fetchTokenAccount(taAddress);\n  }\n}\n"]}