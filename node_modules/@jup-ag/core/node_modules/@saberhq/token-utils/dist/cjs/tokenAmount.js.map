{"version":3,"file":"tokenAmount.js","sourceRoot":"","sources":["../../src/tokenAmount.ts"],"names":[],"mappings":";;;;AAAA,iDAAwC;AAExC,oDAI6B;AAC7B,0DAAuB;AAevB,MAAa,WAAY,SAAQ,wBAAmB;IAClD,0DAA0D;IAC1D,YAAY,KAAY,EAAE,MAAiB;QACzC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACrB,IAAA,wBAAW,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAK,CAAC,KAAY,EAAE,QAAgB;QACzC,MAAM,IAAI,GAAG,wBAAY,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC3D,OAAO,IAAI,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1C,CAAC;IAEQ,GAAG,CAAC,KAAkB;QAC7B,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAChC,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IACQ,QAAQ,CAAC,KAAkB;QAClC,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrC,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IACQ,UAAU,CAAC,OAAgB;QAClC,MAAM,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACzC,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IACQ,QAAQ,CAAC,OAAgB;QAChC,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,KAAgB;QAC9B,OAAO,IAAI,WAAW,CACpB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,IAAI,eAAE,CAAC,IAAA,2BAAc,EAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAC3D,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,WAAW,CAAC,SAAuB,EAAE,cAAc,EAAE,GAAG,EAAE;QACxD,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;IACxD,CAAC;IAED;;OAEG;IACM,QAAQ;QACf,OAAO,sBAAsB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;IAClF,CAAC;IAED;;OAEG;IACH,MAAM;QAcJ,OAAO;YACL,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;YACxB,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE;SACzB,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,OAAO,IAAI,eAAG,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;IACtC,CAAC;CACF;AA7FD,kCA6FC","sourcesContent":["import { u64 } from \"@solana/spl-token\";\nimport type { BigintIsh, NumberFormat, Percent } from \"@ubeswap/token-math\";\nimport {\n  parseBigintIsh,\n  TokenAmount as UTokenAmount,\n  validateU64,\n} from \"@ubeswap/token-math\";\nimport BN from \"bn.js\";\n\nimport type { Token } from \"./token\";\n\nexport interface IFormatUint {\n  /**\n   * If specified, format this according to `toLocaleString`\n   */\n  numberFormatOptions?: Intl.NumberFormatOptions;\n  /**\n   * Locale of the number\n   */\n  locale?: string;\n}\n\nexport class TokenAmount extends UTokenAmount<Token> {\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    super(token, amount);\n    validateU64(this.raw);\n  }\n\n  /**\n   * Parses a token amount from a decimal representation.\n   * @param token\n   * @param uiAmount\n   * @returns\n   */\n  static parse(token: Token, uiAmount: string): TokenAmount {\n    const prev = UTokenAmount.parseFromString(token, uiAmount);\n    return new TokenAmount(token, prev.raw);\n  }\n\n  override add(other: TokenAmount): TokenAmount {\n    const result = super.add(other);\n    return new TokenAmount(this.token, result.raw);\n  }\n  override subtract(other: TokenAmount): TokenAmount {\n    const result = super.subtract(other);\n    return new TokenAmount(this.token, result.raw);\n  }\n  override multiplyBy(percent: Percent): TokenAmount {\n    const result = super.multiplyBy(percent);\n    return new TokenAmount(this.token, result.raw);\n  }\n  override reduceBy(percent: Percent): TokenAmount {\n    const result = super.reduceBy(percent);\n    return new TokenAmount(this.token, result.raw);\n  }\n\n  /**\n   * Divides this TokenAmount by a raw integer.\n   * @param other\n   * @returns\n   */\n  divideByInteger(other: BigintIsh): TokenAmount {\n    return new TokenAmount(\n      this.token,\n      this.toU64().div(new BN(parseBigintIsh(other).toString()))\n    );\n  }\n\n  /**\n   * Formats the token amount with units and decimal adjustment, e.g. \"100.42 SOL\"\n   * @returns\n   */\n  formatUnits(format: NumberFormat = { groupSeparator: \",\" }): string {\n    return `${this.toExact(format)} ${this.token.symbol}`;\n  }\n\n  /**\n   * String representation of this token amount.\n   */\n  override toString(): string {\n    return `TokenAmount[Token=(${this.token.toString()}), amount=${this.toExact()}`;\n  }\n\n  /**\n   * JSON representation of the token amount.\n   */\n  toJSON(): {\n    /**\n     * Discriminator to show this is a token amount.\n     */\n    _isTA: true;\n    /**\n     * Mint of the token.\n     */\n    mint: string;\n    /**\n     * Amount of tokens in string representation.\n     */\n    uiAmount: string;\n  } {\n    return {\n      _isTA: true,\n      mint: this.token.address,\n      uiAmount: this.toExact(),\n    };\n  }\n\n  /**\n   * Converts this to the raw u64 used by the SPL library\n   * @returns\n   */\n  toU64(): u64 {\n    return new u64(this.raw.toString());\n  }\n}\n"]}