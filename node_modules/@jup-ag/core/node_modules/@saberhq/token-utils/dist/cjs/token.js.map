{"version":3,"file":"token.js","sourceRoot":"","sources":["../../src/token.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Network } from \"@saberhq/solana-contrib\";\nimport { PublicKey } from \"@saberhq/solana-contrib\";\nimport { NATIVE_MINT } from \"@solana/spl-token\";\nimport type { Connection } from \"@solana/web3.js\";\nimport type { Token as UToken } from \"@ubeswap/token-math\";\n\nimport { deserializeMint } from \"./layout\";\nimport type { TokenInfo } from \"./tokenList\";\n\n/**\n * Magic value representing the raw, underlying Solana native asset.\n */\nexport const RAW_SOL_MINT = new PublicKey(\n  \"RawSo11111111111111111111111111111111111112\"\n);\n\n/**\n * Token information.\n */\nexport class Token implements UToken<Token> {\n  /**\n   * The network that the Token is on.\n   */\n  readonly network: Network;\n  private _mintAccount: PublicKey | null = null;\n\n  constructor(readonly info: TokenInfo) {\n    this.network = chainIdToNetwork(info.chainId) ?? \"localnet\";\n  }\n\n  /**\n   * The mint PublicKey of the token.\n   *\n   * Avoid using this value to print it to a string, as base58\n   * strings are relatively slow to create since they require the use\n   * of hash functions.\n   */\n  get mintAccount(): PublicKey {\n    if (this._mintAccount) {\n      return this._mintAccount;\n    }\n\n    this._mintAccount = new PublicKey(this.info.address);\n    return this._mintAccount;\n  }\n\n  /**\n   * If true, this token represents unwrapped, native, \"raw\" SOL.\n   */\n  get isRawSOL(): boolean {\n    return this.mintAccount.equals(RAW_SOL_MINT);\n  }\n\n  /**\n   * The Base58 string representation of the mint address.\n   */\n  get address(): string {\n    return this.info.address;\n  }\n\n  /**\n   * The chain ID of the token.\n   */\n  get chainId(): number {\n    return this.info.chainId;\n  }\n\n  /**\n   * Number of decimals of the token.\n   */\n  get decimals(): number {\n    return this.info.decimals;\n  }\n\n  /**\n   * The name of the token.\n   */\n  get name(): string {\n    return this.info.name;\n  }\n\n  /**\n   * The symbol of the token.\n   */\n  get symbol(): string {\n    return this.info.symbol;\n  }\n\n  /**\n   * The token's icon to render.\n   */\n  get icon(): string | undefined {\n    return this.info.logoURI;\n  }\n\n  equals(other: Token): boolean {\n    return tokensEqual(this, other);\n  }\n\n  toString(): string {\n    return `Token[mint=${this.address}, decimals=${this.decimals}, network=${this.network}]`;\n  }\n\n  toJSON(): unknown {\n    return this.info;\n  }\n\n  /**\n   * Returns true if the given tag is present.\n   * @param tag The tag to check.\n   * @returns\n   */\n  hasTag(tag: string): boolean {\n    return !!this.info.tags?.includes(tag);\n  }\n\n  /**\n   * Loads a token from a Mint.\n   * @param mint\n   * @param opts\n   * @returns\n   */\n  static fromMint = (\n    mint: PublicKey | string,\n    decimals: number,\n    opts: Partial<Omit<TokenInfo, \"address\" | \"decimals\">> = {}\n  ): Token =>\n    new Token({\n      ...opts,\n\n      // required\n      address: mint.toString(),\n      decimals,\n\n      // optional\n      name: opts.name ?? `Token ${mint.toString().slice(0, 4)}`,\n      symbol: opts.symbol ?? mint.toString().slice(0, 5),\n      chainId: opts.chainId ?? ChainId.Localnet,\n    });\n\n  /**\n   * Loads a token from a Connection.\n   *\n   * @param connection\n   * @param mint\n   * @param info\n   */\n  static load = async (\n    connection: Connection,\n    mint: PublicKey,\n    info: Partial<Omit<TokenInfo, \"address\">> = {}\n  ): Promise<Token | null> => {\n    if (typeof info.decimals === \"number\") {\n      return Token.fromMint(mint, info.decimals, info);\n    }\n    const mintAccountInfo = await connection.getAccountInfo(mint);\n    if (!mintAccountInfo) {\n      return null;\n    }\n    const mintInfo = deserializeMint(mintAccountInfo.data);\n    return Token.fromMint(mint, mintInfo.decimals, info);\n  };\n}\n\n/**\n * Checks if two tokens are equal.\n * @param a\n * @param b\n * @returns\n */\nexport const tokensEqual = (\n  a: Token | undefined,\n  b: Token | undefined\n): boolean =>\n  a !== undefined &&\n  b !== undefined &&\n  a.address === b.address &&\n  a.network === b.network;\n\n/**\n * Map of network to Token\n */\nexport type TokenMap = { [c in Network]: Token };\n\nconst rawSol = {\n  address: RAW_SOL_MINT.toString(),\n  name: \"Solana\",\n  symbol: \"SOL\",\n  decimals: 9,\n  logoURI:\n    \"https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png\",\n};\n\nconst wrappedSol = {\n  address: NATIVE_MINT.toString(),\n  name: \"Wrapped SOL\",\n  symbol: \"SOL\",\n  decimals: 9,\n  logoURI:\n    \"https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png\",\n};\n\n/**\n * Creates a Token for all networks.\n */\nexport const makeTokenForAllNetworks = (\n  token: Omit<TokenInfo, \"chainId\">\n): TokenMap => ({\n  \"mainnet-beta\": new Token({ ...token, chainId: ChainId.MainnetBeta }),\n  devnet: new Token({ ...token, chainId: ChainId.Devnet }),\n  testnet: new Token({ ...token, chainId: ChainId.Testnet }),\n  localnet: new Token({ ...token, chainId: ChainId.Localnet }),\n});\n\n// comes from @solana/spl-token-registry, except we've added localnet\nexport enum ChainId {\n  MainnetBeta = 101,\n  Testnet = 102,\n  Devnet = 103,\n  Localnet = 104,\n}\n\nexport const NETWORK_TO_CHAIN_ID = {\n  \"mainnet-beta\": ChainId.MainnetBeta,\n  devnet: ChainId.Devnet,\n  testnet: ChainId.Testnet,\n  localnet: 104,\n};\n\nexport const CHAIN_ID_TO_NETWORK: { [E in ChainId]: Network } = Object.entries(\n  NETWORK_TO_CHAIN_ID\n).reduce((acc, [network, env]) => ({ ...acc, [env]: network }), {}) as {\n  [E in ChainId]: Network;\n};\n\n/**\n * Gets the chain id associated with a network.\n * @param network\n * @returns\n */\nexport const networkToChainId = (network: Network): ChainId =>\n  NETWORK_TO_CHAIN_ID[network];\n\n/**\n * Gets the Network associated with a chain id.\n * @param network\n * @returns\n */\nexport const chainIdToNetwork = (env: ChainId): Network =>\n  CHAIN_ID_TO_NETWORK[env];\n\n/**\n * Raw Solana token.\n *\n * This is a magic value. This is not a real token.\n */\nexport const RAW_SOL: TokenMap = makeTokenForAllNetworks(rawSol);\n\n/**\n * Wrapped Solana token.\n */\nexport const WRAPPED_SOL: TokenMap = makeTokenForAllNetworks(wrappedSol);\n"]}