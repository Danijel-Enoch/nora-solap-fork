"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Price = void 0;
const tslib_1 = require("tslib");
const token_math_1 = require("@ubeswap/token-math");
const tiny_invariant_1 = tslib_1.__importDefault(require("tiny-invariant"));
const tokenAmount_1 = require("./tokenAmount");
/**
 * A price of one token relative to another.
 */
class Price extends token_math_1.Price {
    /**
     * Constructs a price.
     * @param baseCurrency
     * @param quoteCurrency
     * @param denominator
     * @param numerator
     */
    constructor(baseCurrency, quoteCurrency, denominator, numerator) {
        super(baseCurrency, quoteCurrency, denominator, numerator);
    }
    invert() {
        return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);
    }
    multiply(other) {
        (0, tiny_invariant_1.default)(this.quoteCurrency.equals(other.baseCurrency), `multiply token mismatch: ${this.quoteCurrency.toString()} !== ${other.baseCurrency.toString()}`);
        const fraction = super.asFraction.multiply(other);
        return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);
    }
    quote(tokenAmount) {
        const amt = super.quote(tokenAmount);
        return new tokenAmount_1.TokenAmount(this.quoteCurrency, amt.raw);
    }
    static fromUPrice(price) {
        return new Price(price.baseCurrency, price.quoteCurrency, price.denominator, price.numerator);
    }
}
exports.Price = Price;
//# sourceMappingURL=price.js.map