{"version":3,"file":"price.js","sourceRoot":"","sources":["../../src/price.ts"],"names":[],"mappings":";;;;AACA,oDAAsD;AACtD,4EAAuC;AAGvC,+CAA4C;AAE5C;;GAEG;AACH,MAAa,KAAM,SAAQ,kBAAa;IACtC;;;;;;OAMG;IACH,YACE,YAAmB,EACnB,aAAoB,EACpB,WAAsB,EACtB,SAAoB;QAEpB,KAAK,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;IAC7D,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,KAAK,CACd,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,WAAW,CACjB,CAAC;IACJ,CAAC;IAEQ,QAAQ,CAAC,KAAY;QAC5B,IAAA,wBAAS,EACP,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,EAC7C,4BAA4B,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CACjG,CAAC;QACF,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClD,OAAO,IAAI,KAAK,CACd,IAAI,CAAC,YAAY,EACjB,KAAK,CAAC,aAAa,EACnB,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,SAAS,CACnB,CAAC;IACJ,CAAC;IAEQ,KAAK,CAAC,WAAwB;QACrC,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACrC,OAAO,IAAI,yBAAW,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IACtD,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,KAAoB;QACpC,OAAO,IAAI,KAAK,CACd,KAAK,CAAC,YAAY,EAClB,KAAK,CAAC,aAAa,EACnB,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,SAAS,CAChB,CAAC;IACJ,CAAC;CACF;AArDD,sBAqDC","sourcesContent":["import type { BigintIsh } from \"@ubeswap/token-math\";\nimport { Price as UPrice } from \"@ubeswap/token-math\";\nimport invariant from \"tiny-invariant\";\n\nimport type { Token } from \"./token\";\nimport { TokenAmount } from \"./tokenAmount\";\n\n/**\n * A price of one token relative to another.\n */\nexport class Price extends UPrice<Token> {\n  /**\n   * Constructs a price.\n   * @param baseCurrency\n   * @param quoteCurrency\n   * @param denominator\n   * @param numerator\n   */\n  constructor(\n    baseCurrency: Token,\n    quoteCurrency: Token,\n    denominator: BigintIsh,\n    numerator: BigintIsh\n  ) {\n    super(baseCurrency, quoteCurrency, denominator, numerator);\n  }\n\n  override invert(): Price {\n    return new Price(\n      this.quoteCurrency,\n      this.baseCurrency,\n      this.numerator,\n      this.denominator\n    );\n  }\n\n  override multiply(other: Price): Price {\n    invariant(\n      this.quoteCurrency.equals(other.baseCurrency),\n      `multiply token mismatch: ${this.quoteCurrency.toString()} !== ${other.baseCurrency.toString()}`\n    );\n    const fraction = super.asFraction.multiply(other);\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator\n    );\n  }\n\n  override quote(tokenAmount: TokenAmount): TokenAmount {\n    const amt = super.quote(tokenAmount);\n    return new TokenAmount(this.quoteCurrency, amt.raw);\n  }\n\n  static fromUPrice(price: UPrice<Token>): Price {\n    return new Price(\n      price.baseCurrency,\n      price.quoteCurrency,\n      price.denominator,\n      price.numerator\n    );\n  }\n}\n"]}