{"version":3,"file":"layout.js","sourceRoot":"","sources":["../../src/layout.ts"],"names":[],"mappings":"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","sourcesContent":["import { PublicKey } from \"@saberhq/solana-contrib\";\nimport type { Layout } from \"@solana/buffer-layout\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport type { AccountInfo, MintInfo } from \"@solana/spl-token\";\nimport {\n  AccountLayout,\n  MintLayout as TokenMintLayout,\n  u64,\n} from \"@solana/spl-token\";\n\nexport {\n  Layout as TypedLayout,\n  Structure as TypedStructure,\n} from \"@solana/buffer-layout\";\n\n/**\n * Typed struct buffer layout\n * @param fields\n * @param property\n * @param decodePrefixes\n * @returns\n */\nexport const structLayout = <T>(\n  fields: Layout<T[keyof T]>[],\n  property?: string | undefined,\n  decodePrefixes?: boolean | undefined\n): BufferLayout.Structure<T> =>\n  BufferLayout.struct<T>(fields, property, decodePrefixes);\n\n/**\n * Layout for a public key\n */\nexport const PublicKeyLayout = (property = \"publicKey\"): BufferLayout.Blob => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const Uint64Layout = (property = \"uint64\"): BufferLayout.Blob => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a TokenAccount.\n */\nexport const TokenAccountLayout = AccountLayout as Layout<{\n  mint: Buffer;\n  owner: Buffer;\n  amount: Buffer;\n  delegateOption: number;\n  delegate: Buffer;\n  state: number;\n  delegatedAmount: Buffer;\n  isNativeOption: number;\n  isNative: Buffer;\n  closeAuthorityOption: number;\n  closeAuthority: Buffer;\n}>;\n\n/**\n * Layout for a Mint.\n */\nexport const MintLayout = TokenMintLayout as Layout<{\n  mintAuthorityOption: number;\n  mintAuthority: Buffer;\n  supply: Buffer;\n  decimals: number;\n  isInitialized: number;\n  freezeAuthorityOption: number;\n  freezeAuthority: Buffer;\n}>;\n\n/**\n * Data in an SPL token account.\n */\nexport type TokenAccountData = Omit<AccountInfo, \"address\">;\n\n/**\n * Deserializes a token account.\n * @param address\n * @param data\n * @returns\n */\nexport const deserializeAccount = (data: Buffer): TokenAccountData => {\n  const accountInfo = TokenAccountLayout.decode(data);\n\n  const mint = new PublicKey(accountInfo.mint);\n  const owner = new PublicKey(accountInfo.owner);\n  const amount = u64.fromBuffer(accountInfo.amount);\n\n  let delegate: PublicKey | null;\n  let delegatedAmount: u64;\n\n  if (accountInfo.delegateOption === 0) {\n    delegate = null;\n    delegatedAmount = new u64(0);\n  } else {\n    delegate = new PublicKey(accountInfo.delegate);\n    delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  const isInitialized = accountInfo.state !== 0;\n  const isFrozen = accountInfo.state === 2;\n\n  let rentExemptReserve: u64 | null;\n  let isNative: boolean;\n\n  if (accountInfo.isNativeOption === 1) {\n    rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    isNative = true;\n  } else {\n    rentExemptReserve = null;\n    isNative = false;\n  }\n\n  let closeAuthority: PublicKey | null;\n  if (accountInfo.closeAuthorityOption === 0) {\n    closeAuthority = null;\n  } else {\n    closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return {\n    mint,\n    owner,\n    amount,\n    delegate,\n    delegatedAmount,\n    isInitialized,\n    isFrozen,\n    rentExemptReserve,\n    isNative,\n    closeAuthority,\n  };\n};\n\n/**\n * Deserialize a {@link Buffer} into a {@link MintInfo}.\n * @param data\n * @returns\n */\nexport const deserializeMint = (data: Buffer): MintInfo => {\n  if (data.length !== MintLayout.span) {\n    throw new Error(\"Not a valid Mint\");\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  let mintAuthority: PublicKey | null;\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintAuthority = null;\n  } else {\n    mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  const supply = u64.fromBuffer(mintInfo.supply);\n  const isInitialized = mintInfo.isInitialized !== 0;\n\n  let freezeAuthority: PublicKey | null;\n  if (mintInfo.freezeAuthorityOption === 0) {\n    freezeAuthority = null;\n  } else {\n    freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return {\n    mintAuthority,\n    supply,\n    decimals: mintInfo.decimals,\n    isInitialized,\n    freezeAuthority,\n  };\n};\n"]}