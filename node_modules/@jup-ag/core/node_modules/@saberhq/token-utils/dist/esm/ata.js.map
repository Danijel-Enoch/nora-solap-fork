{"version":3,"file":"ata.js","sourceRoot":"","sources":["../../src/ata.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EACL,2BAA2B,EAC3B,gBAAgB,GACjB,MAAM,mBAAmB,CAAC;AAE3B;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAAE,EAClC,IAAI,EACJ,KAAK,GAIN,EAAsB,EAAE;IACvB,MAAM,CAAC,OAAO,CAAC,GAAG,MAAM,SAAS,CAAC,kBAAkB,CAClD,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,gBAAgB,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAChE,2BAA2B,CAC5B,CAAC;IACF,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AASF;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,EAAoB,EACtD,KAAK,EACL,KAAK,GAMN,EAKE,EAAE;IACH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CACvB,KAAK,EACH,IAAI,EAKH,EAAE;QACH,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAsB,CAAC;QAC5C,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC;YACjC,IAAI;YACJ,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QACH,OAAO;YACL,OAAO,EAAE,MAAM;YACf,IAAI;YACJ,IAAI;SACL,CAAC;IACJ,CAAC,CACF,CACF,CAAC;IACF,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAC3B,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;QAC/B,OAAO;YACL,QAAQ,EAAE;gBACR,GAAG,GAAG,CAAC,QAAQ;gBACf,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;aAC1B;SACF,CAAC;IACJ,CAAC,EACD,EAAE,QAAQ,EAAE,EAAE,EAEb,CACF,CAAC;IACF,OAAO;QACL,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { PublicKey } from \"@saberhq/solana-contrib\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\n\n/**\n * Gets an associated token account address.\n */\nexport const getATAAddress = async ({\n  mint,\n  owner,\n}: {\n  mint: PublicKey;\n  owner: PublicKey;\n}): Promise<PublicKey> => {\n  const [address] = await PublicKey.findProgramAddress(\n    [owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n  return address;\n};\n\nexport type ATAMap<K extends string> = {\n  [mint in K]: {\n    address: PublicKey;\n    mint: PublicKey;\n  };\n};\n\n/**\n * Gets multiple associated token account addresses.\n */\nexport const getATAAddresses = async <K extends string>({\n  mints,\n  owner,\n}: {\n  mints: {\n    [mint in K]: PublicKey;\n  };\n  owner: PublicKey;\n}): Promise<{\n  /**\n   * All ATAs\n   */\n  accounts: ATAMap<K>;\n}> => {\n  const result = await Promise.all(\n    Object.entries(mints).map(\n      async (\n        args\n      ): Promise<{\n        address: PublicKey;\n        name: string;\n        mint: PublicKey;\n      }> => {\n        const [name, mint] = args as [K, PublicKey];\n        const result = await getATAAddress({\n          mint,\n          owner: owner,\n        });\n        return {\n          address: result,\n          name,\n          mint,\n        };\n      }\n    )\n  );\n  const deduped = result.reduce(\n    (acc, { address, name, mint }) => {\n      return {\n        accounts: {\n          ...acc.accounts,\n          [name]: { address, mint },\n        },\n      };\n    },\n    { accounts: {} } as {\n      accounts: ATAMap<K>;\n    }\n  );\n  return {\n    accounts: deduped.accounts,\n  };\n};\n"]}