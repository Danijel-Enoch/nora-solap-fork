{"version":3,"file":"ata.js","sourceRoot":"","sources":["../../../src/instructions/ata.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type { TransactionInstruction } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { getATAAddress } from \"../ata\";\n\ntype GetOrCreateATAResult = {\n  /**\n   * ATA key\n   */\n  address: PublicKey;\n  /**\n   * Instruction to create the account if it doesn't exist.\n   */\n  instruction: TransactionInstruction | null;\n};\n\ntype GetOrCreateATAsResult<K extends string> = {\n  /**\n   * All accounts\n   */\n  accounts: { [mint in K]: PublicKey };\n  /**\n   * Instructions to create accounts that don't exist.\n   */\n  instructions: readonly TransactionInstruction[];\n  /**\n   * Instructions, keyed.\n   */\n  createAccountInstructions: { [mint in K]: TransactionInstruction | null };\n};\n\n/**\n * Gets an associated token account, returning a create instruction if it doesn't exist.\n * @param param0\n * @returns\n */\nexport const getOrCreateATA = async ({\n  provider,\n  mint,\n  owner = provider.wallet.publicKey,\n  payer = provider.wallet.publicKey,\n}: {\n  provider: Provider;\n  mint: PublicKey;\n  owner?: PublicKey;\n  payer?: PublicKey;\n}): Promise<GetOrCreateATAResult> => {\n  const address = await getATAAddress({ mint, owner });\n  if (await provider.getAccountInfo(address)) {\n    return { address, instruction: null };\n  } else {\n    return {\n      address,\n      instruction: createATAInstruction({\n        mint,\n        address,\n        owner,\n        payer,\n      }),\n    };\n  }\n};\n\n/**\n * Gets ATAs and creates them if they don't exist.\n * @param param0\n * @returns\n */\nexport const getOrCreateATAs = async <K extends string>({\n  provider,\n  mints,\n  owner = provider.wallet.publicKey,\n}: {\n  provider: Provider;\n  mints: {\n    [mint in K]: PublicKey;\n  };\n  owner?: PublicKey;\n}): Promise<GetOrCreateATAsResult<K>> => {\n  const result = await Promise.all(\n    Object.entries(mints).map(\n      async ([name, mint]): Promise<{\n        address: PublicKey;\n        name: string;\n        mintKey: PublicKey;\n        instruction: TransactionInstruction | null;\n      }> => {\n        const mintKey = new PublicKey(mint as PublicKey);\n        const result = await getOrCreateATA({\n          provider,\n          mint: mintKey,\n          owner: owner,\n          payer: provider.wallet.publicKey,\n        });\n        return {\n          address: result.address,\n          instruction: result.instruction,\n          name,\n          mintKey,\n        };\n      }\n    )\n  );\n\n  const deduped = result.reduce(\n    (acc, { address, name, instruction }) => {\n      return {\n        accounts: {\n          ...acc.accounts,\n          [name]: address,\n        },\n        createAccountInstructions: {\n          ...acc.createAccountInstructions,\n          [name]: instruction,\n        },\n        instructions: instruction\n          ? {\n              ...acc.instructions,\n              [address.toString()]: instruction,\n            }\n          : acc.instructions,\n      };\n    },\n    { accounts: {}, instructions: {}, createAccountInstructions: {} } as {\n      accounts: { [key in K]?: PublicKey };\n      createAccountInstructions: { [key in K]?: TransactionInstruction | null };\n      instructions: { [address: string]: TransactionInstruction };\n    }\n  );\n  return {\n    accounts: deduped.accounts,\n    createAccountInstructions: deduped.createAccountInstructions,\n    instructions: Object.values(deduped.instructions),\n  } as GetOrCreateATAsResult<K>;\n};\n\n/**\n * Instruction for creating an ATA.\n * @returns\n */\nexport const createATAInstruction = ({\n  address,\n  mint,\n  owner,\n  payer,\n}: {\n  address: PublicKey;\n  mint: PublicKey;\n  owner: PublicKey;\n  payer: PublicKey;\n}): TransactionInstruction =>\n  Token.createAssociatedTokenAccountInstruction(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    address,\n    owner,\n    payer\n  );\n"]}