{"version":3,"file":"mint.js","sourceRoot":"","sources":["../../../src/instructions/mint.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAE9D,OAAO,EAAE,KAAK,IAAI,QAAQ,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AAExE,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AAEvC;;;;GAIG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,KAAK,EAAE,EAC/C,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzC,eAAe,GAAG,IAAI,GAOvB,EAAgC,EAAE;IACjC,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;IACvC,OAAO,IAAI,mBAAmB,CAC5B,QAAQ,EACR;QACE,aAAa,CAAC,aAAa,CAAC;YAC1B,UAAU,EAAE,IAAI;YAChB,gBAAgB,EAAE,MAAM,CAAC,SAAS;YAClC,KAAK,EAAE,UAAU,CAAC,IAAI;YACtB,QAAQ,EAAE,MAAM,QAAQ,CAAC,8BAA8B,CACrD,QAAQ,CAAC,UAAU,CACpB;YACD,SAAS,EAAE,gBAAgB;SAC5B,CAAC;QACF,QAAQ,CAAC,yBAAyB,CAChC,gBAAgB,EAChB,MAAM,CAAC,SAAS,EAChB,QAAQ,EACR,aAAa,EACb,eAAe,CAChB;KACF,EACD,CAAC,MAAM,CAAC,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,EACtC,QAAQ,EACR,IAAI,EACJ,eAAe,EACf,EAAE,EACF,MAAM,GAOP,EAAuB,EAAE;IACxB,OAAO,IAAI,mBAAmB,CAC5B,QAAQ,EACR;QACE,QAAQ,CAAC,uBAAuB,CAC9B,gBAAgB,EAChB,IAAI,EACJ,EAAE,EACF,eAAe,CAAC,SAAS,EACzB,EAAE,EACF,MAAM,CACP;KACF,EACD,CAAC,eAAe,CAAC,CAClB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { Provider } from \"@saberhq/solana-contrib\";\nimport { TransactionEnvelope } from \"@saberhq/solana-contrib\";\nimport type { u64 } from \"@solana/spl-token\";\nimport { Token as SPLToken, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { PublicKey, Signer } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport { MintLayout } from \"../layout\";\n\n/**\n * Creates instructions for initializing a mint.\n * @param param0\n * @returns\n */\nexport const createInitMintInstructions = async ({\n  provider,\n  mintKP,\n  decimals,\n  mintAuthority = provider.wallet.publicKey,\n  freezeAuthority = null,\n}: {\n  provider: Provider;\n  mintKP: Signer;\n  decimals: number;\n  mintAuthority?: PublicKey;\n  freezeAuthority?: PublicKey | null;\n}): Promise<TransactionEnvelope> => {\n  const from = provider.wallet.publicKey;\n  return new TransactionEnvelope(\n    provider,\n    [\n      SystemProgram.createAccount({\n        fromPubkey: from,\n        newAccountPubkey: mintKP.publicKey,\n        space: MintLayout.span,\n        lamports: await SPLToken.getMinBalanceRentForExemptMint(\n          provider.connection\n        ),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      SPLToken.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mintKP.publicKey,\n        decimals,\n        mintAuthority,\n        freezeAuthority\n      ),\n    ],\n    [mintKP]\n  );\n};\n\nexport const createMintToInstruction = ({\n  provider,\n  mint,\n  mintAuthorityKP,\n  to,\n  amount,\n}: {\n  provider: Provider;\n  mint: PublicKey;\n  mintAuthorityKP: Signer;\n  to: PublicKey;\n  amount: u64;\n}): TransactionEnvelope => {\n  return new TransactionEnvelope(\n    provider,\n    [\n      SPLToken.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint,\n        to,\n        mintAuthorityKP.publicKey,\n        [],\n        amount\n      ),\n    ],\n    [mintAuthorityKP]\n  );\n};\n"]}