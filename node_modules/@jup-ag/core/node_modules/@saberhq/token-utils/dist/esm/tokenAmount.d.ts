import { u64 } from "@solana/spl-token";
import type { BigintIsh, NumberFormat, Percent } from "@ubeswap/token-math";
import { TokenAmount as UTokenAmount } from "@ubeswap/token-math";
import type { Token } from "./token";
export interface IFormatUint {
    /**
     * If specified, format this according to `toLocaleString`
     */
    numberFormatOptions?: Intl.NumberFormatOptions;
    /**
     * Locale of the number
     */
    locale?: string;
}
export declare class TokenAmount extends UTokenAmount<Token> {
    constructor(token: Token, amount: BigintIsh);
    /**
     * Parses a token amount from a decimal representation.
     * @param token
     * @param uiAmount
     * @returns
     */
    static parse(token: Token, uiAmount: string): TokenAmount;
    add(other: TokenAmount): TokenAmount;
    subtract(other: TokenAmount): TokenAmount;
    multiplyBy(percent: Percent): TokenAmount;
    reduceBy(percent: Percent): TokenAmount;
    /**
     * Divides this TokenAmount by a raw integer.
     * @param other
     * @returns
     */
    divideByInteger(other: BigintIsh): TokenAmount;
    /**
     * Formats the token amount with units and decimal adjustment, e.g. "100.42 SOL"
     * @returns
     */
    formatUnits(format?: NumberFormat): string;
    /**
     * String representation of this token amount.
     */
    toString(): string;
    /**
     * JSON representation of the token amount.
     */
    toJSON(): {
        /**
         * Discriminator to show this is a token amount.
         */
        _isTA: true;
        /**
         * Mint of the token.
         */
        mint: string;
        /**
         * Amount of tokens in string representation.
         */
        uiAmount: string;
    };
    /**
     * Converts this to the raw u64 used by the SPL library
     * @returns
     */
    toU64(): u64;
}
//# sourceMappingURL=tokenAmount.d.ts.map