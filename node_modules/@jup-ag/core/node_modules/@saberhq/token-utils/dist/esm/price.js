import { Price as UPrice } from "@ubeswap/token-math";
import invariant from "tiny-invariant";
import { TokenAmount } from "./tokenAmount";
/**
 * A price of one token relative to another.
 */
export class Price extends UPrice {
    /**
     * Constructs a price.
     * @param baseCurrency
     * @param quoteCurrency
     * @param denominator
     * @param numerator
     */
    constructor(baseCurrency, quoteCurrency, denominator, numerator) {
        super(baseCurrency, quoteCurrency, denominator, numerator);
    }
    invert() {
        return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);
    }
    multiply(other) {
        invariant(this.quoteCurrency.equals(other.baseCurrency), `multiply token mismatch: ${this.quoteCurrency.toString()} !== ${other.baseCurrency.toString()}`);
        const fraction = super.asFraction.multiply(other);
        return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);
    }
    quote(tokenAmount) {
        const amt = super.quote(tokenAmount);
        return new TokenAmount(this.quoteCurrency, amt.raw);
    }
    static fromUPrice(price) {
        return new Price(price.baseCurrency, price.quoteCurrency, price.denominator, price.numerator);
    }
}
//# sourceMappingURL=price.js.map