{"version":3,"file":"tokenOwner.js","sourceRoot":"","sources":["../../src/tokenOwner.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,2BAA2B,EAC3B,aAAa,EACb,QAAQ,EACR,gBAAgB,GACjB,MAAM,GAAG,CAAC;AAGX;;GAEG;AACH,MAAM,OAAO,UAAU;IACrB,YAAqB,KAAgB;QAAhB,UAAK,GAAL,KAAK,CAAW;IAAG,CAAC;IAEzC;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,IAAe;QAC1B,OAAO,MAAM,aAAa,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,QAAQ,CACZ,MAAmB,EACnB,EAAa;QAEb,OAAO,QAAQ,CAAC,yBAAyB,CACvC,gBAAgB,EAChB,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,EAC3C,EAAE,EACF,IAAI,CAAC,KAAK,EACV,EAAE,EACF,MAAM,CAAC,KAAK,EAAE,CACf,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,eAAe,CACnB,MAAmB,EACnB,EAAa;QAEb,OAAO,QAAQ,CAAC,gCAAgC,CAC9C,gBAAgB,EAChB,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,EAC3C,MAAM,CAAC,KAAK,CAAC,WAAW,EACxB,EAAE,EACF,IAAI,CAAC,KAAK,EACV,EAAE,EACF,MAAM,CAAC,KAAK,EAAE,EACd,MAAM,CAAC,KAAK,CAAC,QAAQ,CACtB,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,MAAmB,EAAE,EAAa;QACvC,OAAO,QAAQ,CAAC,uBAAuB,CACrC,gBAAgB,EAChB,MAAM,CAAC,KAAK,CAAC,WAAW,EACxB,EAAE,EACF,IAAI,CAAC,KAAK,EACV,EAAE,EACF,MAAM,CAAC,KAAK,EAAE,CACf,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,SAAS,CACb,IAAe,EACf,QAAmB,IAAI,CAAC,KAAK;QAE7B,OAAO,QAAQ,CAAC,uCAAuC,CACrD,2BAA2B,EAC3B,gBAAgB,EAChB,IAAI,EACJ,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EACvB,IAAI,CAAC,KAAK,EACV,KAAK,CACN,CAAC;IACJ,CAAC;CACF","sourcesContent":["import type { PublicKey } from \"@saberhq/solana-contrib\";\nimport type { TransactionInstruction } from \"@solana/web3.js\";\n\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  getATAAddress,\n  SPLToken,\n  TOKEN_PROGRAM_ID,\n} from \".\";\nimport type { TokenAmount } from \"./tokenAmount\";\n\n/**\n * Wrapper around a token account owner to create token instructions.\n */\nexport class TokenOwner {\n  constructor(readonly owner: PublicKey) {}\n\n  /**\n   * Gets the user's ATA.\n   * @param mint\n   * @returns\n   */\n  async getATA(mint: PublicKey): Promise<PublicKey> {\n    return await getATAAddress({ mint, owner: this.owner });\n  }\n\n  /**\n   * Transfers tokens to a token account.\n   * @param amount Amount of tokens to transfer.\n   * @param to Token account to transfer to.\n   * @returns The transaction instruction.\n   */\n  async transfer(\n    amount: TokenAmount,\n    to: PublicKey\n  ): Promise<TransactionInstruction> {\n    return SPLToken.createTransferInstruction(\n      TOKEN_PROGRAM_ID,\n      await this.getATA(amount.token.mintAccount),\n      to,\n      this.owner,\n      [],\n      amount.toU64()\n    );\n  }\n\n  /**\n   * Transfers tokens to a token account, checked..\n   * @param amount Amount of tokens to transfer.\n   * @param to Token account to transfer to.\n   * @returns The transaction instruction.\n   */\n  async transferChecked(\n    amount: TokenAmount,\n    to: PublicKey\n  ): Promise<TransactionInstruction> {\n    return SPLToken.createTransferCheckedInstruction(\n      TOKEN_PROGRAM_ID,\n      await this.getATA(amount.token.mintAccount),\n      amount.token.mintAccount,\n      to,\n      this.owner,\n      [],\n      amount.toU64(),\n      amount.token.decimals\n    );\n  }\n\n  /**\n   * Mints tokens to a token account.\n   * @param amount Amount of tokens to transfer.\n   * @param to Token account to transfer to.\n   * @returns The transaction instruction.\n   */\n  mintTo(amount: TokenAmount, to: PublicKey): TransactionInstruction {\n    return SPLToken.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      amount.token.mintAccount,\n      to,\n      this.owner,\n      [],\n      amount.toU64()\n    );\n  }\n\n  /**\n   * Creates an associated token account instruction.\n   * @param mint Mint of the ATA.\n   * @param payer Payer to create the ATA. Defaults to the owner.\n   * @returns The transaction instruction.\n   */\n  async createATA(\n    mint: PublicKey,\n    payer: PublicKey = this.owner\n  ): Promise<TransactionInstruction> {\n    return SPLToken.createAssociatedTokenAccountInstruction(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      mint,\n      await this.getATA(mint),\n      this.owner,\n      payer\n    );\n  }\n}\n"]}