{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/common.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file is a port of serum-common, which was built for web3.js 0.x.\n */\n\nimport type { Provider } from \"@saberhq/solana-contrib\";\nimport type { MintInfo } from \"@solana/spl-token\";\nimport { Token as SPLToken, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { TransactionInstruction } from \"@solana/web3.js\";\nimport {\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n} from \"@solana/web3.js\";\nimport type BN from \"bn.js\";\n\nimport { deserializeAccount, deserializeMint, MintLayout, Token } from \".\";\nimport type { TokenAccountData } from \"./layout\";\n\nexport * as token from \"./token\";\n\n/**\n * Default number of decimals of a token.\n */\nexport const DEFAULT_TOKEN_DECIMALS = 6;\n\nexport const SPL_SHARED_MEMORY_ID = new PublicKey(\n  \"shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL\"\n);\n\nexport async function createMint(\n  provider: Provider,\n  authority?: PublicKey,\n  decimals?: number\n): Promise<PublicKey> {\n  if (authority === undefined) {\n    authority = provider.wallet.publicKey;\n  }\n  const mint = Keypair.generate();\n  const instructions = await createMintInstructions(\n    provider,\n    authority,\n    mint.publicKey,\n    decimals\n  );\n\n  const tx = new Transaction();\n  tx.add(...instructions);\n\n  await provider.send(tx, [mint]);\n\n  return mint.publicKey;\n}\n\n/**\n * Creates a Token.\n *\n * @param provider\n * @param authority The mint authority.\n * @param decimals Number of decimals.\n * @returns\n */\nexport async function createToken(\n  provider: Provider,\n  authority?: PublicKey,\n  decimals = 6\n): Promise<Token> {\n  return Token.fromMint(\n    await createMint(provider, authority, decimals),\n    decimals\n  );\n}\n\nexport async function createMintInstructions(\n  provider: Provider,\n  authority: PublicKey,\n  mint: PublicKey,\n  decimals = 6\n): Promise<TransactionInstruction[]> {\n  const instructions = [\n    SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: mint,\n      space: MintLayout.span,\n      lamports: await provider.connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    SPLToken.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint,\n      decimals,\n      authority,\n      null\n    ),\n  ];\n  return instructions;\n}\n\nexport async function createMintAndVault(\n  provider: Provider,\n  amount: BN,\n  owner?: PublicKey,\n  decimals?: number\n): Promise<[PublicKey, PublicKey]> {\n  if (owner === undefined) {\n    owner = provider.wallet.publicKey;\n  }\n  const mint = Keypair.generate();\n  const vault = Keypair.generate();\n  const tx = new Transaction();\n  tx.add(\n    ...(await createMintInstructions(\n      provider,\n      provider.wallet.publicKey,\n      mint.publicKey,\n      decimals\n    )),\n    SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: vault.publicKey,\n      space: 165,\n      lamports: await provider.connection.getMinimumBalanceForRentExemption(\n        165\n      ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    SPLToken.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      vault.publicKey,\n      owner\n    ),\n    SPLToken.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      vault.publicKey,\n      provider.wallet.publicKey,\n      [],\n      amount\n    )\n  );\n  await provider.send(tx, [mint, vault]);\n  return [mint.publicKey, vault.publicKey];\n}\n\nexport async function createTokenAccountInstrs(\n  provider: Provider,\n  newAccountPubkey: PublicKey,\n  mint: PublicKey,\n  owner: PublicKey,\n  lamports?: number\n): Promise<TransactionInstruction[]> {\n  if (lamports === undefined) {\n    lamports = await provider.connection.getMinimumBalanceForRentExemption(165);\n  }\n  return [\n    SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey,\n      space: 165,\n      lamports,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    SPLToken.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      mint,\n      newAccountPubkey,\n      owner\n    ),\n  ];\n}\n\nexport async function createAccountRentExempt(\n  provider: Provider,\n  programId: PublicKey,\n  size: number\n): Promise<Keypair> {\n  const acc = Keypair.generate();\n  const tx = new Transaction();\n  tx.add(\n    SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: acc.publicKey,\n      space: size,\n      lamports: await provider.connection.getMinimumBalanceForRentExemption(\n        size\n      ),\n      programId,\n    })\n  );\n  await provider.send(tx, [acc]);\n  return acc;\n}\n\nexport async function getMintInfo(\n  provider: Provider,\n  addr: PublicKey\n): Promise<MintInfo> {\n  const depositorAccInfo = await provider.getAccountInfo(addr);\n  if (depositorAccInfo === null) {\n    throw new Error(\"Failed to find token mint account\");\n  }\n  return deserializeMint(depositorAccInfo.accountInfo.data);\n}\n\nexport async function getTokenAccount(\n  provider: Provider,\n  addr: PublicKey\n): Promise<TokenAccountData> {\n  const depositorAccInfo = await provider.getAccountInfo(addr);\n  if (depositorAccInfo === null) {\n    throw new Error(\"Failed to find token account\");\n  }\n  return deserializeAccount(depositorAccInfo.accountInfo.data);\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * A parsed program-owned account.\n */\nexport type ProgramAccount<T> = {\n  /**\n   * {@link PublicKey} of the account.\n   */\n  publicKey: PublicKey;\n  /**\n   * The parsed account data.\n   */\n  account: T;\n};\n"]}