{"version":3,"file":"core.cjs.production.min.js","sources":["../src/lib/idl/jupiter.ts","../src/constants.ts","../src/utils/layout.ts","../src/lib/cropper/swapLayout.ts","../src/lib/jupiterInstruction.ts","../src/lib/saber/saberAddDecimalsAmm.ts","../src/utils/getTwoPermutations.ts","../src/utils/chunkedGetMultipleAccountInfos.ts","../src/utils/chunks.ts","../src/lib/amm.ts","../src/lib/raydium/pools.ts","../src/lib/raydium/raydiumAmm.ts","../src/lib/serum/market.ts","../src/lib/serum/serumAmm.ts","../src/lib/split-trade/splitTradeAmm.ts","../src/lib/market.ts","../src/lib/saber/saberAmm.ts","../src/lib/aldrin/percentage.ts","../src/lib/aldrin/poolState.ts","../src/lib/aldrin/aldrinAmm.ts","../src/lib/spl-token-swap/splTokenSwapPools.ts","../src/lib/spl-token-swap/tokenSwapLayout.ts","../src/lib/spl-token-swap/splTokenSwapAmm.ts","../src/lib/mercurial/swapLayout.ts","../src/lib/mercurial/mercurialAmm.ts","../src/lib/cropper/cropperAmm.ts","../src/lib/crema/swapLayout.ts","../src/lib/crema/cremaAmm.ts","../src/lib/sencha/swapLayout.ts","../src/lib/sencha/senchaAmm.ts","../src/lib/lifinity/lifinityAmm.ts","../src/lib/lifinity/swapLayout.ts","../src/lib/whirlpool/whirlpoolAmm.ts","../src/lib/cykura/solanaTickDataProvider.ts","../src/lib/cykura/cykuraAmm.ts","../src/lib/routes.ts","../src/lib/cache.ts","../src/utils/token.ts","../src/lib/routeToInstructions.ts","../src/lib/serum/openOrders.ts","../src/utils/instruction.ts","../src/lib/fee.ts","../src/utils/TransactionBuilder.ts","../src/utils/Owner.ts","../src/utils/wait.ts","../src/utils/transactionHelpers.ts","../src/utils/cartesian.ts","../src/lib/computeRouteInfos.ts","../src/utils/tx/errors.ts","../src/lib/jupiter.ts","../src/lib/ammFactory.ts","../src/lib/getTopTokens.ts"],"sourcesContent":["export type Jupiter = {\n  version: '0.1.0';\n  name: 'jupiter';\n  instructions: [\n    {\n      name: 'mercurialExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clock';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsDeposit';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsWithdraw';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'senchaExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'serumSwap';\n      accounts: [\n        {\n          name: 'market';\n          accounts: [\n            {\n              name: 'market';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'openOrders';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'requestQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'eventQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'bids';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'asks';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'coinVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'pcVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'vaultSigner';\n              isMut: false;\n              isSigner: false;\n            },\n          ];\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'orderPayerTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coinWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pcWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'tokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'stepTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cropperTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammTargetOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwapV2';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinV2Swap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'curve';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cremaTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolTicksAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'lifinityTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'amm';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythPcAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'configAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cykuraSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'signer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'factoryState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'lastObservationState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coreProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'whirlpoolSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'aToB';\n          type: 'bool';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'riskCheckAndFee';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'initializeTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'setTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAccount';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'createOpenOrders';\n      accounts: [\n        {\n          name: 'openOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'market';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: 'tokenLedger';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokenAccount';\n            type: 'publicKey';\n          },\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amountIn';\n            type: 'u64';\n          },\n          {\n            name: 'minimumAmountOut';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n          {\n            name: 'otherAmountThreshold';\n            type: 'u64';\n          },\n          {\n            name: 'sqrtPriceLimit';\n            type: 'u128';\n          },\n          {\n            name: 'amountSpecifiedIsInput';\n            type: 'bool';\n          },\n          {\n            name: 'aToB';\n            type: 'bool';\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapInstrution';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Swap';\n            fields: [\n              {\n                defined: 'Swap';\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'Side';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Bid';\n          },\n          {\n            name: 'Ask';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Direction';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'LeftToRight';\n          },\n          {\n            name: 'RightToLeft';\n          },\n        ];\n      };\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: 'SlippageToleranceExceeded';\n      msg: 'Slippage tolerance exceeded';\n    },\n    {\n      code: 6001;\n      name: 'InvalidTokenLedger';\n      msg: 'Invalid token ledger';\n    },\n    {\n      code: 6002;\n      name: 'MissingTokenLedger';\n      msg: 'Missing token ledger';\n    },\n    {\n      code: 6003;\n      name: 'MissingMercurialExchangeTokenAccount';\n      msg: 'Missing mercurial exchange token account';\n    },\n    {\n      code: 6004;\n      name: 'LedgerTokenAccountDoesNotMatch';\n      msg: 'Ledger token account does not match';\n    },\n    {\n      code: 6005;\n      name: 'MissingPlatformFeeAccount';\n      msg: 'Missing platform fee account';\n    },\n    {\n      code: 6006;\n      name: 'InvalidCalculation';\n      msg: 'Invalid calculation';\n    },\n  ];\n};\n\nexport const IDL: Jupiter = {\n  version: '0.1.0',\n  name: 'jupiter',\n  instructions: [\n    {\n      name: 'mercurialExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsDeposit',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsWithdraw',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'senchaExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'serumSwap',\n      accounts: [\n        {\n          name: 'market',\n          accounts: [\n            {\n              name: 'market',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'openOrders',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'requestQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'eventQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'bids',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'asks',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'coinVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'pcVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultSigner',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'orderPayerTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coinWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pcWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'tokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'stepTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cropperTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammTargetOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwapV2',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinV2Swap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'curve',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cremaTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolTicksAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'lifinityTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'amm',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythPcAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'configAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cykuraSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'signer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'factoryState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lastObservationState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coreProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'whirlpoolSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'aToB',\n          type: 'bool',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'riskCheckAndFee',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'initializeTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'createOpenOrders',\n      accounts: [\n        {\n          name: 'openOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'market',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'tokenLedger',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokenAccount',\n            type: 'publicKey',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amountIn',\n            type: 'u64',\n          },\n          {\n            name: 'minimumAmountOut',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'otherAmountThreshold',\n            type: 'u64',\n          },\n          {\n            name: 'sqrtPriceLimit',\n            type: 'u128',\n          },\n          {\n            name: 'amountSpecifiedIsInput',\n            type: 'bool',\n          },\n          {\n            name: 'aToB',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapInstrution',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Swap',\n            fields: [\n              {\n                defined: 'Swap',\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'Side',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Bid',\n          },\n          {\n            name: 'Ask',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Direction',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'LeftToRight',\n          },\n          {\n            name: 'RightToLeft',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'SlippageToleranceExceeded',\n      msg: 'Slippage tolerance exceeded',\n    },\n    {\n      code: 6001,\n      name: 'InvalidTokenLedger',\n      msg: 'Invalid token ledger',\n    },\n    {\n      code: 6002,\n      name: 'MissingTokenLedger',\n      msg: 'Missing token ledger',\n    },\n    {\n      code: 6003,\n      name: 'MissingMercurialExchangeTokenAccount',\n      msg: 'Missing mercurial exchange token account',\n    },\n    {\n      code: 6004,\n      name: 'LedgerTokenAccountDoesNotMatch',\n      msg: 'Ledger token account does not match',\n    },\n    {\n      code: 6005,\n      name: 'MissingPlatformFeeAccount',\n      msg: 'Missing platform fee account',\n    },\n    {\n      code: 6006,\n      name: 'InvalidCalculation',\n      msg: 'Invalid calculation',\n    },\n  ],\n};\n","import { Cluster, PublicKey } from '@solana/web3.js';\nimport { IDL } from './lib/idl/jupiter';\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const MAINNET_SERUM_DEX_PROGRAM = new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\n\nexport const DEVNET_SERUM_DEX_PROGRAM = new PublicKey('DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY');\n\nexport const MARKETS_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/markets/cache/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/markets?v=3',\n  testnet: 'https://api.jup.ag/api/markets/cache/devnet',\n};\n\nexport const TOKEN_LIST_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/tokens/devnet',\n  testnet: 'https://api.jup.ag/api/markets/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/tokens',\n};\n\nexport const LAMPORTS_PER_SIGNATURE = 5000;\n\nexport const RAYDIUM_AMM_V4_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');\n\nexport const ALDRIN_SWAP_PROGRAM_ID = new PublicKey('AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6');\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/f93fe3f2d847d79d8ddff507d8d4f62fd803421b/src/v2.json\nexport const ALDRIN_SWAP_V2_PROGRAM_ID = new PublicKey('CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4');\n\nexport const SABER_ADD_DECIMALS_PROGRAM_ID = new PublicKey('DecZY86MU5Gj7kppfUCEmd4LbXXuyZH1yHaP2NTqdiZB');\n\nexport const CROPPER_PROGRAM_ID = new PublicKey('CTMAxxk34HjKWxQ3QLZK1HpaLXmBveao3ESePXbiyfzh');\n\nexport const SENCHA_PROGRAM_ID = new PublicKey('SCHAtsf8mbjyjiv4LkhLKutTf6JnZAbdJKFkXQNMFHZ');\n\nexport const LIFINITY_PROGRAM_ID = new PublicKey('EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S');\n\nexport const CREMA_PROGRAM_ID = new PublicKey('6MLxLqiXaaSUpkgMnWDTuejNZEz3kE7k2woyHGVFw319');\n\nexport const JUPITER_WALLET = new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9');\n\nexport const MERCURIAL_SWAP_PROGRAM_ID = new PublicKey('MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky');\n\nexport const WHIRLPOOL_PROGRAM_ID = new PublicKey('whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc');\n\nexport const CYKURA_PROGRAM_ID = new PublicKey('cysPXAjehMpVKUapzbMCCnpFxUFFryEWEaLgnb9NrR8');\n\nexport const CYKURA_FACTORY_STATE_ADDRESS = new PublicKey('DBsMwKfeoUHhxMi9x6wd2AsT12UwUCssjNbUzu1aKgqj');\n\n/** Tokens which are fundamental pivot in certain protocols */\nexport const SWAP_PROTOCOL_TOKENS = [\n  'StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT', // STEP\n  'DubwWZNWiNGMMeeQHPnMATNj77YZPZSAz2WVR5WjLJqz', // CRP\n];\n\ninterface ErrorDetails {\n  code: number;\n  name: string;\n  msg: string;\n}\n\ntype JUPITER_ERROR_TYPES =\n  | 'TransactionNotConfirmed'\n  | 'BalancesNotExtractedProperly'\n  | typeof IDL.errors[number]['name'];\n\nexport const JUPITER_ERRORS: Record<JUPITER_ERROR_TYPES, ErrorDetails> = Object.freeze({\n  TransactionNotConfirmed: {\n    code: 7000, // a code that is not in the list of errors\n    name: 'TransactionNotConfirmed',\n    msg: 'Transaction was not confirmed',\n  },\n  BalancesNotExtractedProperly: {\n    code: 7001, // a code that is not in the list of errors\n    name: 'BalancesNotExtractedProperly',\n    msg: 'Balances cannot be extracted properly',\n  },\n  ...IDL.errors.reduce((accErrors, error) => {\n    return { ...accErrors, [error.name]: error };\n  }, {} as Record<typeof IDL.errors[number]['name'], ErrorDetails>),\n});\n\nexport const IS_DEV = process.env.NODE_ENV === 'development';\n","import { blob, Layout, Structure, u8, union } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nclass PublicKeyLayout extends Layout<PublicKey> {\n  private layout: Layout<any>;\n\n  constructor(property?: string) {\n    const layout = blob(32);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): PublicKey {\n    return new PublicKey(this.layout.decode(b, offset));\n  }\n\n  encode(src: PublicKey, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toBuffer(), b, offset);\n  }\n}\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string) => new PublicKeyLayout(property);\n\nclass U64Layout extends Layout<u64> {\n  private layout: Layout<any>;\n\n  constructor(span = 8, property: string) {\n    const layout = blob(span);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): u64 {\n    const bn = new u64(this.layout.decode(b, offset), 10, 'le');\n\n    return bn;\n  }\n\n  encode(src: u64, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toArrayLike(Buffer, 'le', this.layout.span), b, offset);\n  }\n}\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string) => new U64Layout(8, property);\n\nexport const uint128 = (property: string) => new U64Layout(16, property);\n\nexport const rustEnum = (variants: Structure<any>[], property: string) => {\n  // @ts-expect-error TODO: fix this\n  const unionLayout = union(u8(), u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property || ''));\n  return unionLayout;\n};\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { blob, struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface CropperTokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\nexport const CropperTokenSwapLayout = struct<CropperTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  publicKey('ammId'),\n  publicKey('serumProgramId'),\n  publicKey('serumMarket'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAAccount'),\n  publicKey('tokenBAccount'),\n  publicKey('poolMint'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n]);\n\ninterface CropperStateLayout {\n  isInitialized: number;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: u64;\n  fixedFeeNumerator: u64;\n  feeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst CropperStateLayout = struct<CropperStateLayout>([\n  u8('isInitialized'),\n  publicKey('stateOwner'),\n  publicKey('feeOwner'),\n  uint64('initialSupply'),\n  uint64('returnFeeNumerator'),\n  uint64('fixedFeeNumerator'),\n  uint64('feeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\nexport interface CropperState {\n  isInitialized: boolean;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nexport interface CropperPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\n// This seems to be hardcoded.\nexport const CROPPER_STATE_ADDRESS = new PublicKey('3hsU1VgsBgBgz5jWiqdw9RfGU6TpWdCmdah1oi4kF3Tq');\n\nexport const accountInfoToCropperPoolState = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): CropperPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = CropperTokenSwapLayout.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: decoded.ammId,\n    serumProgramId: decoded.serumProgramId,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.tokenAAccount,\n    tokenBAccount: decoded.tokenBAccount,\n    serumMarket: decoded.serumMarket,\n    poolMint: decoded.poolMint,\n    mintA: decoded.mintA,\n    mintB: decoded.mintB,\n  };\n};\n\nexport const stateAccountInfoToCropperState = (accountInfo: AccountInfo<Buffer>): CropperState => {\n  const decoded = CropperStateLayout.decode(accountInfo.data);\n\n  return {\n    isInitialized: Boolean(decoded.isInitialized),\n    stateOwner: decoded.stateOwner,\n    feeOwner: decoded.feeOwner,\n    initialSupply: decoded.initialSupply,\n    returnFeeNumerator: decoded.returnFeeNumerator.toNumber(),\n    fixedFeeNumerator: decoded.fixedFeeNumerator.toNumber(),\n    feeDenominator: decoded.feeDenominator.toNumber(),\n    curveType: decoded.curveType,\n    curveParameters: decoded.curveParameters,\n  };\n};\n","import type { Provider } from '@project-serum/anchor';\nimport { Program } from '@project-serum/anchor';\nimport { createProgramAddressSync, findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market } from '@project-serum/serum';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { BN } from 'bn.js';\nimport { Jupiter as JupiterIDL, IDL } from './idl/jupiter';\nimport type { RaydiumAmm } from './raydium/raydiumAmm';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport {\n  ALDRIN_SWAP_PROGRAM_ID,\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  SABER_ADD_DECIMALS_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n  CYKURA_FACTORY_STATE_ADDRESS,\n  WHIRLPOOL_PROGRAM_ID,\n} from '../constants';\nimport { AldrinPoolState } from './aldrin/poolState';\nimport type { TokenSwapState } from './spl-token-swap/tokenSwapLayout';\nimport { PlatformFee } from './types';\nimport type { AddDecimals } from './saber/saberAddDecimalsAmm';\nimport { CropperPoolState, CROPPER_STATE_ADDRESS } from './cropper/swapLayout';\nimport { SenchaPoolState } from './sencha/swapLayout';\nimport { CremaPoolState } from './crema/swapLayout';\nimport { MercurialSwapLayoutState } from './mercurial/swapLayout';\nimport { LifinitySwapLayoutState } from './lifinity/swapLayout';\n\n// Side rust enum used for the program's RPC API.\nconst Side = {\n  Bid: { bid: {} },\n  Ask: { ask: {} },\n};\n\nexport const JUPITER_PROGRAM_ID_STAGING = new PublicKey('BUG9oTodrkqFqxLhvvaUtwsPLtk1wkcTC544fQn9fWPm');\nexport const JUPITER_PROGRAM_ID_PRODUCTION = new PublicKey('JUP2jxvXaqu7NQY1GmNF4m1vodw12LVXYxbFL2uJvfo');\n\nconst JUPITER_PROGRAM_ID = JUPITER_PROGRAM_ID_PRODUCTION; // JUPITER_PROGRAM_ID_PRODUCTION;\n\nconst JUPITER_PROGRAM = new Program<JupiterIDL>(IDL, JUPITER_PROGRAM_ID, {} as Provider);\n\nexport const STAGING_TOKEN_LEDGER = new PublicKey('FartgFP53i6ejPsr1owuc4ya2vxJGdcy5uEzMLJRcuzn');\nexport const PRODUCTION_TOKEN_LEDGER = new PublicKey('7h51TX1pNvSaNyjg4koKroJqoe7atKB7xWUfir7ZqX81');\n\nexport const PRODUCTION_TOKEN_LEDGERS = [\n  new PublicKey('7h51TX1pNvSaNyjg4koKroJqoe7atKB7xWUfir7ZqX81'),\n  new PublicKey('HgeLVK1nJ1kNdWSUNCKj6DfGqfhwgx67dfGPRcBSdE2d'),\n  new PublicKey('8ME9HwwchNknEVrcCSKYAQCa1YAYi3LZrEXJrY4ZNkkg'),\n  new PublicKey('Edg9J3CMky9AVJq2WrSar2JR38jFkg4S7vAW7Xsix8oV'),\n  new PublicKey('B5mW68TkDewnKvWNc2trkmmdSRxcCjZz3Yd9BWxQTSRU'),\n  new PublicKey('7E3TDrnS2zEp8uVri8EtPU8MyQ3qjLTc6cCGJAnAM48p'),\n];\n\nexport const TOKEN_LEDGER: PublicKey =\n  PRODUCTION_TOKEN_LEDGERS[Math.floor(Math.random() * PRODUCTION_TOKEN_LEDGERS.length)];\n\ntype CreateSwapInstructionParams = {\n  sourceMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  inAmount: number | null;\n  minimumOutAmount: number;\n  tokenLedger: PublicKey;\n  platformFee?: PlatformFee;\n};\n\nfunction stableSwapNPoolIntoMercurialExchange(\n  swayLayout: MercurialSwapLayoutState,\n  sourceTokenAccount: PublicKey,\n  destinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  return {\n    swapProgram: MERCURIAL_SWAP_PROGRAM_ID,\n    swapState: swayLayout.ammId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    poolAuthority: swayLayout.authority,\n    userTransferAuthority: userTransferAuthority,\n\n    sourceTokenAccount,\n    destinationTokenAccount,\n  };\n}\n\nfunction raydiumAmmToRaydiumSwap(\n  raydiumAmm: RaydiumAmm,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const [ammAuthority] = findProgramAddressSync(\n    [new Uint8Array(Buffer.from('amm authority'.replace('\\u00A0', ' '), 'utf-8'))],\n    RAYDIUM_AMM_V4_PROGRAM_ID,\n  );\n\n  if (!raydiumAmm.serumMarketKeys) {\n    throw new Error('RaydiumAmm is missing serumMarketKeys');\n  }\n\n  return {\n    swapProgram: RAYDIUM_AMM_V4_PROGRAM_ID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    ammId: raydiumAmm.ammId,\n    ammAuthority,\n    ammOpenOrders: raydiumAmm.ammOpenOrders,\n    poolCoinTokenAccount: raydiumAmm.poolCoinTokenAccount,\n    poolPcTokenAccount: raydiumAmm.poolPcTokenAccount,\n    serumProgramId: raydiumAmm.serumProgramId,\n    serumMarket: raydiumAmm.serumMarket,\n    serumBids: raydiumAmm.serumMarketKeys.serumBids,\n    serumAsks: raydiumAmm.serumMarketKeys.serumAsks,\n    serumEventQueue: raydiumAmm.serumMarketKeys.serumEventQueue,\n    serumCoinVaultAccount: raydiumAmm.serumMarketKeys.serumCoinVaultAccount,\n    serumPcVaultAccount: raydiumAmm.serumMarketKeys.serumPcVaultAccount,\n    serumVaultSigner: raydiumAmm.serumMarketKeys.serumVaultSigner,\n    userSourceTokenAccount: userSourceTokenAccount,\n    userDestinationTokenAccount: userDestinationTokenAccount,\n    userSourceOwner: userTransferAuthority,\n  };\n}\n\nfunction marketIntoSerumSwap(\n  market: Market,\n  openOrdersAddress: PublicKey,\n  orderPayerTokenAccountAddress: PublicKey,\n  coinWallet: PublicKey,\n  pcWallet: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const vaultSigner = createProgramAddressSync(\n    [market.address.toBuffer(), market.decoded.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n    market.programId,\n  );\n\n  return {\n    market: {\n      market: market.address,\n      openOrders: openOrdersAddress,\n      requestQueue: market.decoded.requestQueue,\n      eventQueue: market.decoded.eventQueue,\n      bids: market.bidsAddress,\n      asks: market.asksAddress,\n      coinVault: market.decoded.baseVault,\n      pcVault: market.decoded.quoteVault,\n      vaultSigner,\n    },\n    authority: userTransferAuthority,\n    orderPayerTokenAccount: orderPayerTokenAccountAddress,\n    coinWallet,\n    pcWallet,\n    // Programs.\n    dexProgram: market.programId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    // Sysvars.\n    rent: SYSVAR_RENT_PUBKEY,\n  };\n}\n\nexport function createMercurialExchangeInstruction({\n  swapLayout,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapLayout: MercurialSwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  for (const swapTokenAccount of swapLayout.tokenAccounts) {\n    remainingAccounts.push({\n      pubkey: swapTokenAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  remainingAccounts.push(...prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount));\n\n  return JUPITER_PROGRAM.instruction.mercurialExchange(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: stableSwapNPoolIntoMercurialExchange(\n        swapLayout,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority,\n      ),\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createSerumSwapInstruction({\n  market,\n  sourceMint,\n  openOrdersAddress,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  referrer,\n}: {\n  market: Market;\n  openOrdersAddress: PublicKey;\n  referrer: PublicKey | undefined;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const { side, coinWallet, pcWallet } = sourceMint.equals(market.baseMintAddress)\n    ? {\n        side: Side.Ask,\n        coinWallet: userSourceTokenAccount,\n        pcWallet: userDestinationTokenAccount,\n      }\n    : {\n        side: Side.Bid,\n        coinWallet: userDestinationTokenAccount,\n        pcWallet: userSourceTokenAccount,\n      };\n\n  let remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  if (referrer) {\n    remainingAccounts.push({\n      pubkey: referrer,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.serumSwap(\n    side,\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: marketIntoSerumSwap(\n        market,\n        openOrdersAddress,\n        userSourceTokenAccount,\n        coinWallet,\n        pcWallet,\n        userTransferAuthority,\n      ),\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createTokenSwapInstruction({\n  tokenSwapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  isStep,\n}: { tokenSwapState: TokenSwapState; isStep: boolean } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(tokenSwapState.mintA)\n    ? [tokenSwapState.tokenAccountA, tokenSwapState.tokenAccountB]\n    : [tokenSwapState.tokenAccountB, tokenSwapState.tokenAccountA];\n\n  return (isStep ? JUPITER_PROGRAM.instruction.stepTokenSwap : JUPITER_PROGRAM.instruction.tokenSwap)(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        tokenSwapProgram: tokenSwapState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: tokenSwapState.address,\n        authority: tokenSwapState.authority,\n        userTransferAuthority: userTransferAuthority,\n        source: userSourceTokenAccount,\n        swapSource,\n        swapDestination,\n        destination: userDestinationTokenAccount,\n        poolMint: tokenSwapState.poolToken,\n        poolFee: tokenSwapState.feeAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createSenchaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: SenchaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Reserves, poolState.token1Reserves]\n    : [poolState.token1Reserves, poolState.token0Reserves];\n\n  const [feesSource, feesDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Fees, poolState.token1Fees]\n    : [poolState.token1Fees, poolState.token0Fees];\n\n  return JUPITER_PROGRAM.instruction.senchaExchange(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: poolState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: poolState.ammId,\n        userAuthority: userTransferAuthority,\n        inputUserAccount: userSourceTokenAccount,\n        inputTokenAccount: swapSource,\n        inputFeesAccount: feesSource,\n        outputUserAccount: userDestinationTokenAccount,\n        outputTokenAccount: swapDestination,\n        outputFeesAccount: feesDestination,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createCropperSwapInstruction({\n  poolState,\n  feeAccount,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CropperPoolState; feeAccount: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cropperTokenSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        tokenSwapProgram: poolState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: poolState.ammId,\n        swapState: CROPPER_STATE_ADDRESS,\n        authority: poolState.authority,\n        userTransferAuthority: userTransferAuthority,\n        source: userSourceTokenAccount,\n        swapSource,\n        swapDestination,\n        destination: userDestinationTokenAccount,\n        poolMint: poolState.poolMint,\n        poolFee: feeAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createRaydiumSwapInstruction({\n  raydiumAmm,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { raydiumAmm: RaydiumAmm } & CreateSwapInstructionParams): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.raydiumSwapV2(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: raydiumAmmToRaydiumSwap(\n        raydiumAmm,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority,\n      ),\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createAldrinSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: {\n  poolState: AldrinPoolState;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    side,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: ALDRIN_SWAP_PROGRAM_ID,\n        pool: poolState.address,\n        poolSigner: poolState.poolSigner,\n        poolMint: poolState.poolMint,\n        baseTokenVault: poolState.baseTokenVault,\n        quoteTokenVault: poolState.quoteTokenVault,\n        feePoolTokenAccount: poolState.feePoolTokenAccount,\n        walletAuthority: userTransferAuthority,\n        userBaseTokenAccount,\n        userQuoteTokenAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createAldrinV2SwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  curve,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: AldrinPoolState; curve: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinV2Swap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    side,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: ALDRIN_SWAP_V2_PROGRAM_ID,\n        pool: poolState.address,\n        poolSigner: poolState.poolSigner,\n        poolMint: poolState.poolMint,\n        baseTokenVault: poolState.baseTokenVault,\n        quoteTokenVault: poolState.quoteTokenVault,\n        feePoolTokenAccount: poolState.feePoolTokenAccount,\n        walletAuthority: userTransferAuthority,\n        userBaseTokenAccount,\n        userQuoteTokenAccount,\n        curve,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createCremaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CremaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cremaTokenSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: poolState.programId,\n        pool: poolState.ammId,\n        poolSigner: poolState.authority,\n        userSourceTokenAccount: userSourceTokenAccount,\n        userDestinationTokenAccount: userDestinationTokenAccount,\n        poolSourceTokenAccount: swapSource,\n        poolDestinationTokenAccount: swapDestination,\n        poolTicksAccount: poolState.ticksKey,\n        walletAuthority: userTransferAuthority,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createRiskCheckAndFeeInstruction(\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n  minimumOutAmount: number,\n  tokenLedger: PublicKey,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  if (platformFee?.feeAccount) {\n    remainingAccounts.push({\n      pubkey: platformFee.feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.riskCheckAndFee(new BN(minimumOutAmount), platformFee?.feeBps ?? 0, {\n    accounts: {\n      tokenLedger,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createSetTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  tokenAccountAddress: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.setTokenLedger({\n    accounts: {\n      tokenLedger,\n      tokenAccount: tokenAccountAddress,\n    },\n  });\n}\n\nexport function createInitializeTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  payer: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.initializeTokenLedger({\n    accounts: {\n      tokenLedger,\n      payer,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n}\n\nexport function createOpenOrdersInstruction(\n  market: Market,\n  userTransferAuthority: PublicKey,\n): [PublicKey, TransactionInstruction] {\n  const [openOrders] = findProgramAddressSync(\n    [Buffer.from('open_orders'), market.publicKey.toBuffer(), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  );\n\n  const ix = JUPITER_PROGRAM.instruction.createOpenOrders({\n    accounts: {\n      openOrders,\n      payer: userTransferAuthority,\n      dexProgram: market.programId,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      market: market.publicKey,\n    },\n  });\n  return [openOrders, ix];\n}\n\nfunction saberPoolIntoSaberSwap(\n  saberPool: StableSwap,\n  sourceMintAddress: PublicKey,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const feesTokenAccount = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? saberPool.state.tokenB.adminFeeAccount\n    : saberPool.state.tokenA.adminFeeAccount;\n  const [inputTokenAccount, outputTokenAccount] = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? [saberPool.state.tokenA.reserve, saberPool.state.tokenB.reserve]\n    : [saberPool.state.tokenB.reserve, saberPool.state.tokenA.reserve];\n\n  return {\n    swapProgram: saberPool.config.swapProgramID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    swap: saberPool.config.swapAccount,\n    swapAuthority: saberPool.config.authority,\n    userAuthority: userTransferAuthority,\n    inputUserAccount: userSourceTokenAccount,\n    inputTokenAccount,\n    outputUserAccount: userDestinationTokenAccount,\n    outputTokenAccount,\n    feesTokenAccount,\n  };\n}\n\nexport function createSaberSwapInstruction({\n  stableSwap,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { stableSwap: StableSwap } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: saberPoolIntoSaberSwap(\n        stableSwap,\n        sourceMint,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority,\n      ),\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createSaberAddDecimalsDepositInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsDeposit(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n        wrapper: addDecimals.wrapper,\n        wrapperMint: addDecimals.mint,\n        wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n        owner: userTransferAuthority,\n        userUnderlyingTokens: userSourceTokenAccount,\n        userWrappedTokens: userDestinationTokenAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createSaberAddDecimalsWithdrawInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsWithdraw(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n        wrapper: addDecimals.wrapper,\n        wrapperMint: addDecimals.mint,\n        wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n        owner: userTransferAuthority,\n        userUnderlyingTokens: userDestinationTokenAccount,\n        userWrappedTokens: userSourceTokenAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts,\n    },\n  );\n}\n\nexport function createLifinitySwapInstruction({\n  swapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapState: LifinitySwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(swapState.tokenAMint)\n    ? [swapState.poolCoinTokenAccount, swapState.poolPcTokenAccount]\n    : [swapState.poolPcTokenAccount, swapState.poolCoinTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.lifinityTokenSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: swapState.programId,\n        authority: swapState.authority,\n        amm: swapState.amm,\n        userTransferAuthority: userTransferAuthority,\n        sourceInfo: userSourceTokenAccount,\n        destinationInfo: userDestinationTokenAccount,\n        swapSource,\n        swapDestination,\n        poolMint: swapState.poolMint,\n        feeAccount: swapState.feeAccount,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        pythAccount: swapState.pythAccount,\n        pythPcAccount: swapState.pythPcAccount,\n        configAccount: swapState.configAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\ntype CykuraSwapInstructionArgs = {\n  poolAddress: PublicKey;\n  inputVault: PublicKey;\n  outputVault: PublicKey;\n  nextObservationState: PublicKey;\n  lastObservationState: PublicKey;\n  swapAccountMetas: AccountMeta[];\n};\n\nexport function createCykuraSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: CykuraSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  return JUPITER_PROGRAM.instruction.cykuraSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: CYKURA_PROGRAM_ID,\n        signer: userTransferAuthority,\n        factoryState: CYKURA_FACTORY_STATE_ADDRESS,\n        poolState: additionalArgs.poolAddress,\n        inputTokenAccount: userSourceTokenAccount,\n        outputTokenAccount: userDestinationTokenAccount,\n        inputVault: additionalArgs.inputVault,\n        outputVault: additionalArgs.outputVault,\n        lastObservationState: additionalArgs.lastObservationState,\n        coreProgram: CYKURA_PROGRAM_ID, // Duplicated as in Cykura accounts\n        tokenProgram: TOKEN_PROGRAM_ID,\n      },\n      remainingAccounts: remainingAccounts.concat([\n        ...additionalArgs.swapAccountMetas,\n        { pubkey: additionalArgs.nextObservationState, isSigner: false, isWritable: true },\n      ]),\n    },\n  );\n}\n\ntype WhirlpoolSwapInstructionArgs = {\n  aToB: boolean;\n  whirlpool: PublicKey;\n  tokenVaultA: PublicKey;\n  tokenVaultB: PublicKey;\n  tickArray0: PublicKey;\n  tickArray1: PublicKey;\n  tickArray2: PublicKey;\n  oracle: PublicKey;\n};\n\nexport function createWhirlpoolSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: WhirlpoolSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const [tokenOwnerAccountA, tokenOwnerAccountB] = additionalArgs.aToB\n    ? [userSourceTokenAccount, userDestinationTokenAccount]\n    : [userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.whirlpoolSwap(\n    inAmount ? new BN(inAmount) : inAmount,\n    new BN(minimumOutAmount),\n    additionalArgs.aToB,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: WHIRLPOOL_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenAuthority: userTransferAuthority,\n        whirlpool: additionalArgs.whirlpool,\n        tokenOwnerAccountA,\n        tokenVaultA: additionalArgs.tokenVaultA,\n        tokenOwnerAccountB,\n        tokenVaultB: additionalArgs.tokenVaultB,\n        tickArray0: additionalArgs.tickArray0,\n        tickArray1: additionalArgs.tickArray1,\n        tickArray2: additionalArgs.tickArray2,\n        oracle: additionalArgs.oracle,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nfunction prepareRemainingAccounts(\n  inAmount: number | null,\n  tokenLedger: PublicKey,\n  feeAccount: PublicKey | undefined,\n): AccountMeta[] {\n  const remainingAccounts = [];\n\n  if (inAmount === null) {\n    remainingAccounts.push({\n      pubkey: tokenLedger,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  if (feeAccount) {\n    remainingAccounts.push({\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return remainingAccounts;\n}\n","import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, QuoteParams, SwapParams } from '../amm';\n// Modified from saber's registry to contain the underlying mint decimal to avoid pointless queries\nimport addDecimalsJson from './add-decimals-complete-state.mainnet-beta.json';\nimport {\n  createSaberAddDecimalsDepositInstruction,\n  createSaberAddDecimalsWithdrawInstruction,\n} from '../jupiterInstruction';\n\nexport interface AddDecimals {\n  wrapper: PublicKey;\n  underlying: PublicKey;\n  underlyingDecimals: number;\n  wrapperUnderlyingTokens: PublicKey;\n  mint: PublicKey;\n  decimals: number;\n}\n\nexport function getSaberWrappedDecimalsAmms() {\n  return addDecimalsJson.map((addDecimalJson) => {\n    const addDecimals = {\n      wrapper: new PublicKey(addDecimalJson.wrapper),\n      underlying: new PublicKey(addDecimalJson.underlying),\n      underlyingDecimals: addDecimalJson.underlyingDecimals,\n      wrapperUnderlyingTokens: new PublicKey(addDecimalJson.wrapperUnderlyingTokens),\n      mint: new PublicKey(addDecimalJson.mint),\n      decimals: addDecimalJson.decimals,\n    };\n\n    return new SaberAddDecimalsAmm(new WrappedToken(addDecimals));\n  });\n}\n\nexport class WrappedToken {\n  constructor(public addDecimals: AddDecimals) {}\n\n  private get multiplier() {\n    return 10 ** (this.addDecimals.decimals - this.addDecimals.underlyingDecimals);\n  }\n\n  getOutputAmount(inputAmount: number, inputMint: PublicKey): JSBI {\n    if (this.addDecimals.mint.equals(inputMint)) {\n      // withdraw, so divide\n      return this.calculateWithdrawOutputAmount(inputAmount);\n    } else if (this.addDecimals.underlying.equals(inputMint)) {\n      // deposit, so multiply\n      return this.calculateDepositOutputAmount(inputAmount);\n    }\n    throw new Error(`unknown input token: ${inputMint.toString()}`);\n  }\n\n  private calculateDepositOutputAmount(inputAmount: number) {\n    return JSBI.multiply(JSBI.BigInt(inputAmount), JSBI.BigInt(this.multiplier));\n  }\n\n  private calculateWithdrawOutputAmount(inputAmount: number) {\n    return JSBI.divide(JSBI.BigInt(inputAmount), JSBI.BigInt(this.multiplier));\n  }\n}\n\n// This isn't technically an Amm but this the smoothest solution to allow its usage without a major refactor of the abstractions for now\nexport class SaberAddDecimalsAmm implements Amm {\n  id: string;\n  label = 'Saber (Decimals)' as const;\n  shouldPrefetch = false;\n\n  constructor(public wrappedToken: WrappedToken) {\n    this.id = this.wrappedToken.addDecimals.wrapper.toBase58();\n  }\n\n  getAccountsForUpdate() {\n    return new Array<PublicKey>();\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {}\n\n  getQuote({ sourceMint, amount }: QuoteParams) {\n    const outAmount = JSBI.toNumber(this.wrappedToken.getOutputAmount(amount, sourceMint));\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount,\n      feeAmount: 0,\n      feeMint: sourceMint.toBase58(),\n      feePct: 0,\n      priceImpactPct: 0,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (this.wrappedToken.addDecimals.underlying.equals(swapParams.sourceMint)) {\n      return [\n        createSaberAddDecimalsDepositInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n        }),\n      ];\n    } else {\n      return [\n        createSaberAddDecimalsWithdrawInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n        }),\n      ];\n    }\n  }\n\n  get reserveTokenMints() {\n    return [this.wrappedToken.addDecimals.underlying, this.wrappedToken.addDecimals.mint];\n  }\n}\n","export function getTwoPermutations<T>(array: T[]) {\n  return array.reduce((acc, item) => {\n    array.forEach((otherItem) => {\n      if (item !== otherItem) {\n        acc.push([item, otherItem]);\n      }\n    });\n    return acc;\n  }, new Array<T[]>());\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { chunks } from './chunks';\n\nexport async function chunkedGetMultipleAccountInfos(\n  connection: Connection,\n  pks: string[],\n  chunkSize: number = 100,\n): Promise<Array<AccountInfo<Buffer> | null>> {\n  return (\n    await Promise.all(\n      chunks(pks, chunkSize).map((chunk) => {\n        const args = connection._buildArgs([chunk], connection.commitment, 'base64');\n        return (\n          // getMultipleAccounts is quite slow, so we use fetch directly\n          connection\n            // @ts-ignore\n            ._rpcRequest('getMultipleAccounts', args)\n            .then((item: any) => {\n              const accounts = item.result.value as Array<AccountInfo<string[]> | null>;\n              accounts.forEach((item) => {\n                if (item) {\n                  const value = item as unknown as AccountInfo<Buffer>;\n                  value.data = Buffer.from(item.data[0], item.data[1] as 'base64');\n                  value.owner = new PublicKey(value.owner);\n                }\n              });\n\n              return accounts;\n            })\n            .catch((e: any) => {\n              console.error('Failed to fetch account infos', e);\n              return chunk.map(() => null);\n            })\n        );\n      }),\n    )\n  ).flat();\n}\n","export function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(0, new Array(Math.ceil(array.length / size))).map((_, index) =>\n    array.slice(index * size, (index + 1) * size),\n  );\n}\n","import { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { PlatformFee, QuoteMintToReferrer, TokenMintAddress } from '..';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport JSBI from 'jsbi';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\n\nexport interface QuoteParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  amount: number;\n}\n\nexport interface Quote {\n  notEnoughLiquidity: boolean;\n  minInAmount?: number;\n  minOutAmount?: number;\n  inAmount: number;\n  outAmount: number;\n  feeAmount: number;\n  feeMint: TokenMintAddress;\n  feePct: number;\n  priceImpactPct: number;\n}\n\nexport interface SwapParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  inAmount: number | null;\n  minimumOutAmount: number;\n  tokenLedger: PublicKey;\n  openOrdersAddress?: PublicKey;\n  platformFee?: PlatformFee;\n  quoteMintToReferrer?: QuoteMintToReferrer;\n}\n\nexport type AccountInfoMap = Map<string, AccountInfo<Buffer> | null>;\n\nexport interface Amm {\n  /* Label for UI usage */\n  label: string;\n  /* Unique id to recognize the AMM */\n  id: string;\n  /* Reserve token mints for the purpose of routing */\n  reserveTokenMints: PublicKey[];\n  /* State if we need to prefetch the accounts 1 time */\n  shouldPrefetch: Boolean;\n\n  getAccountsForUpdate(): PublicKey[];\n  update(accountInfoMap: AccountInfoMap): void;\n  getQuote(quoteParams: QuoteParams): Quote;\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[];\n}\n\nexport const mapAddressToAccountInfos = (accountInfoMap: AccountInfoMap, addresses: PublicKey[]) => {\n  const accountInfos = addresses.map((address) => {\n    const accountInfo = accountInfoMap.get(address.toString());\n    if (!accountInfo) {\n      throw new Error(`Account info ${address.toBase58()} missing`);\n    }\n    return accountInfo;\n  });\n\n  return accountInfos;\n};\n\nexport const tokenAccountsToJSBIs = (tokenAccounts: TokenAccountInfo[]): JSBI[] => {\n  return tokenAccounts.map((tokenAccount) => {\n    return JSBI.BigInt(tokenAccount.amount);\n  });\n};\n\nexport const prefetchAmms = async (amms: Amm[], connection: Connection) => {\n  const accounts = amms.map((amm) => amm.getAccountsForUpdate().map((item) => item.toBase58())).flat();\n  const accountInfosMap = new Map<string, AccountInfo<Buffer>>();\n  const accountInfos = await chunkedGetMultipleAccountInfos(connection, accounts);\n\n  accountInfos.forEach((item, index) => {\n    const publicKey = accounts[index];\n    if (item) {\n      accountInfosMap.set(publicKey, item);\n    }\n  });\n\n  for (let amm of amms) {\n    amm.update(accountInfosMap);\n  }\n};\n","// Only a few hardcoded pools for now, until we query the whole lot through api\nimport { struct, nu64 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { publicKey, uint128, uint64 } from '../../utils/layout';\n\ninterface AmmInfoLayoutV4 {\n  status: number;\n  nonce: number;\n  orderNum: number;\n  depth: number;\n  coinDecimals: number;\n  pcDecimals: number;\n  state: number;\n  resetFlag: number;\n  minSize: number;\n  volMaxCutRatio: number;\n  amountWaveRatio: number;\n  coinLotSize: number;\n  pcLotSize: number;\n  minPriceMultiplier: number;\n  maxPriceMultiplier: number;\n  systemDecimalsValue: number;\n  minSeparateNumerator: number;\n  minSeparateDenominator: number;\n  tradeFeeNumerator: number;\n  tradeFeeDenominator: number;\n  pnlNumerator: number;\n  pnlDenominator: number;\n  swapFeeNumerator: u64;\n  swapFeeDenominator: u64;\n  needTakePnlCoin: number;\n  needTakePnlPc: number;\n  totalPnlPc: number;\n  totalPnlCoin: number;\n  poolTotalDepositPc: u64;\n  poolTotalDepositCoin: u64;\n  swapCoinInAmount: u64;\n  swapPcOutAmount: u64;\n  swapCoin2PcFee: number;\n  swapPcInAmount: u64;\n  swapCoinOutAmount: u64;\n  swapPc2CoinFee: number;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  coinMintAddress: PublicKey;\n  pcMintAddress: PublicKey;\n  lpMintAddress: PublicKey;\n  ammOpenOrders: PublicKey;\n  serumMarket: PublicKey;\n  serumProgramId: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolWithdrawQueue: PublicKey;\n  poolTempLpTokenAccount: PublicKey;\n  ammOwner: PublicKey;\n  pnlOwner: PublicKey;\n}\n\nexport const AMM_INFO_LAYOUT_V4 = struct<AmmInfoLayoutV4>([\n  nu64('status'),\n  nu64('nonce'),\n  nu64('orderNum'),\n  nu64('depth'),\n  nu64('coinDecimals'),\n  nu64('pcDecimals'),\n  nu64('state'),\n  nu64('resetFlag'),\n  nu64('minSize'),\n  nu64('volMaxCutRatio'),\n  nu64('amountWaveRatio'),\n  nu64('coinLotSize'),\n  nu64('pcLotSize'),\n  nu64('minPriceMultiplier'),\n  nu64('maxPriceMultiplier'),\n  nu64('systemDecimalsValue'),\n  // Fees\n  nu64('minSeparateNumerator'),\n  nu64('minSeparateDenominator'),\n  nu64('tradeFeeNumerator'),\n  nu64('tradeFeeDenominator'),\n  nu64('pnlNumerator'),\n  nu64('pnlDenominator'),\n  nu64('swapFeeNumerator'),\n  nu64('swapFeeDenominator'),\n  // OutPutData\n  nu64('needTakePnlCoin'),\n  nu64('needTakePnlPc'),\n  nu64('totalPnlPc'),\n  nu64('totalPnlCoin'),\n  uint128('poolTotalDepositPc'),\n  uint128('poolTotalDepositCoin'),\n  uint128('swapCoinInAmount'),\n  uint128('swapPcOutAmount'),\n  nu64('swapCoin2PcFee'),\n  uint128('swapPcInAmount'),\n  uint128('swapCoinOutAmount'),\n  nu64('swapPc2CoinFee'),\n\n  publicKey('poolCoinTokenAccount'),\n  publicKey('poolPcTokenAccount'),\n  publicKey('coinMintAddress'),\n  publicKey('pcMintAddress'),\n  publicKey('lpMintAddress'),\n  publicKey('ammOpenOrders'),\n  publicKey('serumMarket'),\n  publicKey('serumProgramId'),\n  publicKey('ammTargetOrders'),\n  publicKey('poolWithdrawQueue'),\n  publicKey('poolTempLpTokenAccount'),\n  publicKey('ammOwner'),\n  publicKey('pnlOwner'),\n]);\n","// https://github.com/raydium-io/raydium-ui/blob/4048286f79fc4b71c3ffbfd9095470ab0c7d3862/src/utils/liquidity.ts#L30-L82\n\nimport { Fraction, TokenSwapConstantProduct, ZERO_FRACTION } from '@jup-ag/math';\nimport { createProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market, OpenOrders } from '@project-serum/serum';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createRaydiumSwapInstruction } from '../jupiterInstruction';\nimport { AMM_INFO_LAYOUT_V4 } from './pools';\n\n// Explained here\n// https://discordapp.com/channels/813741812598439958/813750197423308820/900288485028683776\n// total_pc = amminfo.pc_vault.balance + amminfo.openorder.total_quote - amminfo.need_taken_pnl_pc\n// total_coin = amminfo.coin_vault.balance + amminfo.openorder.total_base - amminfo.need_taken_pnl_coin\n\ntype SerumMarketKeys = {\n  serumBids: PublicKey;\n  serumAsks: PublicKey;\n  serumEventQueue: PublicKey;\n  serumCoinVaultAccount: PublicKey;\n  serumPcVaultAccount: PublicKey;\n  serumVaultSigner: PublicKey;\n};\n\ntype SerumMarketKeysString = Record<keyof SerumMarketKeys, string>;\nexport class RaydiumAmm implements Amm {\n  id: string;\n  label = 'Raydium' as const;\n  shouldPrefetch = false;\n\n  coinMint: PublicKey;\n  pcMint: PublicKey;\n\n  status: number;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  ammOpenOrders: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n\n  serumMarketKeys: SerumMarketKeys;\n\n  coinReserve: u64 | undefined;\n  pcReserve: u64 | undefined;\n\n  private feePct: Decimal;\n  private calculator: TokenSwapConstantProduct;\n\n  constructor(public ammId: PublicKey, ammAccountInfo: AccountInfo<Buffer>, params: SerumMarketKeysString) {\n    this.id = ammId.toBase58();\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.status = decoded.status;\n    this.coinMint = new PublicKey(decoded.coinMintAddress);\n    this.pcMint = new PublicKey(decoded.pcMintAddress);\n\n    this.poolCoinTokenAccount = new PublicKey(decoded.poolCoinTokenAccount);\n    this.poolPcTokenAccount = new PublicKey(decoded.poolPcTokenAccount);\n\n    this.serumProgramId = new PublicKey(decoded.serumProgramId);\n    this.serumMarket = new PublicKey(decoded.serumMarket);\n    this.ammOpenOrders = new PublicKey(decoded.ammOpenOrders);\n    this.ammTargetOrders = new PublicKey(decoded.ammTargetOrders);\n\n    this.serumMarketKeys = (Object.keys(params) as Array<keyof SerumMarketKeysString>).reduce((acc, item) => {\n      const pk = params[item];\n      if (!pk) throw new Error(`Could not find ${item} in params`);\n      acc[item] = new PublicKey(params[item]);\n      return acc;\n    }, {} as SerumMarketKeys);\n\n    const swapFeeNumerator = decoded.swapFeeNumerator;\n    const swapFeeDenominator = decoded.swapFeeDenominator;\n\n    this.feePct = new Decimal(swapFeeNumerator.toString()).div(swapFeeDenominator.toString());\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(swapFeeNumerator), JSBI.BigInt(swapFeeDenominator)),\n      ZERO_FRACTION,\n    );\n  }\n\n  static decodeSerumMarketKeysString(\n    serumProgramId: PublicKey,\n    serumMarket: PublicKey,\n    serumMarketInfo: AccountInfo<Buffer>,\n  ): SerumMarketKeysString {\n    const decodedMarket = Market.getLayout(serumProgramId).decode(serumMarketInfo.data);\n    const serumVaultSigner = createProgramAddressSync(\n      [serumMarket.toBuffer(), decodedMarket.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n      serumProgramId,\n    );\n\n    return {\n      serumBids: decodedMarket.bids.toBase58(),\n      serumAsks: decodedMarket.asks.toBase58(),\n      serumEventQueue: decodedMarket.eventQueue.toBase58(),\n      serumCoinVaultAccount: decodedMarket.baseVault.toBase58(),\n      serumPcVaultAccount: decodedMarket.quoteVault.toBase58(),\n      serumVaultSigner: serumVaultSigner.toBase58(),\n    };\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.ammId, this.poolCoinTokenAccount, this.poolPcTokenAccount, this.ammOpenOrders];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const [ammAccountInfo, poolCoinTokenAccountInfo, poolPcTokenAccountInfo, ammOpenOrdersAccountInfo] =\n      mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const [coinAmount, pcAmount] = [\n      RaydiumAmm.tokenAmountAccessor(poolCoinTokenAccountInfo),\n      RaydiumAmm.tokenAmountAccessor(poolPcTokenAccountInfo),\n    ];\n\n    const openOrders = OpenOrders.fromAccountInfo(\n      this.ammOpenOrders,\n      ammOpenOrdersAccountInfo,\n      ammOpenOrdersAccountInfo.owner,\n    );\n\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.coinReserve = coinAmount.add(openOrders.baseTokenTotal).sub(new u64(String(decoded.needTakePnlCoin)));\n\n    this.pcReserve = pcAmount.add(openOrders.quoteTokenTotal).sub(new u64(String(decoded.needTakePnlPc)));\n  }\n\n  private static tokenAmountAccessor(tokenAccountInfo: AccountInfo<Buffer>): u64 {\n    return u64.fromBuffer(tokenAccountInfo.data.slice(64, 64 + 8));\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const { coinReserve, pcReserve } = this;\n    if (!coinReserve || !pcReserve) {\n      throw new Error('Pool token accounts balances not refreshed or empty');\n    }\n\n    const outputIndex = this.coinMint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange(\n      [JSBI.BigInt(coinReserve), JSBI.BigInt(pcReserve)],\n      JSBI.BigInt(amount),\n      outputIndex,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createRaydiumSwapInstruction({\n        raydiumAmm: this,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.coinMint, this.pcMint];\n  }\n}\n","import { ZERO } from '@jup-ag/math';\nimport { Market, Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\n\nconst TAKER_FEE_PCT = 0.0004;\nconst STABLE_TAKER_FEE_PCT = 0.0001;\n\n// Stable markets are hardcoded in the program\nconst STABLE_MARKET_ADDRESSES = [\n  '77quYg4MGneUdjgXCunt9GgM1usmrxKY31twEy3WHwcS', // USDT/USDC\n  '5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z', // mSOL/SOL\n  'EERNEEnBqdGzBS8dd46wwNY5F2kwnaCQ3vsq2fNKGogZ', // UST/USDC\n  '8sFf9TW3KzxLiBXcDcjAxqabEsRroo4EiRr3UG1xbJ9m', // UST/USDT\n  '2iDSTGhjJEiRxNaLF27CY6daMYPs5hgYrP2REHd5YD62', // stSOL/SOL\n];\n\ninterface IMarketMeta {\n  /** buy or sell side */\n  side: 'buy' | 'sell';\n  /** indicate that your order is too huge for the market */\n  notEnoughLiquidity: boolean;\n  /** minimum in amount and the corresponding out amount */\n  minimum: {\n    in: number;\n    out: number;\n  };\n  /** amount in taken for the trade */\n  inAmount: number;\n  /** the amount out for the trade */\n  outAmount: number;\n  /** the total fee amount */\n  feeAmount: number;\n  /** price impact percentage */\n  priceImpactPct: number;\n  /** fee percentage */\n  feePct: number;\n}\n\n// Provides swap like out amount, with slippage and corresponding minimum amount out\nexport function getOutAmountMeta({\n  market,\n  asks,\n  bids,\n  fromAmount,\n  fromMint,\n  toMint,\n}: {\n  market: Market;\n  asks: Orderbook;\n  bids: Orderbook;\n  fromMint: PublicKey;\n  toMint: PublicKey;\n  fromAmount: number;\n}) {\n  const takerFeePct = STABLE_MARKET_ADDRESSES.includes(market.address.toBase58())\n    ? STABLE_TAKER_FEE_PCT\n    : TAKER_FEE_PCT;\n\n  if (fromMint.equals(market.quoteMintAddress) && toMint.equals(market.baseMintAddress)) {\n    // buy\n    return forecastBuy(market, asks, fromAmount, takerFeePct);\n  } else {\n    return forecastSell(market, bids, fromAmount, takerFeePct);\n  }\n}\n\nexport function forecastBuy(market: Market, orderbook: Orderbook, pcIn: number, takerFeePct: number): IMarketMeta {\n  let coinOut = JSBI.BigInt(0);\n  let bestPrice: JSBI = JSBI.BigInt(0);\n  let worstPrice: JSBI = JSBI.BigInt(0);\n  // total base price\n  let totalCost = JSBI.BigInt(0);\n  let totalCoins = JSBI.BigInt(0);\n\n  // might be decimal, e.g: 0.001\n  const quoteSizeLots = market.quoteSizeLotsToNumber(new BN(1));\n\n  // Serum buy order take fee in quote tokens\n  let availablePc = quoteSizeLots ? JSBI.BigInt(Math.floor(pcIn / (1 + takerFeePct) / quoteSizeLots)) : ZERO;\n\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)).toString());\n\n  for (let [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(lotQuantity, baseSizeLots);\n    const orderPcAmount = JSBI.multiply(lotQuantity, lotPrice);\n\n    totalCoins = JSBI.add(totalCoins, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderPcAmount, availablePc)) {\n      const numberLotsPurchasable = JSBI.divide(availablePc, lotPrice);\n\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, numberLotsPurchasable));\n      coinOut = JSBI.add(coinOut, JSBI.multiply(baseSizeLots, numberLotsPurchasable));\n      availablePc = ZERO;\n      break;\n    } else {\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, lotQuantity));\n      coinOut = JSBI.add(coinOut, orderCoinAmount);\n      availablePc = JSBI.subtract(availablePc, orderPcAmount);\n    }\n  }\n\n  const bestPriceDecimal = new Decimal(bestPrice.toString());\n  const worstPriceDecimal = new Decimal(worstPrice.toString());\n\n  const priceImpactPct = worstPriceDecimal.sub(bestPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  const bestPriceSizeLots = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const totalCostSizeLots = priceLotsToDecimal(market, new BN(totalCost.toString()));\n\n  return {\n    side: 'buy',\n    notEnoughLiquidity: JSBI.lessThanOrEqual(totalCoins, coinOut),\n    minimum: {\n      in: new Decimal(bestPriceSizeLots.toString())\n        .mul(baseSizeLots.toString())\n        .mul(1 + takerFeePct)\n        .ceil()\n        .toNumber(),\n      out: JSBI.toNumber(baseSizeLots),\n    },\n    inAmount: new Decimal(totalCostSizeLots.toString())\n      .mul(baseSizeLots.toString())\n      .mul(1 + takerFeePct)\n      .ceil()\n      .toNumber(),\n    outAmount: JSBI.toNumber(coinOut),\n    feeAmount: new Decimal(totalCost.toString()).mul(takerFeePct).toNumber(),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function forecastSell(market: Market, orderbook: Orderbook, coinIn: number, takerFeePct: number): IMarketMeta {\n  let pcOut = JSBI.BigInt(0);\n  let bestPrice = JSBI.BigInt(0);\n  let worstPrice = JSBI.BigInt(0);\n  let totalCoin = JSBI.BigInt(0);\n  let availableCoin = JSBI.BigInt(coinIn);\n  let inAmount = JSBI.BigInt(0);\n\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)));\n  const quoteSizeLots = JSBI.BigInt(market.quoteSizeLotsToNumber(new BN(1)));\n\n  for (const [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(baseSizeLots, lotQuantity);\n    const orderPcAmount = JSBI.multiply(lotQuantity, JSBI.multiply(lotPrice, quoteSizeLots));\n    totalCoin = JSBI.add(totalCoin, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderCoinAmount, availableCoin)) {\n      const numberLotsCanSell = JSBI.divide(availableCoin, baseSizeLots);\n      const totalCoinAmountToSell = JSBI.multiply(numberLotsCanSell, lotPrice);\n      pcOut = JSBI.add(pcOut, JSBI.multiply(totalCoinAmountToSell, quoteSizeLots));\n      availableCoin = JSBI.subtract(availableCoin, totalCoinAmountToSell);\n      inAmount = JSBI.add(inAmount, JSBI.multiply(numberLotsCanSell, baseSizeLots));\n      break;\n    } else {\n      pcOut = JSBI.add(pcOut, orderPcAmount);\n      availableCoin = JSBI.subtract(availableCoin, orderCoinAmount);\n      inAmount = JSBI.add(inAmount, orderCoinAmount);\n    }\n  }\n\n  let pcOutInteger = new Decimal(pcOut.toString())\n    .mul(1 - takerFeePct)\n    .floor()\n    .toNumber();\n\n  const bestPriceDecimal = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const worstPriceDecimal = priceLotsToDecimal(market, new BN(worstPrice.toString()));\n\n  const priceImpactPct = bestPriceDecimal.minus(worstPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  return {\n    side: 'sell',\n    notEnoughLiquidity: JSBI.greaterThan(JSBI.BigInt(coinIn), totalCoin),\n    minimum: {\n      in: JSBI.toNumber(baseSizeLots),\n      out: bestPriceDecimal\n        .mul(JSBI.toNumber(baseSizeLots))\n        .mul(1 - takerFeePct)\n        .floor()\n        .toNumber(),\n    },\n    inAmount: JSBI.toNumber(inAmount),\n    outAmount: pcOutInteger,\n    feeAmount: new Decimal(JSBI.toNumber(pcOut)).mul(takerFeePct).round().toNumber(),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function* getL2(orderbook: Orderbook): Generator<[JSBI, JSBI]> {\n  const descending = orderbook.isBids;\n  for (const { key, quantity } of orderbook.slab.items(descending)) {\n    const price = JSBI.BigInt(key.ushrn(64).toString());\n    yield [price, JSBI.BigInt(quantity.toString())];\n  }\n}\n\nfunction divideBnToDecimal(numerator: BN, denominator: BN): Decimal {\n  const quotient = new Decimal(numerator.div(denominator).toString());\n  const rem = numerator.umod(denominator);\n  const gcd = rem.gcd(denominator);\n  return quotient.add(new Decimal(rem.div(gcd).toString()).div(new Decimal(denominator.div(gcd).toString())));\n}\n\nfunction priceLotsToDecimal(market: Market, price: BN) {\n  // @ts-expect-error _decoded\n  const baseLotSize = market._decoded.baseLotSize;\n  if (baseLotSize.isZero()) return new Decimal(0);\n\n  return divideBnToDecimal(\n    // @ts-expect-error _decoded _baseSplTokenMultiplier is private\n    price.mul(market._decoded.quoteLotSize).mul(market._baseSplTokenMultiplier),\n    // @ts-expect-error _quoteSplTokenMultiplier is private\n    baseLotSize.mul(market._quoteSplTokenMultiplier),\n  );\n}\n","import { Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createSerumSwapInstruction } from '../jupiterInstruction';\nimport { SerumMarket } from '../market';\nimport { getL2, getOutAmountMeta } from './market';\n\nexport class SerumAmm implements Amm {\n  id: string;\n  label = 'Serum' as const;\n  shouldPrefetch = false;\n\n  private _orderbooks: { asks: Orderbook; bids: Orderbook } | undefined;\n\n  constructor(public market: SerumMarket) {\n    this.id = market.address.toBase58();\n  }\n\n  get orderbooks() {\n    return this._orderbooks;\n  }\n\n  static getL2 = getL2;\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.market.asksAddress, this.market.bidsAddress];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [asksAccountInfo, bidsAccountInfo] = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const asks = Orderbook.decode(this.market, asksAccountInfo.data);\n    const bids = Orderbook.decode(this.market, bidsAccountInfo.data);\n\n    this._orderbooks = {\n      asks,\n      bids,\n    };\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (!this.orderbooks) {\n      throw new Error('Failed to find orderbooks');\n    }\n\n    const outAmountMeta = getOutAmountMeta({\n      market: this.market,\n      asks: this.orderbooks.asks,\n      bids: this.orderbooks.bids,\n      fromMint: sourceMint,\n      toMint: destinationMint,\n      fromAmount: amount,\n    });\n\n    return {\n      notEnoughLiquidity: outAmountMeta.notEnoughLiquidity,\n      minInAmount: outAmountMeta.minimum.in,\n      minOutAmount: outAmountMeta.minimum.out,\n      inAmount: outAmountMeta.inAmount,\n      outAmount: outAmountMeta.outAmount,\n      feeAmount: outAmountMeta.feeAmount,\n      feeMint: this.market.quoteMintAddress.toBase58(),\n      feePct: outAmountMeta.feePct,\n      priceImpactPct: outAmountMeta.priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (!swapParams.openOrdersAddress) {\n      throw new Error('Missing open orders');\n    }\n\n    return [\n      createSerumSwapInstruction({\n        market: this.market,\n        openOrdersAddress: swapParams.openOrdersAddress,\n        referrer: swapParams?.quoteMintToReferrer?.get(this.market.quoteMintAddress.toBase58()),\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.market.baseMintAddress, this.market.quoteMintAddress];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { getTwoPermutations } from '../../utils/getTwoPermutations';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { RaydiumAmm } from '../raydium/raydiumAmm';\nimport { createRiskCheckAndFeeInstruction, createSetTokenLedgerInstruction } from '../jupiterInstruction';\nimport { SerumAmm } from '../serum/serumAmm';\nimport { SerumMarket } from '../market';\nimport { CykuraAmm } from '../cykura/cykuraAmm';\n\ninterface SplitSolution {\n  outAmount: number;\n  portion: number;\n  firstQuote: Quote | undefined;\n  secondQuote: Quote | undefined;\n}\n\nfunction isSplitSupported(firstAmm: Amm, secondAmm: Amm) {\n  if (\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm) ||\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm)\n  ) {\n    return false;\n  }\n  return true;\n}\n\nfunction requiresSplitSetup(firstAmm: Amm, secondAmm: Amm): boolean {\n  if (firstAmm instanceof RaydiumAmm || secondAmm instanceof RaydiumAmm) {\n    return true;\n  } else if (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm) {\n    return true;\n  }\n  return false;\n}\n\n// Create an iteration to quote with a stepped split\nexport class SplitTradeAmm implements Amm {\n  shouldSplitSetup: boolean;\n  market: SerumMarket | null;\n  shouldPrefetch = false;\n  private portion1: number = 0;\n  private portion2: number = 0;\n\n  constructor(private firstAmm: Amm, private secondAmm: Amm, public reserveTokenMints: PublicKey[]) {\n    this.shouldSplitSetup = requiresSplitSetup(firstAmm, secondAmm);\n    this.market =\n      firstAmm instanceof SerumAmm ? firstAmm.market : secondAmm instanceof SerumAmm ? secondAmm.market : null;\n  }\n\n  static create(firstAmm: Amm, secondAmm: Amm) {\n    if (!isSplitSupported(firstAmm, secondAmm)) return;\n\n    const firstAmmTwoPermutations = getTwoPermutations(firstAmm.reserveTokenMints);\n    const secondAmmTwoPermutations = getTwoPermutations(secondAmm.reserveTokenMints);\n\n    for (const firstAmmTwoPermutation of firstAmmTwoPermutations) {\n      for (const secondAmmTwoPermutation of secondAmmTwoPermutations) {\n        if (firstAmmTwoPermutation.every((value, index) => value.equals(secondAmmTwoPermutation[index]))) {\n          return new SplitTradeAmm(firstAmm, secondAmm, firstAmmTwoPermutation);\n        }\n      }\n    }\n  }\n\n  get id() {\n    return `${this.firstAmm.id}-${this.secondAmm.id}`;\n  }\n\n  get label() {\n    const labelWithPortions = [\n      { label: this.firstAmm.label, portion: this.portion1 },\n      { label: this.secondAmm.label, portion: this.portion2 },\n    ].sort((a, b) => b.portion - a.portion);\n\n    return labelWithPortions.map(({ label, portion }) => `${label} (${portion}%)`).join(' + ');\n  }\n\n  getAccountsForUpdate() {\n    return [];\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {\n    // Underlying amms are updated\n  }\n\n  getQuote(quoteParams: QuoteParams): Quote {\n    const sourceMintString = quoteParams.sourceMint.toBase58();\n    const amount = quoteParams.amount;\n    // Portion in % directly to please the UI\n    let bestSolution: SplitSolution = {\n      outAmount: 0,\n      portion: 0,\n      firstQuote: undefined,\n      secondQuote: undefined,\n    };\n\n    // Increase portion until 100\n    for (let p = 100; (p -= 5); p > 0) {\n      const firstAmount = Math.floor((amount * p) / 100);\n      const secondAmount = amount - firstAmount;\n\n      const firstQuote = this.firstAmm.getQuote({\n        ...quoteParams,\n        amount: firstAmount,\n      });\n      const secondQuote = this.secondAmm.getQuote({\n        ...quoteParams,\n        amount: secondAmount,\n      });\n      const outAmount = firstQuote.outAmount + secondQuote.outAmount;\n\n      if (outAmount < bestSolution.outAmount) {\n        break;\n      }\n\n      bestSolution = {\n        outAmount,\n        portion: p,\n        firstQuote,\n        secondQuote,\n      };\n    }\n\n    if (!bestSolution.firstQuote || !bestSolution.secondQuote) {\n      throw new Error('Unreachable: There was no better solution than getting 0 outAmount');\n    }\n\n    const { outAmount, portion, firstQuote, secondQuote } = bestSolution;\n    const portion1 = portion;\n    const portion2 = 100 - portion1;\n\n    // For UI display\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n\n    let firstAmmFee = {\n      amount: firstQuote.feeAmount,\n      mint: firstQuote.feeMint,\n    };\n    let secondAmmFee = {\n      amount: secondQuote.feeAmount,\n      mint: secondQuote.feeMint,\n    };\n\n    if (firstAmmFee.mint !== secondAmmFee.mint) {\n      // Then we convert destinationMint fee into a sourceMint, to please the current data structure\n      // This will lead to inexact fees but this doesn't affect the user minimum out amount\n      if (firstAmmFee.mint !== sourceMintString) {\n        firstAmmFee = {\n          amount: Math.floor((firstAmmFee.amount * amount * portion1) / 100 / bestSolution.outAmount),\n          mint: sourceMintString,\n        };\n      }\n      if (secondAmmFee.mint !== sourceMintString) {\n        secondAmmFee = {\n          amount: Math.floor((secondAmmFee.amount * amount * portion2) / 100 / bestSolution.outAmount),\n          mint: sourceMintString,\n        };\n      }\n    }\n\n    const feePct = (portion1 * firstQuote.feePct + portion2 * secondQuote.feePct) / 100;\n    const priceImpactPct = (portion1 * firstQuote.priceImpactPct + portion2 * secondQuote.priceImpactPct) / 100;\n\n    // Not sure about the relevance on minInAmount and minOutAmount in this case\n    const minInAmount =\n      firstQuote.minInAmount || secondQuote.minInAmount\n        ? (firstQuote.minInAmount ?? 0) + (secondQuote.minInAmount ?? 0)\n        : undefined;\n    const minOutAmount =\n      firstQuote.minOutAmount || secondQuote.minOutAmount\n        ? (firstQuote.minOutAmount ?? 0) + (secondQuote.minOutAmount ?? 0)\n        : undefined;\n    return {\n      notEnoughLiquidity: false,\n      inAmount: quoteParams.amount,\n      outAmount: outAmount,\n      minInAmount,\n      minOutAmount,\n      feeAmount: firstAmmFee.amount + secondAmmFee.amount,\n      feeMint: firstAmmFee.mint, // Guaranteed identical mint at this point\n      feePct,\n      priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const inAmount = swapParams.inAmount;\n    if (inAmount === null) {\n      throw new Error('Split trade cannot be used with a null inAmount');\n    }\n\n    // We rely on the fact that this.portion1 is set, what if it isn't?\n    const firstAmount = Math.floor((inAmount * this.portion1) / 100);\n    const secondAmount = inAmount - firstAmount;\n\n    return [\n      ...this.firstAmm.createSwapInstructions({\n        ...swapParams,\n        inAmount: firstAmount,\n        minimumOutAmount: 0,\n        platformFee: undefined,\n      }),\n      ...this.secondAmm.createSwapInstructions({\n        ...swapParams,\n        inAmount: secondAmount,\n        minimumOutAmount: 0,\n        platformFee: undefined,\n      }),\n      createRiskCheckAndFeeInstruction(\n        swapParams.userDestinationTokenAccount,\n        swapParams.userTransferAuthority,\n        swapParams.minimumOutAmount,\n        swapParams.tokenLedger,\n        swapParams.platformFee,\n      ),\n    ];\n  }\n}\n","import { Market as SerumMarket } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport { SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { Amm } from './amm';\n\nexport interface Fee {\n  amount: number;\n  mint: string;\n  pct: number;\n}\n\nexport { SerumMarket, StableSwap };\n\nexport interface MarketInfo {\n  amm: Amm; //name: string, // pair for serum, pool name for mer pool\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  minInAmount?: number;\n  minOutAmount?: number;\n  inAmount: number;\n  outAmount: number;\n  notEnoughLiquidity: boolean;\n  priceImpactPct: number;\n  lpFee: Fee;\n  platformFee: Fee;\n}\n\n// This is to check if the two markets are supported by the aggregator\nexport const isValidRoute = (ammA: Amm, ammB: Amm) => {\n  // dont match the same amm together\n  if (ammA.id === ammB.id) {\n    return false;\n  }\n  // don't show decimal as input or output\n  else if (ammA instanceof SaberAddDecimalsAmm && ammB instanceof SaberAddDecimalsAmm) {\n    return false;\n  } else if (ammA instanceof SplitTradeAmm || ammB instanceof SplitTradeAmm) {\n    return false;\n  }\n\n  return true;\n};\n\nexport function isSerumAndRaydium(marketInfos: MarketInfo[]) {\n  if (marketInfos.length < 2) return false;\n\n  const [firstAmm, secondAmm] = marketInfos.map((mi) => mi.amm);\n\n  return (\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm)\n  );\n}\n","import { StableSwap } from '@saberhq/stableswap-sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport { Fraction, ONE, Stable, TWO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createSaberSwapInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo } from '@solana/spl-token';\n\nexport class SaberAmm implements Amm {\n  id: string;\n  label = 'Saber' as const;\n  shouldPrefetch = false;\n  private tokenAccounts: AccountInfo[] = [];\n  private calculator: Stable;\n\n  constructor(private stableSwap: StableSwap) {\n    this.id = stableSwap.config.swapAccount.toBase58();\n    this.calculator = new Stable(\n      TWO,\n      JSBI.BigInt(this.stableSwap.state.targetAmpFactor.toString()),\n      [ONE, ONE], // TODO: How to get the token decimal?\n      new Fraction(this.stableSwap.state.fees.trade.numerator, this.stableSwap.state.fees.trade.denominator),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.stableSwap.state.tokenA.reserve, this.stableSwap.state.tokenB.reserve];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account data');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const feePct = new Decimal(this.stableSwap.state.fees.trade.asFraction.toFixed(4));\n\n    const [inputIndex, outputIndex] = this.tokenAccounts[0].mint.equals(sourceMint) ? [0, 1] : [1, 0];\n\n    const result = this.calculator.exchange(\n      tokenAccountsToJSBIs(this.tokenAccounts),\n      JSBI.BigInt(amount),\n      inputIndex,\n      outputIndex,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createSaberSwapInstruction({\n        stableSwap: this.stableSwap,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.stableSwap.state.tokenA.mint, this.stableSwap.state.tokenB.mint];\n  }\n}\n","import { u64 } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\nconst ZERO = new u64(0);\n\nexport class Percentage {\n  readonly numerator: u64;\n  readonly denominator: u64;\n\n  constructor(numerator: u64, denominator: u64) {\n    this.numerator = numerator;\n    this.denominator = denominator;\n  }\n\n  public static fromDecimal(number: Decimal): Percentage {\n    return Percentage.fromFraction(number.toDecimalPlaces(1).mul(10).toNumber(), 1000);\n  }\n\n  public static fromFraction(numerator: u64 | number, denominator: u64 | number): Percentage {\n    const num = typeof numerator === 'number' ? new u64(numerator.toString()) : numerator;\n    const denom = typeof denominator === 'number' ? new u64(denominator.toString()) : denominator;\n    return new Percentage(num, denom);\n  }\n\n  public toString = (): string => {\n    return `${this.numerator.toString()}/${this.denominator.toString()}`;\n  };\n\n  public toDecimal() {\n    if (this.denominator.eq(ZERO)) {\n      return new Decimal(0);\n    }\n    return new Decimal(this.numerator.toString()).div(new Decimal(this.denominator.toString()));\n  }\n\n  public add(p2: Percentage): Percentage {\n    const denomGcd = this.denominator.gcd(p2.denominator);\n    const denomLcm = this.denominator.div(denomGcd).mul(p2.denominator);\n\n    const p1DenomAdjustment = denomLcm.div(this.denominator);\n    const p2DenomAdjustment = denomLcm.div(p2.denominator);\n\n    const p1NumeratorAdjusted = this.numerator.mul(p1DenomAdjustment);\n    const p2NumeratorAdjusted = p2.numerator.mul(p2DenomAdjustment);\n\n    const newNumerator = p1NumeratorAdjusted.add(p2NumeratorAdjusted);\n\n    return new Percentage(new u64(newNumerator.toString()), new u64(denomLcm.toString()));\n  }\n}\n","import { struct, blob, u8, Structure } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { ALDRIN_SWAP_V2_PROGRAM_ID } from '../../constants';\nimport { publicKey, rustEnum, uint64 } from '../../utils/layout';\nimport { Percentage } from './percentage';\n\ntype FeeStructure = {\n  traderFee: Percentage;\n  ownerFee: Percentage;\n};\n\ninterface FeeLayout {\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n}\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/78527e3adfc02e186956f420b5083fa0950e7263/src/pools/layout.ts\nconst FEES_LAYOUT = struct<FeeLayout>(\n  [\n    uint64('tradeFeeNumerator'),\n    uint64('tradeFeeDenominator'),\n    uint64('ownerTradeFeeNumerator'),\n    uint64('ownerTradeFeeDenominator'),\n    uint64('ownerWithdrawFeeNumerator'),\n    uint64('ownerWithdrawFeeDenominator'),\n  ],\n  'fees',\n);\n\nconst POOL_FIELDS_COMMON = [\n  blob(8, 'padding'),\n  publicKey('lpTokenFreezeVault'),\n  publicKey('poolMint'),\n  publicKey('baseTokenVault'),\n  publicKey('baseTokenMint'),\n  publicKey('quoteTokenVault'),\n  publicKey('quoteTokenMint'),\n  publicKey('poolSigner'),\n  u8('poolSignerNonce'),\n  publicKey('authority'),\n  publicKey('initializerAccount'),\n  publicKey('feeBaseAccount'),\n  publicKey('feeQuoteAccount'),\n  publicKey('feePoolTokenAccount'),\n  FEES_LAYOUT,\n];\n\ninterface PoolLayout {\n  padding: any;\n  lpTokenFreezeVault: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  poolSignerNonce: number;\n  authority: PublicKey;\n  initializerAccount: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeLayout;\n}\n\nexport const POOL_LAYOUT = struct<PoolLayout>(POOL_FIELDS_COMMON);\n\ninterface PoolV2Layout extends PoolLayout {\n  curveType: number;\n  curve: PublicKey;\n}\n\nexport const POOL_V2_LAYOUT = struct<PoolV2Layout>([...POOL_FIELDS_COMMON, u8('curveType'), publicKey('curve')]);\n\ninterface StableCurveLayout {\n  padding: any;\n  amp: u64;\n}\n\nexport const STABLE_CURVE_LAYOUT = struct<StableCurveLayout>([blob(8, 'padding'), uint64('amp')]);\n\ninterface SwapInstructionLayout {\n  instruction: any;\n  tokens: u64;\n  minTokens: u64;\n  side: 'bid' | 'ask';\n}\n\nexport const SWAP_INSTRUCTION_LAYOUT = struct<SwapInstructionLayout>([\n  blob(8, 'instruction'),\n  uint64('tokens'),\n  uint64('minTokens'),\n  rustEnum([new Structure([], 'bid'), new Structure([], 'ask')], 'side'),\n]);\n\nexport function accountInfoToAldrinPoolState(address: PublicKey, accountInfo: AccountInfo<Buffer>): AldrinPoolState {\n  const isV2 = accountInfo.owner.equals(ALDRIN_SWAP_V2_PROGRAM_ID) ? true : false;\n\n  const decoded: PoolV2Layout | PoolLayout = (isV2 ? POOL_V2_LAYOUT : POOL_LAYOUT).decode(accountInfo.data) as\n    | PoolV2Layout\n    | PoolLayout;\n\n  const curveObject = 'curveType' in decoded ? { curveType: decoded.curveType, curve: decoded.curve } : {};\n\n  return {\n    isV2,\n    address,\n    poolMint: decoded.poolMint,\n    baseTokenVault: decoded.baseTokenVault,\n    baseTokenMint: decoded.baseTokenMint,\n    quoteTokenVault: decoded.quoteTokenVault,\n    quoteTokenMint: decoded.quoteTokenMint,\n    poolSigner: decoded.poolSigner,\n    feeBaseAccount: decoded.feeBaseAccount,\n    feeQuoteAccount: decoded.feeQuoteAccount,\n    feePoolTokenAccount: decoded.feePoolTokenAccount,\n    fees: {\n      traderFee: Percentage.fromFraction(decoded.fees.tradeFeeNumerator, decoded.fees.tradeFeeDenominator),\n      ownerFee: Percentage.fromFraction(decoded.fees.ownerTradeFeeNumerator, decoded.fees.ownerTradeFeeDenominator),\n    },\n    ...curveObject,\n  };\n}\n\nexport interface AldrinPoolState {\n  isV2: Boolean;\n  address: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeStructure;\n  curveType?: number;\n  curve?: PublicKey;\n}\n","import { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createAldrinSwapInstruction, createAldrinV2SwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToAldrinPoolState, AldrinPoolState, STABLE_CURVE_LAYOUT } from './poolState';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\ninterface AldrinParams {\n  amp?: number;\n}\n\nexport class AldrinAmm implements Amm {\n  id: string;\n  label = 'Aldrin' as const;\n  shouldPrefetch = false;\n  poolState: AldrinPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: AldrinParams) {\n    this.poolState = accountInfoToAldrinPoolState(address, accountInfo);\n    this.id = address.toBase58();\n\n    if (this.poolState.curveType === 1) {\n      const { amp } = this.params;\n      if (!amp) {\n        throw new Error('Amp is required for a stable curve');\n      }\n\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(amp),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    }\n  }\n\n  static accountInfoToAldrinPoolState = accountInfoToAldrinPoolState;\n\n  static decodeStableCurveAmp(accountInfo: AccountInfo<Buffer>) {\n    const { amp } = STABLE_CURVE_LAYOUT.decode(accountInfo.data);\n\n    return amp.toNumber() * 2; // times two for their AMP, dont ask me why, it is what it is\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.quoteTokenVault, this.poolState.baseTokenVault];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) throw new Error('Invalid token account');\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.poolState.fees.traderFee.numerator.toString())\n      .div(this.poolState.fees.traderFee.denominator.toString())\n      .add(\n        new Decimal(this.poolState.fees.ownerFee.numerator.toString()).div(\n          this.poolState.fees.ownerFee.denominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), JSBI.BigInt(amount), outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    if (this.poolState.isV2) {\n      if (!this.poolState.curve) {\n        throw new Error('Unable to fetch curve account.');\n      }\n\n      const curve = this.poolState.curve;\n      return [\n        createAldrinV2SwapInstruction({\n          poolState: this.poolState,\n          curve,\n          ...swapParams,\n        }),\n      ];\n    }\n\n    return [\n      createAldrinSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.baseTokenMint, this.poolState.quoteTokenMint];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\n\nexport const STEP_TOKEN_SWAP_PROGRAM_ID = new PublicKey('SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1');\n\nexport const PROGRAM_ID_TO_LABEL = new Map<string, string>([\n  ['9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP', 'Orca'],\n  [STEP_TOKEN_SWAP_PROGRAM_ID.toBase58(), 'Step'],\n  ['PSwapMdSai8tjrEXcxFeQth87xC4rRsa4VA5mhGhXkP', 'Penguin'],\n  ['SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr', 'Saros'],\n]);\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { struct, u8, blob } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from './splTokenSwapPools';\n\ninterface TokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  bumpSeed: number;\n  tokenProgramId: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenPool: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  feeAccount: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  hostFeeNumerator: u64;\n  hostFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst TokenSwapLayout = struct<TokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  uint64('hostFeeNumerator'),\n  uint64('hostFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\ninterface StepTokenSwapLayout extends TokenSwapLayout {\n  poolNonce: u64;\n}\n\nconst StepTokenSwapLayout = struct<StepTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n  u8('poolNonce'),\n]);\n\nexport interface TokenSwapState {\n  address: PublicKey;\n  programId: PublicKey;\n  tokenProgramId: PublicKey;\n  poolToken: PublicKey;\n  feeAccount: PublicKey;\n  authority: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n  poolNonce?: u64;\n}\n\nexport function accountInfoToTokenSwapState(\n  address: PublicKey,\n  tokenSwapAccountInfo: AccountInfo<Buffer>,\n): TokenSwapState {\n  const programId = tokenSwapAccountInfo.owner;\n\n  // The layout difference only affects fields we do not actively use\n  const tokenSwapData = (\n    programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID)\n      ? StepTokenSwapLayout.decode(tokenSwapAccountInfo.data)\n      : TokenSwapLayout.decode(tokenSwapAccountInfo.data)\n  ) as TokenSwapLayout | StepTokenSwapLayout;\n\n  if (!tokenSwapData.isInitialized) {\n    throw new Error(`Invalid token swap state`);\n  }\n\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  const poolToken = new PublicKey(tokenSwapData.tokenPool);\n  const feeAccount = new PublicKey(tokenSwapData.feeAccount);\n  const tokenAccountA = new PublicKey(tokenSwapData.tokenAccountA);\n  const tokenAccountB = new PublicKey(tokenSwapData.tokenAccountB);\n  const mintA = new PublicKey(tokenSwapData.mintA);\n  const mintB = new PublicKey(tokenSwapData.mintB);\n  const tokenProgramId = new PublicKey(tokenSwapData.tokenProgramId);\n\n  const tradeFeeNumerator = tokenSwapData.tradeFeeNumerator;\n  const tradeFeeDenominator = tokenSwapData.tradeFeeDenominator;\n  const ownerTradeFeeNumerator = tokenSwapData.ownerTradeFeeNumerator;\n  const ownerTradeFeeDenominator = tokenSwapData.ownerTradeFeeDenominator;\n  const ownerWithdrawFeeNumerator = tokenSwapData.ownerWithdrawFeeNumerator;\n  const ownerWithdrawFeeDenominator = tokenSwapData.ownerWithdrawFeeDenominator;\n\n  const curveType = tokenSwapData.curveType;\n  const curveParameters = tokenSwapData.curveParameters;\n\n  const poolNonce = 'poolNonce' in tokenSwapData ? tokenSwapData.poolNonce : undefined;\n\n  return {\n    address,\n    programId,\n    tokenProgramId,\n    poolToken,\n    feeAccount,\n    authority,\n    tokenAccountA,\n    tokenAccountB,\n    mintA,\n    mintB,\n    tradeFeeNumerator,\n    tradeFeeDenominator,\n    ownerTradeFeeNumerator,\n    ownerTradeFeeDenominator,\n    ownerWithdrawFeeNumerator,\n    ownerWithdrawFeeDenominator,\n    curveType,\n    curveParameters,\n    poolNonce,\n  };\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  SwapParams,\n  tokenAccountsToJSBIs,\n} from '../amm';\nimport { createTokenSwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToTokenSwapState, TokenSwapState } from './tokenSwapLayout';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from './splTokenSwapPools';\n\nenum CurveType {\n  ConstantProduct = 0,\n  Stable = 2,\n}\n\n// Abstract any SPL token swap based AMM\nexport class SplTokenSwapAmm implements Amm {\n  id: string;\n  shouldPrefetch = false;\n  private tokenSwapState: TokenSwapState;\n  private curveType: CurveType;\n\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, swapStateAccountInfo: AccountInfo<Buffer>, public label: string) {\n    this.id = address.toBase58();\n    this.tokenSwapState = accountInfoToTokenSwapState(address, swapStateAccountInfo);\n\n    this.curveType = this.tokenSwapState.curveType;\n\n    if (!(this.curveType in CurveType)) {\n      throw new Error(`curveType ${this.tokenSwapState.curveType} is not supported`);\n    }\n\n    if (this.tokenSwapState.curveType === CurveType.ConstantProduct) {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(this.tokenSwapState.curveParameters[0]),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    }\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.tokenSwapState.tokenAccountA, this.tokenSwapState.tokenAccountB];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.tokenSwapState.tradeFeeNumerator.toString())\n      .div(this.tokenSwapState.tradeFeeDenominator.toString())\n      .add(\n        new Decimal(this.tokenSwapState.ownerTradeFeeNumerator.toString()).div(\n          this.tokenSwapState.ownerTradeFeeDenominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(\n      tokenAccountsToJSBIs(this.tokenAccounts),\n      JSBI.BigInt(Math.floor(amount)),\n      outputIndex,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createTokenSwapInstruction({\n        tokenSwapState: this.tokenSwapState,\n        ...swapParams,\n        isStep: this.tokenSwapState.programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID),\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.tokenSwapState.mintA, this.tokenSwapState.mintB];\n  }\n}\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { struct, u8, u32 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { uint64, publicKey } from '../../utils/layout';\n\nexport const FEE_DENOMINATOR = Math.pow(10, 10);\n\ninterface MercurialSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  amplificationCoefficient: u64;\n  feeNumerator: u64;\n  adminFeeNumerator: u64;\n  tokenAccountsLength: number;\n  precisionFactor: u64;\n  precisionMultiplierA: u64;\n  precisionMultiplierB: u64;\n  precisionMultiplierC: u64;\n  precisionMultiplierD: u64;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenAccountC: PublicKey;\n  tokenAccountD: PublicKey;\n}\n\nexport const MercurialSwapLayout = struct<MercurialSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  uint64('amplificationCoefficient'),\n  uint64('feeNumerator'),\n  uint64('adminFeeNumerator'),\n  u32('tokenAccountsLength'),\n  uint64('precisionFactor'),\n  uint64('precisionMultiplierA'),\n  uint64('precisionMultiplierB'),\n  uint64('precisionMultiplierC'),\n  uint64('precisionMultiplierD'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenAccountC'),\n  publicKey('tokenAccountD'),\n]);\n\nexport interface MercurialSwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  amplificationCoefficient: number;\n  feeNumerator: number;\n  tokenAccountsLength: number;\n  precisionFactor: number;\n  precisionMultipliers: number[];\n  tokenAccounts: PublicKey[];\n}\n\nexport const accountInfoToMercurialSwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): MercurialSwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = MercurialSwapLayout.decode(accountInfo.data);\n  const tokenAccountsLength = decoded.tokenAccountsLength;\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  const precisionMultipliers = [\n    decoded.precisionMultiplierA.toNumber(),\n    decoded.precisionMultiplierB.toNumber(),\n    decoded.precisionMultiplierC.toNumber(),\n    decoded.precisionMultiplierD.toNumber(),\n  ].slice(0, tokenAccountsLength);\n\n  const tokenAccounts = [\n    decoded.tokenAccountA,\n    decoded.tokenAccountB,\n    decoded.tokenAccountC,\n    decoded.tokenAccountD,\n  ].slice(0, tokenAccountsLength);\n\n  return {\n    programId,\n    authority,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    amplificationCoefficient: decoded.amplificationCoefficient.toNumber(),\n    feeNumerator: decoded.feeNumerator.toNumber(),\n    tokenAccountsLength,\n    precisionFactor: decoded.precisionFactor.toNumber(),\n    precisionMultipliers,\n    tokenAccounts,\n  };\n};\n","import { Fraction, Stable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createMercurialExchangeInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { accountInfoToMercurialSwapLayout, FEE_DENOMINATOR, MercurialSwapLayoutState } from './swapLayout';\n\ninterface MercurialParams {\n  tokenMints: string[];\n}\n\nexport class MercurialAmm implements Amm {\n  id: string;\n  label = 'Mercurial';\n  shouldPrefetch = false;\n  swapLayout: MercurialSwapLayoutState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: Stable;\n\n  static decodeSwapLayout = accountInfoToMercurialSwapLayout;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: MercurialParams) {\n    this.id = address.toBase58();\n    this.swapLayout = accountInfoToMercurialSwapLayout(address, accountInfo);\n    this.calculator = new Stable(\n      JSBI.BigInt(this.swapLayout.tokenAccountsLength),\n      JSBI.BigInt(this.swapLayout.amplificationCoefficient),\n      this.swapLayout.precisionMultipliers.map((precisionMultiplier) => JSBI.BigInt(precisionMultiplier)),\n      new Fraction(JSBI.BigInt(this.swapLayout.feeNumerator), JSBI.BigInt(FEE_DENOMINATOR)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return this.swapLayout.tokenAccounts;\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos\n      .map((info) => deserializeAccount(info.data))\n      .filter((x): x is TokenAccountInfo => x !== null);\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const inputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(sourceMint));\n    const outputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(destinationMint));\n    const result = this.calculator.exchange(\n      tokenAccountsToJSBIs(this.tokenAccounts),\n      JSBI.BigInt(amount),\n      inputIndex,\n      outputIndex,\n    );\n\n    const feePct = this.swapLayout.feeNumerator / FEE_DENOMINATOR;\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createMercurialExchangeInstruction({\n        swapLayout: this.swapLayout,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return this.params.tokenMints.map((tokenMint) => new PublicKey(tokenMint));\n  }\n}\n","import { Fraction, TokenSwapConstantProduct } from '@jup-ag/math';\nimport { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createCropperSwapInstruction } from '../jupiterInstruction';\n\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport {\n  accountInfoToCropperPoolState,\n  CropperPoolState,\n  stateAccountInfoToCropperState,\n  CROPPER_STATE_ADDRESS,\n} from './swapLayout';\nimport Decimal from 'decimal.js';\n\ninterface CropperParams {\n  tokenAFeeAccount: PublicKey;\n  tokenBFeeAccount: PublicKey;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n}\n\nexport class CropperAmm implements Amm {\n  id: string;\n  label = 'Cropper' as const;\n  shouldPrefetch = false;\n  poolState: CropperPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: TokenSwapConstantProduct;\n  private feePct: Decimal;\n\n  // Hardcoded because no where to query this\n  static async getStateFromStateAccount(connection: Connection) {\n    const accountInfo = await connection.getAccountInfo(CROPPER_STATE_ADDRESS);\n\n    if (!accountInfo) {\n      throw new Error('State account not found');\n    }\n\n    return stateAccountInfoToCropperState(accountInfo);\n  }\n\n  static decodePoolState = accountInfoToCropperPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: CropperParams) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToCropperPoolState(address, accountInfo);\n\n    this.feePct = new Decimal(this.params.fixedFeeNumerator)\n      .div(this.params.feeDenominator)\n      .add(new Decimal(this.params.returnFeeNumerator).div(this.params.feeDenominator));\n\n    this.params.tokenAFeeAccount = new PublicKey(this.params.tokenAFeeAccount);\n    this.params.tokenBFeeAccount = new PublicKey(this.params.tokenBFeeAccount);\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(this.params.fixedFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n      new Fraction(JSBI.BigInt(this.params.returnFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.tokenAAccount, this.poolState.tokenBAccount];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), JSBI.BigInt(amount), outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const feeAccount = swapParams.sourceMint.equals(this.poolState.mintA)\n      ? this.params.tokenAFeeAccount\n      : this.params.tokenBFeeAccount;\n\n    return [\n      createCropperSwapInstruction({\n        poolState: this.poolState,\n        feeAccount,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { TokenSwapAccountLayout } from '@jup-ag/crema-sdk';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\n\nexport interface CremaPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  ticksKey: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  fee: Decimal;\n  currentSqrtPrice: Decimal;\n  currentLiquity: Decimal;\n}\n\nexport const accountInfoToCremaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): CremaPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = TokenSwapAccountLayout.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.swapTokenA,\n    tokenBAccount: decoded.swapTokenB,\n    ticksKey: decoded.ticksKey,\n    mintA: decoded.tokenAMint,\n    mintB: decoded.tokenBMint,\n    fee: decoded.fee,\n    currentSqrtPrice: decoded.currentSqrtPrice,\n    currentLiquity: decoded.currentLiquity,\n  };\n};\n","import { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { accountInfoToCremaPoolState, CremaPoolState } from './swapLayout';\nimport { createCremaSwapInstruction } from '../jupiterInstruction';\nimport { calculateSwapA2B, calculateSwapB2A, parseTicksAccount, Tick } from '@jup-ag/crema-sdk';\nimport Decimal from 'decimal.js';\n\nexport class CremaAmm implements Amm {\n  id: string;\n  label = 'Crema';\n  shouldPrefetch = false;\n  private ticks: Tick[] | undefined;\n  private poolState: CremaPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.poolState = accountInfoToCremaPoolState(address, accountInfo);\n    this.id = address.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.ammId, this.poolState.ticksKey];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [tokenSwapAccountInfo, ticksAccountInfo] = mapAddressToAccountInfos(\n      accountInfoMap,\n      this.getAccountsForUpdate(),\n    );\n\n    this.poolState = accountInfoToCremaPoolState(this.poolState.ammId, tokenSwapAccountInfo);\n\n    const ticksInfo = parseTicksAccount(this.poolState.ticksKey, ticksAccountInfo);\n    if (!ticksInfo) throw new Error(`Ticks account invalid: ${this.poolState.ticksKey.toBase58()}`);\n    this.ticks = ticksInfo.data.ticks;\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    // Crema SDK doesn't support 0 amount input\n    if (amount === 0) {\n      return {\n        notEnoughLiquidity: false,\n        inAmount: amount,\n        outAmount: 0,\n        feeAmount: 0,\n        feeMint: sourceMint.toBase58(),\n        feePct: this.poolState.fee.toNumber(),\n        priceImpactPct: 0,\n      };\n    }\n\n    const result = this.poolState.mintA.equals(sourceMint)\n      ? this.preSwapA(new Decimal(amount))\n      : this.preSwapB(new Decimal(amount));\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.amountOut.toNumber(),\n      feeAmount: result.feeUsed.toNumber(),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.poolState.fee.toNumber(),\n      priceImpactPct: result.impact.toNumber(),\n    };\n  }\n\n  preSwapA(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    let result = calculateSwapA2B(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    let currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    let transactionPriceA = result.amountOut.div(result.amountUsed);\n    let impact = transactionPriceA.sub(currentPriceA).div(currentPriceA).abs();\n\n    return {\n      ...result,\n      impact,\n    };\n  }\n\n  preSwapB(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    let result = calculateSwapB2A(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    let currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    let currentPriceB = new Decimal(1).div(currentPriceA);\n    let transactionPriceB = result.amountOut.div(result.amountUsed);\n    let impact = transactionPriceB.sub(currentPriceB).div(currentPriceB).abs();\n\n    return {\n      ...result,\n      impact,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createCremaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { struct, u8, Layout, blob } from '@solana/buffer-layout';\nimport { PublicKey, AccountInfo } from '@solana/web3.js';\nimport { u64 } from '@solana/spl-token';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface SenchaSwapLayout {\n  discriminator: any;\n  factory: PublicKey;\n  bump: number;\n  index: u64;\n  admin: PublicKey;\n  token0Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Reserves: PublicKey;\n  token1Mint: PublicKey;\n  token1Fees: PublicKey;\n  isPaused: number;\n  poolMint: PublicKey;\n  tradeFeeKbps: u64;\n  withdrawFeeKbps: u64;\n  adminTradeFeeKbps: u64;\n  adminWithdrawFeeKbps: u64;\n}\n\nexport const SenchaSwapLayout = struct<SenchaSwapLayout>([\n  blob(8, 'discriminator'),\n  publicKey('factory'),\n  u8('bump'),\n  uint64('index'),\n  publicKey('admin'),\n  publicKey('token0Reserves'),\n  publicKey('token0Mint'),\n  publicKey('token0Fees'),\n  publicKey('token1Reserves'),\n  publicKey('token1Mint'),\n  publicKey('token1Fees'),\n  u8('isPaused'),\n  publicKey('poolMint'),\n  uint64('tradeFeeKbps'),\n  uint64('withdrawFeeKbps'),\n  uint64('adminTradeFeeKbps'),\n  uint64('adminWithdrawFeeKbps'),\n]);\n\nexport interface SenchaPoolState {\n  programId: PublicKey;\n  isPaused: boolean;\n  bump: number;\n  ammId: PublicKey;\n  token0Reserves: PublicKey;\n  token1Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token1Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Fees: PublicKey;\n  poolMint: PublicKey;\n  tradeFeeKbps: number;\n}\n\nexport const accountInfoToSenchaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): SenchaPoolState => {\n  const programId = accountInfo.owner;\n  const decoded = SenchaSwapLayout.decode(accountInfo.data);\n\n  return {\n    programId,\n    isPaused: Boolean(decoded.isPaused),\n    bump: decoded.bump,\n    ammId: address,\n    token0Reserves: decoded.token0Reserves,\n    token1Reserves: decoded.token1Reserves,\n    token0Mint: decoded.token0Mint,\n    token1Mint: decoded.token1Mint,\n    token0Fees: decoded.token0Fees,\n    token1Fees: decoded.token1Fees,\n    poolMint: decoded.poolMint,\n    tradeFeeKbps: decoded.tradeFeeKbps.toNumber(),\n  };\n};\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { accountInfoToSenchaPoolState, SenchaPoolState } from './swapLayout';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { createSenchaSwapInstruction } from '../jupiterInstruction';\nimport { Fraction, TokenSwapConstantProduct, ZERO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\n\nexport class SenchaAmm implements Amm {\n  id: string;\n  label = 'Sencha' as const;\n  shouldPrefetch = false;\n  poolState: SenchaPoolState;\n  private calculator: TokenSwapConstantProduct;\n  private tokenAccounts: TokenAccountInfo[] = [];\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToSenchaPoolState(address, accountInfo);\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(\n        JSBI.BigInt(this.poolState.tradeFeeKbps),\n        JSBI.BigInt(10000000), // 100% = 10000000kbps\n      ),\n      new Fraction(ZERO, ZERO),\n      false,\n    );\n  }\n\n  get isPaused() {\n    return this.poolState.isPaused;\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.token0Reserves, this.poolState.token1Reserves];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), JSBI.BigInt(amount), outputIndex);\n\n    let feePct = this.poolState.tradeFeeKbps / 10000000; // 100% kbps\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(result.expectedOutputAmount),\n      feeAmount: JSBI.toNumber(result.fees),\n      feeMint: sourceMint.toBase58(),\n      feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createSenchaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0Mint, this.poolState.token1Mint];\n  }\n}\n","import { getCurveAmount, getParsedData, IAmmData, ICurveAmount, IPoolInfo, TradeDirection } from '@jup-ag/lifinity-sdk';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { accountInfoLifinitySwapLayout, LifinitySwapLayoutState, swapStateToPoolInfo } from './swapLayout';\nimport { createLifinitySwapInstruction } from '../jupiterInstruction';\nimport Decimal from 'decimal.js';\n\nexport class LifinityAmm implements Amm {\n  id: string;\n  label = 'Lifinity' as const;\n  shouldPrefetch = false;\n  private swapState: LifinitySwapLayoutState;\n  private poolInfo: IPoolInfo;\n  private accountInfos: Array<{ publicKey: PublicKey; account: AccountInfo<Buffer> }> = [];\n\n  constructor(address: PublicKey, private ammAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.swapState = accountInfoLifinitySwapLayout(address, ammAccountInfo);\n    this.poolInfo = swapStateToPoolInfo(this.swapState);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.swapState.poolCoinTokenAccount,\n      this.swapState.poolPcTokenAccount,\n      this.swapState.configAccount,\n      this.swapState.pythAccount,\n      this.swapState.pythPcAccount,\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    this.getAccountsForUpdate().forEach((publicKey, idx) => {\n      const account = accountInfoMap.get(publicKey.toBase58());\n      if (account) {\n        this.accountInfos[idx] = {\n          publicKey,\n          account,\n        };\n      }\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.accountInfos.length !== this.getAccountsForUpdate().length) {\n      throw new Error('Accounts not loaded');\n    }\n\n    const tradeDirection = this.swapState.poolCoinMint.equals(sourceMint) ? TradeDirection.AtoB : TradeDirection.BtoA;\n    const { amm, pyth, pythPc, fees, coinBalance, pcBalance, config }: IAmmData = getParsedData(\n      [{ publicKey: this.swapState.amm, account: this.ammAccountInfo }, ...this.accountInfos],\n      this.poolInfo,\n    );\n\n    if (\n      !pyth.status.equals(1) ||\n      // pythPc can be undefined from the lifinity SDK\n      (pythPc && !pythPc.status.equals(1))\n    ) {\n      throw new Error('Pyth accounts are outdated');\n    }\n\n    const amountIn = new Decimal(amount);\n    const result: ICurveAmount = getCurveAmount(\n      amountIn,\n      pyth.publishSlot.toNumber(), // Use pyth publish slot to not throw error\n      amm,\n      fees,\n      coinBalance,\n      pcBalance,\n      config,\n      pyth,\n      pythPc,\n      tradeDirection,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.amountSwapped.toNumber(),\n      feeAmount: result.fee.toNumber(),\n      feeMint: sourceMint.toBase58(),\n      feePct: result.feePercent.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createLifinitySwapInstruction({\n        swapState: this.swapState,\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.swapState.poolCoinMint, this.swapState.poolPcMint];\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { LIFINITY_AMM_LAYOUT, IPoolInfo } from '@jup-ag/lifinity-sdk';\n\nexport interface LifinitySwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  amm: PublicKey;\n  tokenAMint: PublicKey;\n  tokenBMint: PublicKey;\n  poolMint: PublicKey;\n  feeAccount: PublicKey;\n  pythAccount: PublicKey;\n  pythPcAccount: PublicKey;\n  configAccount: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolCoinMint: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  poolPcMint: PublicKey;\n}\n\nexport const swapStateToPoolInfo = (state: LifinitySwapLayoutState): IPoolInfo => {\n  return {\n    amm: state.amm.toBase58(),\n    configAccount: state.configAccount.toBase58(),\n    feeAccount: state.feeAccount.toBase58(),\n    pythAccount: state.pythAccount.toBase58(),\n    pythPcAccount: state.pythPcAccount.toBase58(),\n    poolCoinMint: state.poolCoinMint.toBase58(),\n    poolCoinTokenAccount: state.poolCoinTokenAccount.toBase58(),\n    poolMint: state.poolMint.toBase58(),\n    // We don't use decimals at the moment, so default to 0, if we need to use it later, we can add it from API\n    poolCoinDecimal: 0,\n    poolPcDecimal: 0,\n    poolPcTokenAccount: state.poolPcTokenAccount.toBase58(),\n    poolPcMint: state.poolPcMint.toBase58(),\n  };\n};\n\nexport const accountInfoLifinitySwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): LifinitySwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = LIFINITY_AMM_LAYOUT.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    amm: address,\n    tokenAMint: decoded.tokenAMint,\n    tokenBMint: decoded.tokenBMint,\n    poolMint: decoded.poolMint,\n    feeAccount: decoded.poolFeeAccount,\n    pythAccount: decoded.pythAccount,\n    pythPcAccount: decoded.pythPcAccount,\n    configAccount: decoded.configAccount,\n    poolCoinTokenAccount: decoded.tokenAAccount,\n    poolCoinMint: decoded.tokenAMint,\n    poolPcTokenAccount: decoded.tokenBAccount,\n    poolPcMint: decoded.tokenBMint,\n  };\n};\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createWhirlpoolSwapInstruction } from '../jupiterInstruction';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { WHIRLPOOL_PROGRAM_ID } from '../../constants';\nimport {\n  parseWhirlpool,\n  parseTickArray,\n  WhirlpoolData,\n  getSwapQuote,\n  getTickArrayPks,\n  TickArrayData,\n  getTickArrayPublicKeysForSwap,\n} from '@jup-ag/whirlpool-sdk';\nimport BN from 'bn.js';\n\nconst FEE_RATE_MUL_VALUE = 1_000_000;\n\nfunction fromX64(num: BN): Decimal {\n  return new Decimal(num.toString()).mul(Decimal.pow(2, -64));\n}\n\nfunction parseWhirlpoolSafe(address: PublicKey, data: Buffer) {\n  const whirlpoolData = parseWhirlpool(data);\n  if (!whirlpoolData) throw new Error(`Failed to parse whilpool ${address.toBase58()}`);\n  return whirlpoolData;\n}\n\nexport class WhirlpoolAmm implements Amm {\n  id: string;\n  label = 'Orca (Whirlpool)';\n  shouldPrefetch = true;\n\n  private whirlpoolData: WhirlpoolData;\n  private tickArrays: Map<string, TickArrayData> = new Map();\n  private tickPks: PublicKey[];\n  private oracle: PublicKey;\n  private feePct: number;\n\n  constructor(private address: PublicKey, whirlpoolAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.whirlpoolData = parseWhirlpoolSafe(address, whirlpoolAccountInfo.data);\n\n    this.oracle = findProgramAddressSync([Buffer.from('oracle'), address.toBuffer()], WHIRLPOOL_PROGRAM_ID)[0];\n    this.feePct = new Decimal(this.whirlpoolData.feeRate).div(FEE_RATE_MUL_VALUE).toNumber();\n    this.tickPks = getTickArrayPks(address, this.whirlpoolData);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    // The tickCurrentIndex is technically behind here, belonging to the last refresh\n    return [this.address, ...this.tickPks];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const whirlpoolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!whirlpoolAccountInfo) throw new Error(`Missing ${this.address.toBase58()}`);\n    this.whirlpoolData = parseWhirlpoolSafe(this.address, whirlpoolAccountInfo.data);\n    this.tickPks = getTickArrayPks(this.address, this.whirlpoolData);\n\n    this.tickArrays.clear();\n    for (const tickArrayPk of this.tickPks) {\n      const tickArrayAddress = tickArrayPk.toBase58();\n      const tickArrayAccountInfo = accountInfoMap.get(tickArrayAddress);\n      if (!tickArrayAccountInfo) {\n        // This can happen if we reach an uninitialized tick, and it is likely to occur right now\n        continue;\n      }\n      const tickArray = parseTickArray(tickArrayAccountInfo.data);\n      if (!tickArray) throw new Error(`Could not parse tick array ${tickArrayAddress}`);\n      this.tickArrays.set(tickArrayAddress, tickArray);\n    }\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const swapQuote = getSwapQuote({\n      poolAddress: this.address,\n      whirlpool: this.whirlpoolData,\n      tickArrays: this.tickArrays,\n      tokenMint: sourceMint,\n      tokenAmount: new BN(amount.toString()),\n      isInput: true,\n      // slippageTolerance,\n    });\n\n    const inAmount = Number(swapQuote.amountIn.toString());\n    const feeAmount = Math.floor(this.feePct * inAmount);\n\n    const quotePrice = swapQuote.aToB\n      ? new Decimal(swapQuote.amountOut.toString()).div(swapQuote.amountIn.toString())\n      : new Decimal(swapQuote.amountIn.toString()).div(swapQuote.amountOut.toString());\n\n    const currentPrice = fromX64(this.whirlpoolData.sqrtPrice).pow(2);\n    const priceImpactPct = currentPrice.minus(quotePrice).div(currentPrice).abs().toNumber();\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount,\n      outAmount: Number(swapQuote.amountOut.toString()),\n      feeAmount,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct,\n      priceImpactPct: Number(priceImpactPct),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const aToB = swapParams.sourceMint.equals(this.whirlpoolData.tokenMintA);\n\n    const [tickArray0, tickArray1, tickArray2] = getTickArrayPublicKeysForSwap(\n      this.whirlpoolData.tickCurrentIndex,\n      this.whirlpoolData.sqrtPrice,\n      this.whirlpoolData.tickSpacing,\n      this.address,\n      this.tickArrays,\n      WHIRLPOOL_PROGRAM_ID,\n      aToB,\n    );\n\n    return [\n      createWhirlpoolSwapInstruction({\n        additionalArgs: {\n          aToB,\n          whirlpool: this.address,\n          tickArray0,\n          tickArray1,\n          tickArray2,\n          oracle: this.oracle,\n          ...this.whirlpoolData,\n        },\n        ...swapParams,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.whirlpoolData.tokenMintA, this.whirlpoolData.tokenMintB];\n  }\n}\n","// TODO: Move this to SDK rather than being maintained by us\nimport {\n  CyclosCore,\n  buildTick,\n  generateBitmapWord,\n  nextInitializedBit,\n  tickPosition,\n  TickDataProvider,\n  PoolVars,\n  TICK_SEED,\n  u32ToSeed,\n  BITMAP_SEED,\n  TickMath,\n  u16ToSeed,\n} from '@jup-ag/cykura-sdk';\nimport * as anchor from '@project-serum/anchor';\nimport { BN, IdlAccounts } from '@project-serum/anchor';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport JSBI from 'jsbi';\n\nexport type TickBitmapState = IdlAccounts<CyclosCore>['tickBitmapState'];\nexport type TickState = IdlAccounts<CyclosCore>['tickState'];\n\nexport class SolanaTickDataProvider implements TickDataProvider {\n  program: anchor.Program<CyclosCore>;\n  pool: PoolVars;\n\n  bitmapCache: Map<\n    number,\n    {\n      address: PublicKey;\n      word: anchor.BN;\n    }\n  >;\n\n  tickCache: Map<\n    number,\n    {\n      address: PublicKey;\n      liquidityNet: JSBI;\n    }\n  >;\n\n  accountsToFetch: { bitmaps: PublicKey[]; ticks: PublicKey[] } = { bitmaps: [], ticks: [] };\n\n  constructor(program: anchor.Program<CyclosCore>, pool: PoolVars) {\n    this.program = program;\n    this.pool = pool;\n    this.bitmapCache = new Map();\n    this.tickCache = new Map();\n  }\n\n  /**\n   * Caches ticks and bitmap accounts near the current price\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  async eagerLoadCache(tickCurrent: number, tickSpacing: number) {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    try {\n      const bitmapsToFetch = [];\n      const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n      const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n      const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n      const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n      for (let i = minWord; i < maxWord; i++) {\n        bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      }\n\n      const fetchedBitmaps = (await this.program.account.tickBitmapState.fetchMultiple(\n        bitmapsToFetch,\n      )) as (TickBitmapState | null)[];\n\n      const tickAddresses = [];\n      for (let i = 0; i < maxWord - minWord; i++) {\n        const currentWordPos = i + minWord;\n        const wordArray = fetchedBitmaps[i]?.word;\n        const word = wordArray ? generateBitmapWord(wordArray) : new BN(0);\n        this.bitmapCache.set(currentWordPos, {\n          address: bitmapsToFetch[i],\n          word,\n        });\n        if (word && !word.eqn(0)) {\n          for (let j = 0; j < 256; j++) {\n            if (word.shrn(j).and(new BN(1)).eqn(1)) {\n              const tick = ((currentWordPos << 8) + j) * tickSpacing;\n              const tickAddress = this.getTickAddressSync(tick);\n              tickAddresses.push(tickAddress);\n            }\n          }\n        }\n      }\n\n      const fetchedTicks = (await this.program.account.tickState.fetchMultiple(tickAddresses)) as (TickState | null)[];\n      for (const i in tickAddresses) {\n        const fetchedTick = fetchedTicks[i];\n        if (!fetchedTick) continue;\n\n        const { tick, liquidityNet } = fetchedTick;\n        this.tickCache.set(tick, {\n          address: tickAddresses[i],\n          liquidityNet: JSBI.BigInt(liquidityNet),\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Return accounts to cache and returns early if there is insufficient data\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  lazyLoadAccountsToCache(tickCurrent: number, tickSpacing: number): PublicKey[] {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    const bitmapsToFetch: PublicKey[] = [];\n    const bitmaps: ({ address: PublicKey; word: anchor.BN } | undefined)[] = [];\n    const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n    const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n    const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n    const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n    for (let i = minWord; i < maxWord; i++) {\n      bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      const bitmap = this.bitmapCache.get(i);\n      bitmaps.push(bitmap);\n    }\n\n    const tickAddressesToFetch = [];\n    for (let i = 0; i < maxWord - minWord; i++) {\n      const currentWordPos = i + minWord;\n      // We might not have the bitmap yet in the first iteration\n      const word = bitmaps[i]?.word ?? new BN(0);\n      this.bitmapCache.set(currentWordPos, {\n        address: bitmapsToFetch[i],\n        word,\n      });\n      if (word && !word.eqn(0)) {\n        for (let j = 0; j < 256; j++) {\n          if (word.shrn(j).and(new BN(1)).eqn(1)) {\n            const tick = ((currentWordPos << 8) + j) * tickSpacing;\n            const tickAddress = this.getTickAddressSync(tick);\n            tickAddressesToFetch.push(tickAddress);\n          }\n        }\n      }\n    }\n\n    this.accountsToFetch = { bitmaps: bitmapsToFetch, ticks: tickAddressesToFetch };\n    return [...bitmapsToFetch, ...tickAddressesToFetch];\n  }\n\n  getTick(tick: number): {\n    address: anchor.web3.PublicKey;\n    liquidityNet: JSBI;\n  } {\n    let savedTick = this.tickCache.get(tick);\n    if (!savedTick) {\n      throw new Error('Tick not cached');\n    }\n\n    return {\n      address: savedTick.address,\n      liquidityNet: savedTick.liquidityNet,\n    };\n  }\n\n  async getTickAddress(tick: number): Promise<anchor.web3.PublicKey> {\n    return this.getTickAddressSync(tick);\n  }\n\n  getTickAddressSync(tick: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [TICK_SEED, this.pool.token0.toBuffer(), this.pool.token1.toBuffer(), u32ToSeed(this.pool.fee), u32ToSeed(tick)],\n      this.program.programId,\n    )[0];\n  }\n\n  async getBitmapAddress(wordPos: number): Promise<anchor.web3.PublicKey> {\n    return this.getBitmapAddressSync(wordPos);\n  }\n\n  getBitmapAddressSync(wordPos: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [\n        BITMAP_SEED,\n        this.pool.token0.toBuffer(),\n        this.pool.token1.toBuffer(),\n        u32ToSeed(this.pool.fee),\n        u16ToSeed(wordPos),\n      ],\n      this.program.programId,\n    )[0];\n  }\n\n  /**\n   * Fetches the cached bitmap for the word\n   * @param wordPos\n   */\n  getBitmap(wordPos: number): {\n    address: anchor.web3.PublicKey;\n    word: anchor.BN;\n  } {\n    let savedBitmap = this.bitmapCache.get(wordPos);\n    if (!savedBitmap) {\n      throw new Error('Bitmap not cached');\n    }\n\n    return savedBitmap;\n  }\n\n  /**\n   * Finds the next initialized tick in the given word. Fetched bitmaps are saved in a\n   * cache for quicker lookups in future.\n   * @param tick The current tick\n   * @param lte Whether to look for a tick less than or equal to the current one, or a tick greater than or equal to\n   * @param tickSpacing The tick spacing for the pool\n   * @returns\n   */\n  nextInitializedTickWithinOneWord(\n    tick: number,\n    lte: boolean,\n    tickSpacing: number,\n  ): [number, boolean, number, number, PublicKey] {\n    let compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tick), JSBI.BigInt(tickSpacing)));\n    if (tick < 0 && tick % tickSpacing !== 0) {\n      compressed -= 1;\n    }\n    if (!lte) {\n      compressed += 1;\n    }\n\n    const { wordPos, bitPos } = tickPosition(compressed);\n    const cachedBitmap = this.getBitmap(wordPos);\n\n    const { next: nextBit, initialized } = nextInitializedBit(cachedBitmap.word, bitPos, lte);\n    const nextTick = buildTick(wordPos, nextBit, tickSpacing);\n    return [nextTick, initialized, wordPos, bitPos, cachedBitmap.address];\n  }\n\n  // Change this to be a blind decoder rather than decode what we know\n  updateCachedAccountInfos(accountInfoMap: Map<string, AccountInfo<Buffer> | null>) {\n    for (const bitmapAddress of this.accountsToFetch.bitmaps) {\n      const bitmapAccountInfo = accountInfoMap.get(bitmapAddress.toBase58());\n      if (bitmapAccountInfo) {\n        const tickBitmapState = this.program.coder.accounts.decode<TickBitmapState>(\n          'tickBitmapState',\n          bitmapAccountInfo.data,\n        );\n\n        this.bitmapCache.set(tickBitmapState.wordPos, {\n          address: bitmapAddress,\n          word: generateBitmapWord(tickBitmapState.word),\n        });\n      }\n    }\n\n    for (const tickAddress of this.accountsToFetch.ticks) {\n      const tickStateAccountInfo = accountInfoMap.get(tickAddress.toBase58());\n      if (tickStateAccountInfo) {\n        const tickState = this.program.coder.accounts.decode<TickState>('tickState', tickStateAccountInfo.data);\n        this.tickCache.set(tickState.tick, {\n          address: tickAddress,\n          liquidityNet: JSBI.BigInt(tickState.liquidityNet),\n        });\n      }\n    }\n  }\n}\n","import { AccountInfo, AccountMeta, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport * as anchor from '@project-serum/anchor';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { Pool as CykuraPool, CyclosCore, IDL, OBSERVATION_SEED, u32ToSeed, u16ToSeed } from '@jup-ag/cykura-sdk';\nimport { CurrencyAmount, Token } from '@jup-ag/cykura-sdk-core';\nimport { IdlAccounts, Wallet } from '@project-serum/anchor';\nimport { SolanaTickDataProvider } from './solanaTickDataProvider';\nimport { CYKURA_PROGRAM_ID } from '../../constants';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { createCykuraSwapInstruction } from '../jupiterInstruction';\nimport { toDecimal } from '@jup-ag/math';\n\nexport type PoolState = IdlAccounts<CyclosCore>['poolState'];\n\nconst FEE_DENOMINATOR = 1_000_000;\n\nconst provider = new anchor.Provider(null as unknown as Connection, null as unknown as Wallet, {\n  skipPreflight: false,\n});\nconst CYCLOS_CORE = new anchor.Program<CyclosCore>(IDL, CYKURA_PROGRAM_ID, provider);\n\nexport class CykuraAmm implements Amm {\n  label = 'Cykura' as const;\n  id: string;\n  shouldPrefetch = true;\n  private poolState: PoolState;\n  private pool: CykuraPool;\n  private tickDataProvider: SolanaTickDataProvider;\n  private tokens: { token0: Token; token1: Token };\n  public vaults: { vault0: PublicKey; vault1: PublicKey };\n  private swapAccountMetas: AccountMeta[] = [];\n  private feePct: number;\n\n  constructor(private address: PublicKey, accountInfoOrPoolState: AccountInfo<Buffer> | PoolState) {\n    this.id = address.toBase58();\n    let poolState: PoolState;\n    if ('data' in accountInfoOrPoolState) {\n      poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', accountInfoOrPoolState.data);\n    } else {\n      poolState = accountInfoOrPoolState;\n    }\n\n    this.poolState = poolState;\n\n    const { token0, token1, fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n\n    this.tickDataProvider = new SolanaTickDataProvider(CYCLOS_CORE, {\n      token0,\n      token1,\n      fee,\n    });\n\n    this.tokens = {\n      token0: new Token(101, token0, 0, '', ''),\n      token1: new Token(101, token1, 0, '', ''),\n    };\n\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.vaults = {\n      vault0: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token0.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n      vault1: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token1.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n    };\n\n    this.feePct = this.poolState.fee / FEE_DENOMINATOR;\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.address,\n      ...this.tickDataProvider.lazyLoadAccountsToCache(this.pool.tickCurrent, this.pool.tickSpacing),\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const poolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!poolAccountInfo) {\n      throw new Error(`Could not find poolAccountInfo ${this.address.toBase58()}`);\n    }\n    this.poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', poolAccountInfo.data);\n    const { fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.tickDataProvider.updateCachedAccountInfos(accountInfoMap);\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const inputToken = sourceMint.equals(this.poolState.token0) ? this.tokens.token0 : this.tokens.token1;\n    const [currentOutAmount, newPool, swapAccountMetas] = this.pool.getOutputAmount(\n      CurrencyAmount.fromRawAmount(inputToken, JSBI.BigInt(amount)),\n    );\n    this.swapAccountMetas = swapAccountMetas;\n\n    const priceImpactDecimal = toDecimal(JSBI.subtract(this.pool.sqrtRatioX32, newPool.sqrtRatioX32)).div(\n      this.pool.sqrtRatioX32.toString(),\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.toNumber(currentOutAmount.quotient),\n      // Might not be spot on but avoids many conversions\n      feeAmount: Math.floor((amount * this.poolState.fee) / FEE_DENOMINATOR),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct,\n      priceImpactPct: priceImpactDecimal.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const [inputVault, outputVault] = swapParams.sourceMint.equals(this.poolState.token0)\n      ? [this.vaults.vault0, this.vaults.vault1]\n      : [this.vaults.vault1, this.vaults.vault0];\n\n    const lastObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed(this.poolState.observationIndex),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const nextObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed((this.poolState.observationIndex + 1) % this.poolState.observationCardinalityNext),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const additionalArgs = {\n      poolAddress: this.address,\n      inputVault,\n      outputVault,\n      nextObservationState,\n      lastObservationState,\n      swapAccountMetas: this.swapAccountMetas,\n    };\n    return [createCykuraSwapInstruction({ ...swapParams, additionalArgs })];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0, this.poolState.token1];\n  }\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { isValidRoute, MarketInfo } from './market';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport fetch from 'cross-fetch';\nimport { TokenRouteSegments } from './types';\nimport { Amm, prefetchAmms } from './amm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { ammFactory } from './ammFactory';\nimport { getSaberWrappedDecimalsAmms, SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { getTwoPermutations } from '../utils/getTwoPermutations';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\n\nexport interface TransactionFeeInfo {\n  signatureFee: number;\n  openOrdersDeposits: number[];\n  ataDeposits: number[];\n  /* Overall amount that will be deducted from user wallet after the swap */\n  totalFeeAndDeposits: number;\n  /* Amount for fee, deposits and temporary token accounts */\n  minimumSOLForTransaction: number;\n}\n\nexport interface RouteInfo {\n  marketInfos: MarketInfo[];\n  inAmount: number;\n  outAmount: number;\n  outAmountWithSlippage: number;\n  priceImpactPct: number;\n  getDepositAndFee: () => Promise<TransactionFeeInfo | undefined>;\n}\n\ntype MarketsCache = Array<\n  Omit<AccountInfo<Buffer>, 'data' | 'owner'> & {\n    data: [string, 'base64'];\n    owner: string;\n    pubkey: string;\n  }\n>;\n\ntype KeyedAccountInfo = AccountInfo<Buffer> & {\n  pubkey: PublicKey;\n  // api can pass some extra params\n  params?: any;\n};\n\nexport const fetchMarketCache = async (url: string) => {\n  const marketsCache = (await (await fetch(url)).json()) as MarketsCache;\n  return marketsCache;\n};\n\n/** For testing purposes when api does not have the new pools */\nexport async function fetchExtraKeyedAccountInfos(connection: Connection, pks: PublicKey[]) {\n  const extraKeyedAccountInfos = (\n    await chunkedGetMultipleAccountInfos(\n      connection,\n      pks.map((item) => item.toBase58()),\n    )\n  ).map((item, index) => {\n    const pubkey = pks[index];\n    if (!item) throw new Error(`Failed to fetch pool ${pubkey.toBase58()}`);\n    return { pubkey, ...item };\n  });\n  return extraKeyedAccountInfos;\n}\n\nexport async function getAllAmms(connection: Connection, marketsCache: MarketsCache): Promise<Amm[]> {\n  const marketCacheToAccountInfo = (marketsCache: MarketsCache): Array<KeyedAccountInfo> => {\n    return marketsCache.map((market) => {\n      const {\n        data: [accountInfo, format],\n        pubkey,\n        ...rest\n      } = market;\n      return {\n        ...rest,\n        pubkey: new PublicKey(pubkey),\n        data: Buffer.from(accountInfo, format),\n        owner: new PublicKey(rest.owner),\n      };\n    });\n  };\n\n  const marketKeyedAccountInfos = marketCacheToAccountInfo(marketsCache);\n\n  // this is used for development\n  const extraKeys: Array<PublicKey> = [];\n\n  if (extraKeys.length) {\n    const extraKeyedAccountInfos = await fetchExtraKeyedAccountInfos(connection, extraKeys);\n    marketKeyedAccountInfos.push(...extraKeyedAccountInfos);\n  }\n\n  const amms = marketKeyedAccountInfos.reduce((acc, keyedAccountInfo) => {\n    const amm = ammFactory(keyedAccountInfo.pubkey, keyedAccountInfo, keyedAccountInfo.params);\n    // Amm might not be recognized by the current version of the frontend\n    // or be in a state we don't want\n    if (amm) {\n      acc.push(amm);\n    }\n    return acc;\n  }, new Array<Amm>());\n\n  await prefetchAmms(\n    amms.filter((amm) => amm.shouldPrefetch),\n    connection,\n  );\n\n  amms.push(...getSaberWrappedDecimalsAmms());\n\n  return amms;\n}\n\nexport function ammCrossProtocolPairs(arr: Amm[], callback: (a: Amm, b: Amm) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      // Don't pair amm with same label\n      if (arr[i].label !== arr[j].label) {\n        callback(arr[i], arr[j]);\n      }\n    }\n  }\n}\n\nexport function getTokenRouteSegments(amms: Amm[]): TokenRouteSegments {\n  const tokenRouteSegments = new Map<string, Map<string, Amm[]>>();\n\n  amms.forEach((amm) => {\n    const reserveTokenMintPermutations = getTwoPermutations(amm.reserveTokenMints);\n    reserveTokenMintPermutations.forEach(([firstReserveMint, secondReserveMint]) => {\n      addSegment(firstReserveMint.toBase58(), secondReserveMint.toBase58(), amm, tokenRouteSegments);\n    });\n  });\n\n  return tokenRouteSegments;\n}\n\nfunction addSegment(inMint: string, outMint: string, amm: Amm, tokenRouteSegments: TokenRouteSegments) {\n  let segments = tokenRouteSegments.get(inMint);\n\n  if (!segments) {\n    segments = new Map<string, Amm[]>([[outMint, []]]);\n    tokenRouteSegments.set(inMint, segments);\n  }\n\n  let amms = segments.get(outMint);\n  if (!amms) {\n    amms = [];\n    segments.set(outMint, amms);\n  }\n\n  amms.push(amm);\n}\n\nexport type Route = {\n  amms: Amm[];\n  mints: PublicKey[];\n};\n\n/*\n * Construct TokenRouteSegment that is only used for the selected inputMint and outputMint\n * Example:\n *   SOL => USDC, the map would consist of\n *     - SOL => USDC => Amm[]\n *     - SOL => USDT => Amm[]\n *     - USDT => SOL => Amm[]\n */\nexport function computeInputRouteSegments({\n  inputMint,\n  outputMint,\n  tokenRouteSegments,\n  intermediateTokens,\n}: {\n  inputMint: string;\n  outputMint: string;\n  tokenRouteSegments: TokenRouteSegments;\n  intermediateTokens?: string[];\n}): TokenRouteSegments {\n  const inputRouteSegments: TokenRouteSegments = new Map();\n\n  const inputSegment = tokenRouteSegments.get(inputMint);\n  const outputSegment = tokenRouteSegments.get(outputMint);\n\n  if (inputSegment && outputSegment) {\n    const inputInnerMap = new Map<string, Amm[]>();\n    const outputInnerMap = new Map<string, Amm[]>();\n\n    for (let [outMint, amms] of inputSegment.entries()) {\n      if (outMint === outputMint) {\n        inputInnerMap.set(outMint, amms);\n        outputInnerMap.set(inputMint, amms);\n        continue;\n      }\n\n      if (intermediateTokens && !intermediateTokens.includes(outMint)) {\n        continue;\n      }\n      const intersectionAmms = outputSegment.get(outMint);\n      if (intersectionAmms) {\n        inputRouteSegments.set(\n          outMint,\n          new Map([\n            [inputMint, amms],\n            [outputMint, intersectionAmms],\n          ]),\n        );\n        inputInnerMap.set(outMint, amms);\n        outputInnerMap.set(outMint, intersectionAmms);\n      }\n    }\n    inputRouteSegments.set(inputMint, inputInnerMap);\n    inputRouteSegments.set(outputMint, outputInnerMap);\n  }\n\n  return inputRouteSegments;\n}\n\nexport function computeRouteMap(\n  tokenRouteSegments: TokenRouteSegments,\n  intermediateTokens?: string[],\n  onlyDirectRoutes?: boolean,\n): Map<string, string[]> {\n  const routeMap = new Map<string, string[]>();\n\n  for (const [tokenMint, firstLevelOutputs] of tokenRouteSegments) {\n    const validOutputMints = new Set<string>();\n\n    for (const [firstLevelOutputMint, firstLevelAmms] of firstLevelOutputs) {\n      validOutputMints.add(firstLevelOutputMint);\n\n      if (onlyDirectRoutes) {\n        continue;\n      }\n      // add the single level output as possible valid mints as well\n      const secondLevelOutputs = tokenRouteSegments.get(firstLevelOutputMint) ?? [];\n      for (const [secondLevelOutputMint, secondLevelAmms] of secondLevelOutputs) {\n        // Prevent output mint == input mint when routing\n        if (secondLevelOutputMint === tokenMint) {\n          continue;\n        }\n\n        // if intermediateTokens is specified and it doesnt include in the intermediateTokens, skip it\n        if (intermediateTokens && !intermediateTokens.includes(firstLevelOutputMint)) {\n          continue;\n        }\n\n        for (const firstLevelAmm of firstLevelAmms) {\n          for (const secondLevelAmm of secondLevelAmms) {\n            if (isValidRoute(firstLevelAmm, secondLevelAmm)) {\n              validOutputMints.add(secondLevelOutputMint);\n              break;\n            }\n          }\n        }\n      }\n    }\n    routeMap.set(tokenMint, Array.from(validOutputMints));\n  }\n\n  return routeMap;\n}\n\nexport function isSplitSetupRequired(marketInfos: MarketInfo[]): boolean {\n  if (marketInfos.length === 1) {\n    const amm = marketInfos[0].amm;\n    if (amm instanceof SplitTradeAmm && amm.shouldSplitSetup) {\n      return true;\n    }\n  } else {\n    const [firstMarket, secondMarket] = marketInfos.map((marketInfo) => marketInfo.amm);\n\n    if (firstMarket instanceof RaydiumAmm || secondMarket instanceof RaydiumAmm) {\n      return true;\n    } else if (firstMarket instanceof SerumAmm && secondMarket instanceof SerumAmm) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function getNumberOfTransactionForRoute(marketInfos: MarketInfo[]): number {\n  if (isSplitSetupRequired(marketInfos)) {\n    const [firstMarketInfo, secondMarketInfo] = marketInfos;\n\n    const hasSOL = [(firstMarketInfo.inputMint, firstMarketInfo.outputMint, secondMarketInfo.outputMint)].some((item) =>\n      item.equals(WRAPPED_SOL_MINT),\n    );\n\n    return hasSOL ? 3 : 2;\n  }\n  return 1;\n}\n\n// We cannot add platform fee to all possible routing due to transaction size limit\nexport function isPlatformFeeSupported(amms: Amm[]): boolean {\n  if (amms.length > 1) {\n    const [firstMarket, secondMarket] = amms;\n\n    if (firstMarket instanceof RaydiumAmm && secondMarket instanceof RaydiumAmm) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getRouteInfoUniqueId(routeInfo: RouteInfo) {\n  return routeInfo.marketInfos.map((marketInfo) => `${marketInfo.amm.id}-${marketInfo.inputMint}`).join('-');\n}\n","import { InstructionCache } from './types';\nimport { RouteInfo } from './routes';\nimport { SetupInstructions } from '..';\n\nexport const getCacheMintKey = (marketInfos: RouteInfo['marketInfos']) => {\n  return `${marketInfos[0]?.inputMint}-${marketInfos[0]?.outputMint}-${marketInfos[1]?.outputMint}-${marketInfos.map(\n    (item) => item.amm.id,\n  )}`;\n};\n\nexport const getInstructionCache = ({\n  instructionCache,\n  walletPublicKey,\n  cacheKey,\n}: {\n  instructionCache: InstructionCache;\n  walletPublicKey: string;\n  cacheKey: string;\n}) => {\n  return instructionCache.get(walletPublicKey)?.get(cacheKey);\n};\n\nexport const setInstructionCache = ({\n  instructionCache,\n  instructionResult,\n  walletPublicKey,\n  cacheKey,\n}: {\n  instructionCache: InstructionCache;\n  instructionResult: SetupInstructions;\n  walletPublicKey: string;\n  cacheKey: string;\n}) => {\n  const walletCache =\n    instructionCache.get(walletPublicKey) || (new Map() as NonNullable<ReturnType<InstructionCache['get']>>);\n\n  walletCache.set(cacheKey, instructionResult);\n\n  instructionCache.set(walletPublicKey, walletCache);\n};\n\nexport const deleteInstructionCache = ({\n  instructionCache,\n  walletPublicKey,\n}: {\n  instructionCache: InstructionCache;\n  walletPublicKey: string;\n}) => {\n  instructionCache.get(walletPublicKey)?.clear();\n};\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { getEmptyInstruction, Instruction } from './instruction';\n\n// Leverage the existing ATA when present\nexport async function createAndCloseWSOLAccount(\n  connection: Connection,\n  owner: PublicKey,\n  amount: number,\n): Promise<Instruction & { address: PublicKey }> {\n  const result = getEmptyInstruction();\n  result.instructions = [];\n\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    WRAPPED_SOL_MINT,\n    owner,\n    true,\n  );\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    result.instructions.push(\n      Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        WRAPPED_SOL_MINT,\n        toAccount,\n        owner,\n        owner,\n      ),\n    );\n  }\n\n  // Fund account and sync\n  result.instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: owner,\n      toPubkey: toAccount,\n      lamports: amount,\n    }),\n  );\n  result.instructions.push(\n    // This is not exposed by the types, but indeed it exists\n    (Token as any).createSyncNativeInstruction(TOKEN_PROGRAM_ID, toAccount),\n  );\n\n  result.cleanupInstructions = [Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, owner, owner, [])];\n\n  return {\n    address: toAccount,\n    ...result,\n  };\n}\n\nexport async function findOrCreateAssociatedAccountByMint(\n  connection: Connection,\n  payer: PublicKey,\n  owner: PublicKey,\n  mintAddress: PublicKey | string,\n  unwrapSOL: boolean,\n): Promise<Instruction & { address: PublicKey }> {\n  const mint = typeof mintAddress === 'string' ? new PublicKey(mintAddress) : mintAddress;\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    owner,\n    true,\n  );\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  const info = await connection.getAccountInfo(toAccount);\n  if (info === null) {\n    instructions.push(\n      Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mint,\n        toAccount,\n        owner,\n        payer,\n      ),\n    );\n  }\n\n  // We close it when wrapped SOL\n  if (mint.equals(WRAPPED_SOL_MINT) && unwrapSOL) {\n    cleanupInstructions.push(Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, owner, owner, []));\n  }\n\n  return {\n    address: toAccount,\n    instructions: instructions,\n    cleanupInstructions,\n    signers: [],\n  };\n}\n","import { Connection, Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { isPlatformFeeSupported, RouteInfo } from './routes';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { findOrCreateAssociatedAccountByMint } from '../utils/token';\nimport { createSetTokenLedgerInstruction } from './jupiterInstruction';\nimport { Owner } from '../utils/Owner';\nimport { PlatformFee } from './types';\nimport { QuoteMintToReferrer } from '..';\nimport { isSerumAndRaydium } from './market';\n\ntype RouteToInstructionsParams = {\n  user: Owner;\n  tokenLedger: PublicKey;\n  openOrdersAddresses: (PublicKey | undefined)[];\n  userSourceTokenAccountAddress: PublicKey;\n  userIntermediaryTokenAccountAddress: PublicKey | undefined;\n  userDestinationTokenAccountAddress: PublicKey;\n  routeInfo: RouteInfo;\n  platformFee: PlatformFee | undefined;\n  quoteMintToReferrer: QuoteMintToReferrer;\n};\n\nasync function routeToInstructions({\n  user,\n  tokenLedger,\n  openOrdersAddresses,\n  userSourceTokenAccountAddress,\n  userIntermediaryTokenAccountAddress,\n  userDestinationTokenAccountAddress,\n  routeInfo,\n  platformFee,\n  quoteMintToReferrer,\n}: RouteToInstructionsParams): Promise<Instruction> {\n  const outAmountWithSlippage = routeInfo.outAmountWithSlippage;\n  const inputAmount = routeInfo.inAmount;\n\n  const legs = routeInfo.marketInfos.length;\n  if (legs === 2 && !userIntermediaryTokenAccountAddress) {\n    throw new Error('Missing intermediary token account');\n  }\n\n  // Drop referrer if space is scarce\n  const effectiveQuoteMintToReferrer =\n    platformFee && isSerumAndRaydium(routeInfo.marketInfos) ? undefined : quoteMintToReferrer;\n\n  const userIntermediateTokenAccountAddresses = userIntermediaryTokenAccountAddress\n    ? [userIntermediaryTokenAccountAddress]\n    : [];\n  const userTokenAccountAddresses = [\n    userSourceTokenAccountAddress,\n    ...userIntermediateTokenAccountAddresses,\n    userDestinationTokenAccountAddress,\n  ];\n\n  const platformFeeSupported = isPlatformFeeSupported(routeInfo.marketInfos.map((mi) => mi.amm));\n\n  const instructions: TransactionInstruction[] = [\n    createSetTokenLedgerInstruction(tokenLedger, userTokenAccountAddresses[1]),\n  ];\n\n  for (const [index, marketInfo] of routeInfo.marketInfos.entries()) {\n    const amm = marketInfo.amm;\n    const legInputAmount = index === 0 ? inputAmount : null;\n    const legOutAmountWithSlippage = index === legs - 1 ? outAmountWithSlippage : 0;\n    const legPlatformFee = index === legs - 1 && platformFeeSupported ? platformFee : undefined;\n\n    const [userSourceTokenAccount, userDestinationTokenAccount] = userTokenAccountAddresses.slice(index);\n\n    instructions.push(\n      ...amm.createSwapInstructions({\n        sourceMint: marketInfo.inputMint,\n        destinationMint: marketInfo.outputMint,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority: user.publicKey,\n        inAmount: legInputAmount,\n        minimumOutAmount: legOutAmountWithSlippage,\n        tokenLedger,\n        openOrdersAddress: openOrdersAddresses[index],\n        platformFee: legPlatformFee,\n        quoteMintToReferrer: effectiveQuoteMintToReferrer,\n      }),\n    );\n  }\n\n  const { signers, cleanupInstructions } = getEmptyInstruction();\n\n  if (user.isKeyPair && user.signer) {\n    signers.push(user.signer);\n  }\n  return {\n    signers,\n    cleanupInstructions,\n    instructions,\n  };\n}\n\nexport const routeAtaInstructions = async (\n  connection: Connection,\n  marketInfos: RouteInfo['marketInfos'],\n  userPublicKey: PublicKey,\n  unwrapSOL: boolean,\n) => {\n  const getUserIntermediateTokenAccountAddress = async () => {\n    const userIntermediateTokenAccountAddress =\n      marketInfos.length === 2\n        ? await findOrCreateAssociatedAccountByMint(\n            connection,\n            userPublicKey,\n            userPublicKey,\n            marketInfos[0].outputMint,\n            unwrapSOL,\n          )\n        : undefined;\n    return userIntermediateTokenAccountAddress;\n  };\n\n  const getUserDestinationTokenAccountAddress = async () => {\n    return await findOrCreateAssociatedAccountByMint(\n      connection,\n      userPublicKey,\n      userPublicKey,\n      marketInfos.length === 2 ? marketInfos[1].outputMint : marketInfos[0].outputMint,\n      unwrapSOL,\n    );\n  };\n\n  const [userIntermediaryTokenAccountResult, userDestinationTokenAccountResult] = await Promise.all([\n    getUserIntermediateTokenAccountAddress(),\n    getUserDestinationTokenAccountAddress(),\n  ]);\n\n  return {\n    userIntermediaryTokenAccountResult,\n    userDestinationTokenAccountResult,\n  };\n};\n\nexport default routeToInstructions;\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { SerumMarket } from '../market';\nimport { getEmptyInstruction, Instruction } from '../../utils/instruction';\nimport { wait } from '../../utils/wait';\nimport { createOpenOrdersInstruction } from '../jupiterInstruction';\n\nexport type MarketToOpenOrdersAddress = Map<string, PublicKey>;\n\nexport async function getOrCreateOpenOrdersAddress(\n  connection: Connection,\n  user: PublicKey,\n  serumMarket: SerumMarket,\n  marketToOpenOrdersAddress?: MarketToOpenOrdersAddress,\n): Promise<(Instruction & { address: PublicKey }) | undefined> {\n  const result = getEmptyInstruction();\n\n  const marketAddress = serumMarket.address.toString();\n\n  if (marketToOpenOrdersAddress) {\n    // check existing map\n    let openOrdersAddress = marketToOpenOrdersAddress.get(marketAddress);\n\n    if (openOrdersAddress) {\n      let openOrdersAccountInfo = null;\n\n      // We verify if it indeed exists, with low commitment to pick it up, to address the unsafe behaviour below\n      openOrdersAccountInfo = await connection.getAccountInfo(openOrdersAddress, 'confirmed');\n\n      if (openOrdersAccountInfo) {\n        return {\n          ...result,\n          address: openOrdersAddress,\n        };\n      }\n    }\n  }\n\n  const [newOpenOrdersAddress, ix] = createOpenOrdersInstruction(serumMarket, user);\n\n  const newOpenOrdersAddressInfo = await connection.getAccountInfo(newOpenOrdersAddress);\n\n  if (!newOpenOrdersAddressInfo) {\n    result.instructions = [ix];\n  }\n\n  // This is unsafe, since we don't know yet if it has succeeded\n  marketToOpenOrdersAddress?.set(serumMarket.address.toString(), newOpenOrdersAddress);\n\n  return {\n    ...result,\n    address: newOpenOrdersAddress,\n  };\n}\n","import { Signer, Transaction, TransactionInstruction, TransactionSignature } from '@solana/web3.js';\n\nexport const getEmptyInstruction: () => Instruction = () => ({\n  instructions: [],\n  cleanupInstructions: [],\n  signers: [],\n});\n\nexport type Instruction = {\n  instructions: TransactionInstruction[];\n  cleanupInstructions: TransactionInstruction[];\n  signers: Signer[];\n};\n\nexport type TransactionPayload = {\n  transaction: Transaction;\n  signers: Signer[];\n  execute: () => Promise<TransactionSignature>;\n};\n","import { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, FeeCalculator, PublicKey } from '@solana/web3.js';\nimport type { SerumOpenOrdersMap } from '..';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { getCacheMintKey, getInstructionCache, setInstructionCache } from './cache';\nimport { RouteInfo, TransactionFeeInfo } from './routes';\nimport { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { InstructionCache, PlatformFeeAndAccounts, SetupInstructions } from './types';\n\nconst SERUM_OPEN_ACCOUNT_LAMPORTS = 23_352_760;\nconst OPEN_TOKEN_ACCOUNT_LAMPORTS = 2_039_280;\n\nfunction sum(values: number[]) {\n  return values.reduce((value, acc) => {\n    acc += value;\n    return acc;\n  }, 0);\n}\n\nconst calculateTransactionDepositAndFee = ({\n  intermediate,\n  destination,\n  openOrders,\n  hasWrapUnwrapSOL,\n  feeCalculator,\n}: SetupInstructions & {\n  hasWrapUnwrapSOL: boolean;\n  feeCalculator: FeeCalculator;\n}): TransactionFeeInfo => {\n  const openOrdersDeposits = openOrders\n    .filter((ooi) => ooi && ooi.instructions.length > 0)\n    .map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);\n  const ataDeposits = [intermediate, destination]\n    .filter((item) => item?.instructions.length && item.cleanupInstructions.length === 0)\n    .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS);\n\n  const signatureFee =\n    ([...openOrders?.map((oo) => oo?.signers), intermediate?.signers, destination.signers].filter(Boolean).flat()\n      .length +\n      1) *\n    feeCalculator.lamportsPerSignature;\n\n  const totalFeeAndDeposits = sum([signatureFee, ...openOrdersDeposits, ...ataDeposits]);\n\n  // We need to account for temporary wrapped SOL token accounts as intermediary or output\n  const minimumSOLForTransaction = sum([\n    signatureFee,\n    ...openOrdersDeposits,\n    ...[intermediate, destination]\n      .filter((item) => (item?.instructions.length ?? 0) > 0)\n      .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS),\n    hasWrapUnwrapSOL ? OPEN_TOKEN_ACCOUNT_LAMPORTS : 0,\n  ]);\n\n  return {\n    signatureFee,\n    openOrdersDeposits,\n    ataDeposits,\n    totalFeeAndDeposits,\n    minimumSOLForTransaction,\n  };\n};\n\nexport const getDepositAndFeeFromInstructions = async ({\n  connection,\n  userPublicKey,\n  inputMint,\n  marketInfos,\n  feeCalculator,\n  instructionCache,\n  serumOpenOrdersPromise,\n  wrapUnwrapSOL: unwrapSOL,\n}: {\n  connection: Connection;\n  userPublicKey: PublicKey;\n  inputMint: PublicKey;\n  marketInfos: RouteInfo['marketInfos'];\n  feeCalculator: FeeCalculator;\n  instructionCache: InstructionCache;\n  /* promise because we can choose not to await it when we dont need it */\n  serumOpenOrdersPromise: Promise<SerumOpenOrdersMap>;\n  wrapUnwrapSOL: boolean;\n}) => {\n  const cacheKey = getCacheMintKey(marketInfos);\n\n  const walletPublicKey = userPublicKey.toBase58();\n\n  const routeCache = getInstructionCache({\n    instructionCache,\n    walletPublicKey,\n    cacheKey,\n  });\n\n  const hasWrapUnwrapSOL = inputMint.equals(WRAPPED_SOL_MINT) && unwrapSOL;\n  if (routeCache) {\n    const { destination, intermediate, openOrders } = routeCache;\n    return calculateTransactionDepositAndFee({\n      intermediate,\n      destination,\n      openOrders,\n      hasWrapUnwrapSOL,\n      feeCalculator,\n    });\n  }\n\n  const openOrdersInstructionsPromise = Promise.all(\n    marketInfos.map(async (marketInfo) => {\n      const amm = marketInfo.amm;\n      if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n        if (!amm.market) return;\n        return await getOrCreateOpenOrdersAddress(connection, userPublicKey, amm.market, await serumOpenOrdersPromise);\n      }\n      return;\n    }),\n  );\n\n  const promise = routeAtaInstructions(connection, marketInfos, userPublicKey, unwrapSOL).then(\n    ({ userIntermediaryTokenAccountResult, userDestinationTokenAccountResult }) => {\n      return openOrdersInstructionsPromise.then((openOrdersInstructions) => ({\n        intermediate: userIntermediaryTokenAccountResult,\n        destination: userDestinationTokenAccountResult,\n        openOrders: openOrdersInstructions,\n      }));\n    },\n  );\n\n  const instructionResult = await promise;\n\n  setInstructionCache({\n    cacheKey,\n    instructionCache,\n    instructionResult,\n    walletPublicKey,\n  });\n\n  return calculateTransactionDepositAndFee({\n    ...instructionResult,\n    hasWrapUnwrapSOL,\n    feeCalculator,\n  });\n};\n\nexport const NO_PLATFORM_FEE: PlatformFeeAndAccounts = {\n  feeBps: 0,\n  feeAccounts: new Map<string, PublicKey>(),\n};\n\nexport async function getPlatformFeeAccounts(\n  connection: Connection,\n  feeAccountOwner: PublicKey,\n): Promise<Map<string, PublicKey>> {\n  const tokenAccounts = (\n    await connection.getTokenAccountsByOwner(feeAccountOwner, {\n      programId: TOKEN_PROGRAM_ID,\n    })\n  ).value;\n\n  const feeAccounts = tokenAccounts.reduce((acc, tokenAccount) => {\n    const deserializedtokenAccount = deserializeAccount(tokenAccount.account.data);\n    if (deserializedtokenAccount) {\n      acc.set(deserializedtokenAccount.mint.toBase58(), tokenAccount.pubkey);\n    }\n    return acc;\n  }, new Map<string, PublicKey>());\n\n  return feeAccounts;\n}\n","import {\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionCtorFields,\n  Signer,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { Instruction, TransactionPayload } from './instruction';\nimport { Owner } from './Owner';\n\nexport class TransactionBuilder {\n  private connection: Connection;\n  private feePayer: PublicKey;\n  private instructions: Instruction[];\n  private owner: Owner;\n\n  constructor(connection: Connection, feePayer: PublicKey, owner: Owner) {\n    this.connection = connection;\n    this.feePayer = feePayer;\n    this.instructions = [];\n    this.owner = owner;\n  }\n\n  addInstruction(instruction: Instruction): TransactionBuilder {\n    this.instructions.push(instruction);\n    return this;\n  }\n\n  async build(recentBlockHash?: string): Promise<TransactionPayload> {\n    if (!recentBlockHash) {\n      recentBlockHash = (await this.connection.getLatestBlockhash('confirmed')).blockhash;\n    }\n\n    const txFields: TransactionCtorFields = {\n      recentBlockhash: recentBlockHash,\n      feePayer: this.feePayer,\n    };\n\n    let instructions: TransactionInstruction[] = [];\n    let cleanupInstructions: TransactionInstruction[] = [];\n    let signers: Signer[] = [];\n    this.instructions.forEach((curr) => {\n      instructions = instructions.concat(curr.instructions);\n      cleanupInstructions = cleanupInstructions.concat(curr.cleanupInstructions);\n      signers = signers.concat(curr.signers);\n    });\n\n    const transaction = new Transaction(txFields);\n    instructions.concat(cleanupInstructions).forEach((ix) => transaction.add(ix));\n    transaction.feePayer = this.feePayer;\n\n    return {\n      transaction: transaction,\n      signers: signers,\n      execute: this.owner.isKeyPair\n        ? () => {\n            return this.connection.sendTransaction(transaction, signers);\n          }\n        : async () => {\n            throw new Error('Please use a Keypair for the owner parameter to enable the execute function');\n          },\n    };\n  }\n}\n","import { Keypair, PublicKey, Signer } from '@solana/web3.js';\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","export const wait = (time: number) => new Promise((resolve) => setTimeout(resolve, time));\n","import { TransactionError } from '@mercurial-finance/optimist';\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport {\n  ConfirmedTransactionMeta,\n  Connection,\n  PublicKey,\n  SendOptions,\n  Transaction,\n  TransactionResponse,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport promiseRetry from 'promise-retry';\nimport { WRAPPED_SOL_MINT, JUPITER_ERRORS } from '../constants';\nimport { wait } from './wait';\n\ntype ResponseMeta = NonNullable<TransactionResponse['meta']>;\ntype ReponseTransaction = TransactionResponse['transaction'];\n\nfunction diffTokenBalance(accountKeyIndex: number, meta: ConfirmedTransactionMeta): number | undefined {\n  const postBalance = meta.postTokenBalances?.find(\n    (postTokenBalance) => postTokenBalance.accountIndex === accountKeyIndex,\n  )?.uiTokenAmount.amount;\n  const preBalance = meta.preTokenBalances?.find((preTokenBalance) => preTokenBalance.accountIndex === accountKeyIndex)\n    ?.uiTokenAmount.amount;\n\n  // When token account is created it isn't present in preBalance\n  if (!postBalance) return;\n  return Math.abs(parseInt(postBalance) - (preBalance !== undefined ? parseInt(preBalance) : 0));\n}\n\nexport function extractTokenBalanceChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  tokenAccountAddress: PublicKey,\n): number | undefined {\n  const message = transaction.message;\n\n  if (!meta) {\n    return;\n  }\n  const index = message.accountKeys.findIndex((p) => p.equals(tokenAccountAddress));\n\n  return diffTokenBalance(index, meta);\n}\n\nexport function extractSOLChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  user: PublicKey,\n): number {\n  let accountKeyIndex = transaction.message.accountKeys.findIndex((p) => p.equals(user));\n\n  if (accountKeyIndex !== -1) {\n    return Math.abs(meta.postBalances[accountKeyIndex] - meta.preBalances[accountKeyIndex]);\n  }\n\n  // if 0 is returned it will throw error in the caller function\n  return 0;\n}\n\nexport function getWritableKeys(transaction: Transaction) {\n  return [\n    ...new Set(\n      transaction.instructions\n        .map((inst) => inst.keys.filter((key) => key.isWritable).map((k) => k.pubkey))\n        .reduce((acc, el) => acc.concat(el)),\n    ).values(),\n  ];\n}\n\nexport function getTokenBalanceChangesFromTransactionResponse({\n  txid,\n  inputMint,\n  outputMint,\n  user,\n  sourceAddress,\n  destinationAddress,\n  transactionResponse,\n  hasWrappedSOL,\n}: {\n  txid: TransactionSignature;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  user: PublicKey;\n  sourceAddress: PublicKey;\n  destinationAddress: PublicKey;\n  transactionResponse: TransactionResponse | null;\n  hasWrappedSOL: boolean;\n}) {\n  let sourceTokenBalanceChange: number | undefined;\n  let destinationTokenBalanceChange: number | undefined;\n\n  if (transactionResponse) {\n    let { meta, transaction } = transactionResponse;\n    if (meta) {\n      sourceTokenBalanceChange =\n        inputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, sourceAddress);\n      destinationTokenBalanceChange =\n        outputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, destinationAddress);\n    }\n  }\n\n  if (!(sourceTokenBalanceChange && destinationTokenBalanceChange)) {\n    throw new TransactionError(\n      'Cannot find source or destination token account balance change',\n      txid,\n      JUPITER_ERRORS['BalancesNotExtractedProperly'].code,\n    );\n  }\n\n  return [sourceTokenBalanceChange, destinationTokenBalanceChange];\n}\n\nexport async function pollForConfirmedTransaction(\n  connection: Connection,\n  txid: TransactionSignature,\n): Promise<TransactionResponse | null> {\n  return promiseRetry(\n    async (retry) => {\n      const response = await connection.getTransaction(txid, {\n        commitment: 'confirmed',\n      });\n      if (!response) {\n        retry(\n          new TransactionError('Transaction was not confirmed', txid, JUPITER_ERRORS['TransactionNotConfirmed'].code),\n        );\n      }\n      return response;\n    },\n    {\n      retries: 30,\n      minTimeout: 500,\n    },\n  ).catch(() => null);\n}\n\nexport function getUnixTs() {\n  return new Date().getTime();\n}\n\nconst SEND_OPTIONS: SendOptions = { skipPreflight: true, maxRetries: 2 };\n\n/**\n * awaits confirmation while resending the transaction periodically\n *\n * Our RPC node settings\n * solana_send_leader_count: 8\n * solana_send_retry_ms: 15000\n **/\nexport async function transactionSenderAndConfirmationWaiter(\n  connection: Connection,\n  signedTransaction: Transaction,\n  timeout = 120_000, // 2 minutes, (sendInterval * sendRetries) = 80_000 + extra wait 40_000\n  pollInterval = 500,\n  sendInterval = 2_000,\n  sendRetries = 40,\n): Promise<{ txid: TransactionSignature; transactionResponse: TransactionResponse | null }> {\n  const rawTransaction = signedTransaction.serialize();\n  const txid = await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n\n  const start = getUnixTs();\n  let lastSendTimestamp = getUnixTs();\n  let retries = 0;\n  while (getUnixTs() - start < timeout) {\n    const timestamp = getUnixTs();\n    if (retries < sendRetries && timestamp - lastSendTimestamp > sendInterval) {\n      lastSendTimestamp = timestamp;\n      retries += 1;\n      await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n    }\n    const response = await connection.getTransaction(txid, {\n      commitment: 'confirmed',\n    });\n    if (response) return { txid, transactionResponse: response };\n    await wait(pollInterval);\n  }\n  return { txid, transactionResponse: null };\n}\n\nexport function getSignature(transaction: Transaction) {\n  const signature = transaction.signature;\n  if (!signature) {\n    throw new Error('Transaction has no signature');\n  }\n  return bs58.encode(signature);\n}\n","// The package is missing cjs. Apache License 2.0\n// https://github.com/ehmicky/fast-cartesian/blob/619a497dffd978fb4a09a83f2ca047915579774f/src/main.js\n\n// Validate 'array()' input\nconst validateInput = function <T>(arrays: T[][]) {\n  if (!Array.isArray(arrays)) {\n    throw new TypeError('Argument must be an array of arrays');\n  }\n\n  arrays.forEach(validateArray);\n  validateDimensions(arrays);\n  validateCombinations(arrays);\n};\n\nconst validateArray = function <T>(array: T[]) {\n  if (!Array.isArray(array)) {\n    throw new TypeError(`Argument must be an array: ${array}`);\n  }\n};\n\n// Maximum number of nested `for` loops. In my machine, it's 604 but it is\n// engine-specific so we use a safe number. Above the limit, a max call stack\n// error is thrown by the engine.\nconst validateDimensions = function <T>({ length }: T[]) {\n  if (length >= MAX_DIMENSIONS) {\n    throw new TypeError(\n      `Too many arrays (${length}): please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst MAX_DIMENSIONS = 1e2;\n\n// Max array size in JavaScript. This is the limit of the final return value.\nconst validateCombinations = function <T>(arrays: T[][]) {\n  const size = arrays.reduce(multiplySize, 1);\n\n  if (size >= MAX_SIZE) {\n    const sizeStr = Number.isFinite(size) ? ` (${size.toExponential(0)})` : '';\n    throw new TypeError(\n      `Too many combinations${sizeStr}: please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst multiplySize = function <T>(size: number, array: T[]) {\n  return size * array.length;\n};\n\nconst MAX_SIZE = 4294967296; // 2 ** 32 = 4,294,967,296\n\n// Does a cartesian product on several arrays.\n// Returns an array with the results.\n// Optimized to be the fastest implementation in JavaScript.\nexport default function fastCartesian<T>(arrays: T[][]): T[][] {\n  validateInput(arrays);\n\n  if (arrays.length === 0) {\n    return [];\n  }\n\n  const loopFunc = getLoopFunc(arrays.length);\n  const result: T[][] = [];\n  loopFunc(arrays, result);\n  return result;\n}\n\nconst getLoopFunc = function (length: number) {\n  const cachedLoopFunc = cache[length];\n\n  if (cachedLoopFunc !== undefined) {\n    return cachedLoopFunc;\n  }\n\n  const loopFunc = mGetLoopFunc(length);\n  // eslint-disable-next-line fp/no-mutation\n  cache[length] = loopFunc;\n  return loopFunc;\n};\n\nconst cache: Record<number, any> = {};\n\n// Create a function with `new Function()` that does:\n//   function(arrays, results) {\n//     for (const value0 of arrays[0]) {\n//       for (const value1 of arrays[1]) {\n//         // and so on\n//         results.push([value0, value1])\n//       }\n//     }\n//   }\nconst mGetLoopFunc = function (length: number) {\n  const indexes = Array.from({ length }, getIndex);\n  const start = indexes.map((index) => `for (const value${index} of arrays[${index}]) {`).join('\\n');\n  const middle = indexes.map((index) => `value${index}`).join(', ');\n  const end = '}\\n'.repeat(length);\n\n  // eslint-disable-next-line no-new-func\n  return new Function('arrays', 'result', `${start}\\nresult.push([${middle}])\\n${end}`);\n};\n\nconst getIndex = function (value: any, index: number) {\n  return String(index);\n};\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport { Amm, Quote } from './amm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { isValidRoute, MarketInfo } from './market';\nimport { ammCrossProtocolPairs, isPlatformFeeSupported, Route, RouteInfo, TransactionFeeInfo } from './routes';\nimport { TokenRouteSegments } from './types';\nimport { IS_DEV } from '../constants';\nimport fastCartesian from '../utils/cartesian';\n\nconst PLATFORM_FEE_DENOMINATOR = 10000;\n\nexport async function fetchAccountInfos(connection: Connection, routes: TokenRouteSegments): Promise<void> {\n  const accountInfosMap = new Map();\n\n  const accountsToFetchSet = new Set<string>();\n  const ammMap = new Map<string, Amm>();\n  routes.forEach((innerMap) => {\n    innerMap.forEach((amms) => {\n      amms.forEach((amm) => {\n        ammMap.set(amm.id, amm);\n        amm.getAccountsForUpdate().forEach((account) => {\n          // Only add accountInfos that is not in the Map\n          accountsToFetchSet.add(account.toBase58());\n        });\n      });\n    });\n  });\n\n  const accountsToFetch = Array.from(accountsToFetchSet);\n\n  if (accountsToFetch.length > 0) {\n    const accountInfos = await chunkedGetMultipleAccountInfos(connection, accountsToFetch);\n\n    accountInfos.forEach((item, index) => {\n      const publicKey = accountsToFetch[index];\n      if (item) {\n        accountInfosMap.set(publicKey, item);\n      }\n    });\n\n    ammMap.forEach((amm) => {\n      amm.update(accountInfosMap);\n    });\n  }\n}\n\ninterface GetQuotesParams {\n  inputRouteSegment: TokenRouteSegments;\n  amount: number;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  platformFeeBps: number;\n  slippage: number;\n  filterTopNResult?: number;\n  onlyDirectRoutes?: boolean;\n  getDepositAndFeeForRoute: (params: {\n    marketInfos: RouteInfo['marketInfos'];\n  }) => Promise<TransactionFeeInfo | undefined>;\n}\n\nfunction getInputOutputId({ inputMint, outputMint }: { inputMint: string; outputMint: string }) {\n  return `${inputMint}-${outputMint}`;\n}\n\nfunction getQuoteId({ ammId, amount }: { ammId: string; amount: number }) {\n  return `${ammId}-${amount}`;\n}\n\ntype QuoteMap = Map<string, Quote>;\n\nfunction getQuoteMap({\n  amms,\n  inputMint,\n  outputMint,\n  amount,\n  filterTopNResult = 3,\n}: {\n  amms: Amm[];\n  inputMint: string;\n  outputMint: string;\n  amount: number;\n  filterTopNResult?: number;\n}): QuoteMap {\n  const quotes = amms\n    .map((amm) => {\n      try {\n        const quote = amm.getQuote({\n          amount,\n          sourceMint: new PublicKey(inputMint),\n          destinationMint: new PublicKey(outputMint),\n        });\n        return { quote, id: amm.id };\n      } catch (e) {\n        if (IS_DEV) {\n          console.error(e);\n        }\n        return undefined;\n      }\n    })\n    .sort((a, b) => (b?.quote.outAmount || 0) - (a?.quote.outAmount || 0))\n    // only choose top 3 rates\n    .filter((item, idx) => item && item.quote.inAmount && idx < filterTopNResult) as Array<{\n    id: string;\n    quote: Quote;\n  }>;\n\n  return new Map<string, Quote>(quotes.map((item) => [getQuoteId({ ammId: item.id, amount }), item.quote]));\n}\n\n// Change this to support N-1 level of hops\nconst MAX_LEVEL = 2;\n\nexport function processInputRouteSegmentToRoutesInfos({\n  inputRouteSegment,\n  inputMint,\n  outputMint,\n  amount,\n  getDepositAndFeeForRoute,\n  platformFeeBps,\n  slippage,\n  filterTopNResult,\n  onlyDirectRoutes,\n}: GetQuotesParams) {\n  const inputMintString = inputMint.toBase58();\n  const outputMintString = outputMint.toBase58();\n  // (InputMint-OutputMint) map to (AmmId-InputAmount) map to Quote from the amm with the inputAmount\n  // this is used to prevent calculation being repeated later on.\n  const tradeIdQuoteMap = new Map<string, Map<string, Quote>>();\n  const inputMintInnerMap = inputRouteSegment.get(inputMintString);\n\n  const routes: Route[] = [];\n\n  if (!inputMintInnerMap) {\n    throw new Error('inputMintInnerMap is undefined');\n  }\n\n  const maxLevel = onlyDirectRoutes ? 0 : MAX_LEVEL;\n\n  /*\n   * It get the rate of all single pair that is linked to the inputMint\n   * Example: SOL => USDC, will have direct pair, while\n   *          SOL => USDT, USDT => SOL will have a hop\n   *\n   * So we go through each of the hop and get the top 3 rate and drop others\n   * This will eventually reduce the needs to compute bad rate for the same pair\n   *\n   * The loop below is doing for the inputMint, while the one after is doing for the outputMint.\n   */\n  const walkTheTree = ({\n    inputMint,\n    level = 0,\n    walked = [inputMint],\n  }: {\n    inputMint: string;\n    amount: number;\n    level?: number;\n    walked?: string[];\n  }) => {\n    const inputMintInnerMap = inputRouteSegment.get(inputMint);\n\n    if (inputMintInnerMap) {\n      inputMintInnerMap.forEach((amms, outMint) => {\n        const tradeId = getInputOutputId({\n          inputMint,\n          outputMint: outMint,\n        });\n\n        const quoteMap = getQuoteMap({\n          amms,\n          inputMint,\n          outputMint: outMint,\n          amount,\n          filterTopNResult,\n        });\n\n        const filteredAmms = amms.filter((amm) => quoteMap.has(getQuoteId({ ammId: amm.id, amount })));\n\n        // add split trade in when outputMint match\n        if (outMint === outputMintString) {\n          ammCrossProtocolPairs(filteredAmms.slice(), (firstAmm, secondAmm) => {\n            const splitTradeAmm = SplitTradeAmm.create(firstAmm, secondAmm);\n            if (splitTradeAmm) {\n              filteredAmms.push(splitTradeAmm);\n            }\n          });\n        }\n\n        inputMintInnerMap.set(outMint, filteredAmms);\n        tradeIdQuoteMap.set(tradeId, quoteMap);\n\n        // keep looping if not walked and not reached max level\n        if (outMint !== outputMintString && quoteMap.size && !walked.includes(outMint) && level < maxLevel - 1) {\n          walkTheTree({\n            inputMint: outMint,\n            amount: quoteMap.values().next().value.outAmount,\n            level: level + 1,\n            walked: walked.concat(outMint),\n          });\n        } else if (outMint === outputMintString) {\n          // if output reached, we add the route\n\n          const mints = walked.concat(outMint);\n          const _mints = mints.map((i) => new PublicKey(i));\n          const ammsArr = mints.reduce((amms, _, index) => {\n            if (index < mints.length - 1) {\n              amms.push(inputRouteSegment.get(mints[index])?.get(mints[index + 1])!);\n            }\n            return amms;\n          }, [] as Amm[][]);\n\n          const permutations: Amm[][] = fastCartesian(ammsArr);\n\n          permutations.forEach((item) => {\n            if (item.length === 1 || isValidRoute(item[0], item[1])) {\n              routes.push({\n                amms: item,\n                mints: _mints,\n              });\n            }\n          });\n        }\n      });\n    }\n  };\n\n  walkTheTree({\n    inputMint: inputMintString,\n    amount: amount,\n  });\n\n  const routesInfo: RouteInfo[] = routes\n    .map((route) => {\n      const { amms, mints } = route;\n\n      // Chain all amms\n      let marketInfos: MarketInfo[] = [];\n      let intermediateAmount = amount;\n      let outAmountWithSlippage = amount;\n      const platformFeeSupported = isPlatformFeeSupported(amms);\n      const tokenMints: PublicKey[] = mints;\n\n      const legs = amms.length;\n      for (const [i, amm] of amms.entries()) {\n        try {\n          const sourceMint = tokenMints[i];\n          const destinationMint = tokenMints[i + 1];\n\n          const tradeId = getInputOutputId({\n            inputMint: sourceMint.toBase58(),\n            outputMint: destinationMint.toBase58(),\n          });\n\n          const cacheQuote = tradeIdQuoteMap\n            .get(tradeId)\n            ?.get(getQuoteId({ ammId: amm.id, amount: intermediateAmount }));\n\n          const quote =\n            cacheQuote ||\n            amm.getQuote({\n              sourceMint,\n              destinationMint,\n              amount: intermediateAmount,\n            });\n\n          // Platform fee applicable only on last leg\n          const platformFee =\n            legs - 1 === i && platformFeeSupported\n              ? {\n                  amount: Math.floor((quote.outAmount * platformFeeBps) / PLATFORM_FEE_DENOMINATOR),\n                  mint: destinationMint.toBase58(),\n                  pct: platformFeeBps / 100,\n                }\n              : { amount: 0, mint: destinationMint.toBase58(), pct: 0 };\n\n          const outAmountAfterFees = Math.max(0, quote.outAmount - platformFee.amount);\n\n          const legOutAmountWithSlippage = Math.round(outAmountAfterFees * (1 - slippage / 100));\n\n          marketInfos.push({\n            amm,\n            inputMint: sourceMint,\n            outputMint: destinationMint,\n            notEnoughLiquidity: quote.notEnoughLiquidity,\n            minInAmount: quote.minInAmount,\n            minOutAmount: quote.minOutAmount,\n            inAmount: quote.inAmount,\n            outAmount: outAmountAfterFees,\n            priceImpactPct: quote.priceImpactPct,\n            lpFee: {\n              amount: quote.feeAmount,\n              mint: quote.feeMint,\n              pct: quote.feePct,\n            },\n            platformFee,\n          });\n\n          intermediateAmount = outAmountAfterFees;\n          outAmountWithSlippage = legOutAmountWithSlippage;\n        } catch (e: any) {\n          if (IS_DEV) {\n            console.error(e);\n          }\n\n          return undefined;\n        }\n      }\n\n      return {\n        marketInfos,\n        getDepositAndFee: () => getDepositAndFeeForRoute({ marketInfos }),\n        inAmount: marketInfos[0].inAmount,\n        outAmount: intermediateAmount,\n        outAmountWithSlippage: outAmountWithSlippage,\n        priceImpactPct:\n          1 -\n          marketInfos.reduce((priceFactor, marketInfo) => {\n            priceFactor *= 1 - marketInfo.priceImpactPct;\n            return priceFactor;\n          }, 1),\n      };\n    })\n    .filter((item): item is RouteInfo => item !== undefined)\n    .sort((a, b) => b.outAmount - a.outAmount); // sort based on which one have better output\n\n  return routesInfo;\n}\n","import { parseErrorForTransaction, TransactionError } from '@mercurial-finance/optimist';\nimport { TransactionResponse, TransactionSignature } from '@solana/web3.js';\n\n// Throws when not found or contains error to satisfy upper control flow\nexport async function validateTransactionResponse({\n  txid,\n  transactionResponse,\n}: {\n  txid: string;\n  transactionResponse: TransactionResponse | null;\n}): Promise<{ txid: TransactionSignature; transactionResponse: TransactionResponse | null }> {\n  if (!transactionResponse) {\n    throw new TransactionError('Transaction was not confirmed', txid);\n  }\n  if (transactionResponse?.meta?.err) {\n    let { message, code } = await parseErrorForTransaction(transactionResponse);\n\n    switch (code) {\n      case 6000: {\n        message = 'Slippage error';\n      }\n    }\n\n    throw new TransactionError(message || '', txid, code);\n  }\n  return { txid, transactionResponse };\n}\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  Cluster,\n  Connection,\n  FeeCalculator,\n  Keypair,\n  PublicKey,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nimport { OpenOrders } from '@project-serum/serum';\nimport {\n  computeInputRouteSegments,\n  computeRouteMap,\n  fetchMarketCache,\n  getAllAmms,\n  getTokenRouteSegments,\n  isSplitSetupRequired,\n  RouteInfo,\n} from './routes';\nimport { MarketInfo } from './market';\nimport {\n  DEVNET_SERUM_DEX_PROGRAM,\n  JUPITER_WALLET,\n  MAINNET_SERUM_DEX_PROGRAM,\n  WRAPPED_SOL_MINT,\n  MARKETS_URL,\n  SWAP_PROTOCOL_TOKENS,\n} from '../constants';\nimport { getDepositAndFeeFromInstructions, NO_PLATFORM_FEE } from './fee';\nimport { deleteInstructionCache, getCacheMintKey, getInstructionCache } from './cache';\nimport routeToInstructions, { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { createAndCloseWSOLAccount } from '../utils/token';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { TransactionBuilder } from '../utils/TransactionBuilder';\nimport { Owner } from '../utils/Owner';\nimport {\n  getSignature,\n  getTokenBalanceChangesFromTransactionResponse,\n  transactionSenderAndConfirmationWaiter,\n} from '../utils/transactionHelpers';\nimport { createInitializeTokenLedgerInstruction, TOKEN_LEDGER } from './jupiterInstruction';\nimport { fetchAccountInfos, processInputRouteSegmentToRoutesInfos } from './computeRouteInfos';\nimport type { SignerWalletAdapter } from '@solana/wallet-adapter-base';\nimport { InstructionCache, TokenRouteSegments, PlatformFeeAndAccounts, QuoteMintToReferrer } from './types';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { TokenMintAddress, SetupInstructions } from './types';\nimport { getPlatformFeeAccounts } from './fee';\nimport { Amm } from './amm';\nimport { validateTransactionResponse } from '../utils/tx/errors';\nimport { TransactionError } from '@mercurial-finance/optimist';\nimport { getSaberWrappedDecimalsAmms, SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { getTopTokens } from './getTopTokens';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\n\nexport type SerumOpenOrdersMap = Map<string, PublicKey>;\nexport { MarketInfo } from './market';\nexport { getPlatformFeeAccounts } from './fee';\nexport * from './types';\nexport { transactionSenderAndConfirmationWaiter } from '../utils/transactionHelpers';\nexport { RouteInfo, TransactionFeeInfo, getRouteInfoUniqueId } from './routes';\nexport { getSaberWrappedDecimalsAmms };\nexport {\n  AldrinAmm,\n  CykuraAmm,\n  RaydiumAmm,\n  SerumAmm,\n  SaberAmm,\n  SplTokenSwapAmm,\n  MercurialAmm,\n  CropperAmm,\n  SenchaAmm,\n  SaberAddDecimalsAmm,\n  SplitTradeAmm,\n  WhirlpoolAmm,\n};\n\nexport type SwapResult =\n  | {\n      txid: string;\n      inputAddress: PublicKey;\n      outputAddress: PublicKey;\n      inputAmount: number | undefined;\n      outputAmount: number | undefined;\n    }\n  | {\n      error?: TransactionError;\n    };\n\ntype InputMintAndOutputMint = string;\n\ntype JupiterLoadParams = {\n  connection: Connection;\n  cluster: Cluster;\n  user?: PublicKey | Keypair;\n  platformFeeAndAccounts?: PlatformFeeAndAccounts;\n  quoteMintToReferrer?: Map<TokenMintAddress, PublicKey>;\n  /**\n   * If === -1, mean it will not fetch when shouldFetch == false\n   * If === 0, mean it will fetch everytime\n   */\n  routeCacheDuration?: number;\n  wrapUnwrapSOL?: boolean;\n  marketUrl?: string;\n  /**\n   * On multi-leg trades, the intermediate tokens is restricted to X top tokens in volume and certain utility tokens (Saber wrapped decimal tokens)\n   * This is to reduce the load by having to compute trades through routes that are not so liquid\n   */\n  restrictIntermediateTokens?: boolean;\n  /** See {@link Jupiter.tokenLedger}, default to the standard Jupiter token ledger */\n  tokenLedger?: PublicKey;\n  /** See {@link Jupiter.shouldLoadSerumOpenOrders}, default to true */\n  shouldLoadSerumOpenOrders?: boolean;\n};\n\nexport type OnTransaction = (\n  txid: TransactionSignature,\n  totalTxs: number,\n  txDescription: IConfirmationTxDescription,\n) => void;\n\nexport type IConfirmationTxDescription = 'SETUP' | 'SWAP' | 'CLEANUP';\ntype ExecuteParams = {\n  wallet?: Pick<SignerWalletAdapter, 'sendTransaction' | 'signAllTransactions' | 'signTransaction'>;\n  /**\n   * Allows to customize control of sending and awaiting confirmation in the single/multi transaction flow\n   */\n  onTransaction?: OnTransaction;\n};\n\nexport class Jupiter {\n  /* promise because we can choose not to await it when we dont need it */\n  private serumOpenOrdersPromise: Promise<SerumOpenOrdersMap> | undefined = undefined;\n  private instructionCache: InstructionCache = new Map();\n  private user: Keypair | PublicKey | undefined;\n  private routeCache = new Map<InputMintAndOutputMint, { fetchTimestamp: number }>();\n\n  constructor(\n    private connection: Connection,\n    private cluster: Cluster,\n    public tokenRouteSegments: TokenRouteSegments,\n    private feeCalculator: FeeCalculator,\n    private platformFeeAndAccounts: PlatformFeeAndAccounts,\n    /** Referrer account to collect Serum referrer fees for each given quote mint, the referrer fee is 20% of the Serum protocol fee */\n    private quoteMintToReferrer: QuoteMintToReferrer,\n    /** route cache duration in ms */\n    private routeCacheDuration: number = 0,\n    /** When set to true (default) native SOL is wrapped and wSOL unwrapped in each swap, otherwise it assumes wSOL is funded when it exists */\n    private wrapUnwrapSOL: boolean = true,\n    /** A token ledger which can be used to track volume as it can be made unique per platform, also alleviates write locks on a single token ledger account */\n    private tokenLedger: PublicKey,\n    private intermediateTokens: TokenMintAddress[] | undefined,\n    /** Perform a getProgramAccounts on user's serum open orders. Recomended to turn off if RPC is slow to perform a gPA */\n    private shouldLoadSerumOpenOrders: boolean,\n  ) {}\n\n  /**\n   * load performs the necessary async scaffolding of the Jupiter object\n   */\n  static async load({\n    connection,\n    cluster,\n    user,\n    platformFeeAndAccounts = NO_PLATFORM_FEE,\n    quoteMintToReferrer,\n    routeCacheDuration = 0,\n    wrapUnwrapSOL = true,\n    // @internal,\n    marketUrl,\n    restrictIntermediateTokens = false,\n    tokenLedger = TOKEN_LEDGER,\n    shouldLoadSerumOpenOrders = true,\n  }: JupiterLoadParams) {\n    const [\n      tokenRouteSegments,\n      {\n        value: { feeCalculator },\n      },\n      _quoteMintToReferrer,\n      intermediateTokens,\n    ] = await Promise.all([\n      Jupiter.fetchTokenRouteSegments(connection, cluster, marketUrl),\n      connection.getRecentBlockhashAndContext('processed'),\n      quoteMintToReferrer ?? getPlatformFeeAccounts(connection, new PublicKey(JUPITER_WALLET)),\n      restrictIntermediateTokens ? Jupiter.getIntermediateTokens() : undefined,\n    ]);\n\n    const jupiter = new Jupiter(\n      connection,\n      cluster,\n      tokenRouteSegments,\n      feeCalculator,\n      platformFeeAndAccounts,\n      _quoteMintToReferrer,\n      routeCacheDuration,\n      wrapUnwrapSOL,\n      tokenLedger,\n      intermediateTokens,\n      shouldLoadSerumOpenOrders,\n    );\n    if (user) jupiter.setUserPublicKey(user);\n    return jupiter;\n  }\n\n  getAccountToAmmMap() {\n    const accountToAmmMap = new Map<string, Amm>();\n    this.tokenRouteSegments.forEach((tokenRouteSegment) => {\n      Array.from(tokenRouteSegment.values()).forEach((marketInfos) => {\n        marketInfos.forEach((amm) => {\n          amm.getAccountsForUpdate().forEach((account) => {\n            accountToAmmMap.set(account.toBase58(), amm);\n          });\n        });\n      });\n    });\n    return accountToAmmMap;\n  }\n\n  public getDepositAndFees = async ({\n    marketInfos,\n    userPublicKey,\n    /**\n     * We can use Jupiter.findSerumOpenOrdersForOwner for this, if we want to reuse existing user serum open orders.\n     */\n    serumOpenOrdersPromise = Promise.resolve(new Map()),\n  }: {\n    marketInfos: MarketInfo[];\n    userPublicKey: PublicKey;\n    serumOpenOrdersPromise?: Promise<SerumOpenOrdersMap>;\n  }) => {\n    return getDepositAndFeeFromInstructions({\n      connection: this.connection,\n      feeCalculator: this.feeCalculator,\n      instructionCache: this.instructionCache,\n      inputMint: marketInfos[0].inputMint,\n      marketInfos,\n      serumOpenOrdersPromise,\n      userPublicKey,\n      wrapUnwrapSOL: this.wrapUnwrapSOL,\n    });\n  };\n\n  private getDepositAndFeesForUser = ({ marketInfos }: { marketInfos: MarketInfo[] }) => {\n    if (this.user && this.serumOpenOrdersPromise) {\n      const user = new Owner(this.user);\n\n      return this.getDepositAndFees({\n        marketInfos,\n        userPublicKey: user.publicKey,\n        serumOpenOrdersPromise: this.serumOpenOrdersPromise,\n      });\n    }\n    return Promise.resolve(undefined);\n  };\n\n  async computeRoutes({\n    inputMint,\n    outputMint,\n    inputAmount,\n    slippage,\n    feeBps = 0,\n    forceFetch,\n    onlyDirectRoutes,\n    filterTopNResult,\n  }: {\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    inputAmount: number;\n    slippage: number;\n    feeBps?: number;\n    forceFetch?: boolean;\n    onlyDirectRoutes?: boolean;\n    /**\n     * filter how many top individual route to be used to compared\n     */\n    filterTopNResult?: number;\n  }) {\n    const inputMintString = inputMint.toBase58();\n    const outputMintString = outputMint.toBase58();\n\n    // Platform fee can only be applied when fee account exists\n    const platformFeeBps =\n      feeBps ||\n      (this.platformFeeAndAccounts.feeAccounts.get(outputMintString) ? this.platformFeeAndAccounts.feeBps : 0);\n\n    const now = new Date().getTime();\n\n    // do sort so that it's always the same order for the same inputMint and outputMint and vice versa\n    const inputMintAndOutputMint = [inputMintString, outputMintString].sort((a, b) => a.localeCompare(b)).join('');\n\n    const routeCache = this.routeCache.get(inputMintAndOutputMint);\n\n    const inputRouteSegment = computeInputRouteSegments({\n      inputMint: inputMintString,\n      outputMint: outputMintString,\n      tokenRouteSegments: this.tokenRouteSegments,\n      intermediateTokens: this.intermediateTokens,\n    });\n\n    let shouldBustCache = false;\n    // special -1 condition to not fetch\n    if (this.routeCacheDuration === -1) {\n      shouldBustCache = false;\n    } else if (this.routeCacheDuration === 0) {\n      shouldBustCache = true;\n    } else {\n      if (routeCache) {\n        const { fetchTimestamp } = routeCache;\n        if (now - fetchTimestamp > this.routeCacheDuration) {\n          shouldBustCache = true;\n        }\n      } else {\n        shouldBustCache = true;\n      }\n    }\n\n    if (forceFetch || shouldBustCache) {\n      await fetchAccountInfos(this.connection, inputRouteSegment);\n      this.routeCache.set(inputMintAndOutputMint, {\n        fetchTimestamp: new Date().getTime(),\n      });\n    }\n\n    try {\n      const routesInfos = processInputRouteSegmentToRoutesInfos({\n        inputRouteSegment: inputRouteSegment,\n        inputMint: inputMint,\n        outputMint: outputMint,\n        amount: inputAmount,\n        getDepositAndFeeForRoute: this.getDepositAndFeesForUser,\n        onlyDirectRoutes,\n        slippage,\n        platformFeeBps,\n        filterTopNResult,\n      });\n\n      return {\n        routesInfos,\n        /* indicate if the result is fetched or get from cache */\n        cached: !(forceFetch || shouldBustCache),\n      };\n    } catch (e) {\n      throw e;\n    } finally {\n      // clear cache if it is expired\n      this.routeCache.forEach(({ fetchTimestamp }, key) => {\n        if (fetchTimestamp - now > this.routeCacheDuration) {\n          this.routeCache.delete(key);\n        }\n      });\n    }\n  }\n\n  setUserPublicKey(userPublicKey: Keypair | PublicKey) {\n    this.user = userPublicKey;\n    const owner = new Owner(this.user);\n    this.serumOpenOrdersPromise = this.shouldLoadSerumOpenOrders\n      ? Jupiter.findSerumOpenOrdersForOwner({\n          connection: this.connection,\n          cluster: this.cluster,\n          userPublicKey: owner.publicKey,\n        })\n      : Promise.resolve(new Map());\n  }\n\n  /**\n   * The token route segments contains all the routes and the market meta information.\n   */\n  static async fetchTokenRouteSegments(connection: Connection, cluster: Cluster, marketUrl?: string) {\n    const marketCaches = await fetchMarketCache(marketUrl || MARKETS_URL[cluster]);\n    const amms = await getAllAmms(connection, marketCaches);\n\n    const tokenRouteSegments = getTokenRouteSegments(amms);\n\n    return tokenRouteSegments;\n  }\n\n  /**\n   * This generate a routeMap which represents every possible output token mint for a given input token mint.\n   * For example, we have SOL to USDC and this pairs have many routings like\n   * SOL => USDT\n   * USDT => USDC\n   * SOL => USDC\n   *\n   * From here we know that we can have 2 different routing of SOL => USDC.\n   * We do single level routing map but for all coins which result in the route map below:\n   * SOL => USDT, USDC\n   * USDT => SOL\n   * USDC => SOL, USDT\n   *\n   * From this route map we can map out all possible route from one to another by checking the intersection.\n   */\n  getRouteMap(onlyDirectRoutes?: boolean) {\n    return computeRouteMap(this.tokenRouteSegments, this.intermediateTokens, onlyDirectRoutes);\n  }\n\n  /**\n   * Query existing open order account, this query is slow.\n   * We suggest to fetch this in the background.\n   */\n  static findSerumOpenOrdersForOwner = async ({\n    userPublicKey,\n    cluster,\n    connection,\n  }: {\n    userPublicKey: PublicKey;\n    cluster: Cluster;\n    connection: Connection;\n  }) => {\n    const newMarketToOpenOrdersAddress: SerumOpenOrdersMap = new Map();\n\n    if (userPublicKey) {\n      const programId = cluster === 'mainnet-beta' ? MAINNET_SERUM_DEX_PROGRAM : DEVNET_SERUM_DEX_PROGRAM;\n\n      const allOpenOrders = await OpenOrders.findForOwner(connection, userPublicKey, programId);\n\n      allOpenOrders.forEach((openOrders) => {\n        newMarketToOpenOrdersAddress.set(openOrders.market.toString(), openOrders.address);\n      });\n    }\n    return newMarketToOpenOrdersAddress;\n  };\n\n  public exchange: (params: {\n    routeInfo: RouteInfo;\n    /**\n     * This will overwrite the default Jupiter.setUser, useful for stateless usage like API\n     */\n    userPublicKey?: PublicKey;\n    /**\n     * This will overwrite the default token ledger, useful for stateless usage like API\n     */\n    tokenLedger?: PublicKey;\n    /**\n     * This will overwrite the default fee account, useful for stateless usage like API\n     */\n    feeAccount?: PublicKey;\n    /**\n     * This will overwrite the default wrapUnwrapSOL, useful for stateless usage like API\n     */\n    wrapUnwrapSOL?: boolean;\n  }) => Promise<{\n    transactions: {\n      setupTransaction?: Transaction;\n      swapTransaction: Transaction;\n      cleanupTransaction?: Transaction;\n    };\n    execute: (params?: ExecuteParams) => Promise<SwapResult>;\n  }> = async ({ routeInfo, userPublicKey, feeAccount, wrapUnwrapSOL, tokenLedger }) => {\n    const { connection, serumOpenOrdersPromise } = this;\n    const user: PublicKey | Keypair | undefined = userPublicKey || this.user;\n    if (!user) {\n      throw new Error('user not found');\n    }\n\n    const owner = new Owner(user);\n\n    const lastMarketInfoIndex = routeInfo.marketInfos.length - 1;\n    const inputMint = routeInfo.marketInfos[0].inputMint;\n    const outputMint = routeInfo.marketInfos[lastMarketInfoIndex].outputMint;\n    const _wrapUnwrapSOL = wrapUnwrapSOL ?? this.wrapUnwrapSOL;\n    const cacheKey = getCacheMintKey(routeInfo.marketInfos);\n\n    let instructions = getInstructionCache({\n      instructionCache: this.instructionCache,\n      walletPublicKey: owner.publicKey.toBase58(),\n      cacheKey,\n    });\n\n    if (!instructions) {\n      const [ataInstructions, openOrdersInstructions] = await Promise.all([\n        routeAtaInstructions(connection, routeInfo.marketInfos, owner.publicKey, _wrapUnwrapSOL),\n        Promise.all(\n          routeInfo.marketInfos.map(async ({ amm }) => {\n            if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n              if (!amm.market) return;\n              return await getOrCreateOpenOrdersAddress(\n                connection,\n                owner.publicKey,\n                amm.market,\n                await serumOpenOrdersPromise,\n              );\n            }\n            return;\n          }),\n        ),\n      ]);\n\n      instructions = {\n        intermediate: ataInstructions.userIntermediaryTokenAccountResult,\n        destination: ataInstructions.userDestinationTokenAccountResult,\n        openOrders: openOrdersInstructions,\n      };\n    }\n\n    const sourceInstruction =\n      inputMint.equals(WRAPPED_SOL_MINT) && _wrapUnwrapSOL\n        ? await createAndCloseWSOLAccount(connection, owner.publicKey, routeInfo.inAmount)\n        : {\n            ...getEmptyInstruction(),\n            address: await Token.getAssociatedTokenAddress(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              inputMint,\n              owner.publicKey,\n              true,\n            ),\n          };\n\n    // Construct platform fee\n    feeAccount = feeAccount || this.platformFeeAndAccounts.feeAccounts.get(outputMint.toBase58());\n\n    const platformFee = feeAccount\n      ? {\n          feeBps:\n            this.platformFeeAndAccounts.feeBps ||\n            Math.floor(routeInfo.marketInfos[lastMarketInfoIndex].platformFee.pct * 100),\n          feeAccount,\n        }\n      : undefined;\n\n    const preparedInstructions = await routeToInstructions({\n      user: owner,\n      tokenLedger: tokenLedger || this.tokenLedger,\n      openOrdersAddresses: instructions.openOrders.map((oo) => oo?.address),\n      userSourceTokenAccountAddress: sourceInstruction.address,\n      userIntermediaryTokenAccountAddress: instructions.intermediate?.address,\n      userDestinationTokenAccountAddress: instructions.destination.address,\n      routeInfo,\n      platformFee,\n      quoteMintToReferrer: this.quoteMintToReferrer,\n    });\n\n    const splitSetupRequired = isSplitSetupRequired(routeInfo.marketInfos);\n\n    const setupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const transactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const cleanupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    if (splitSetupRequired) {\n      if (instructions.openOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            setupTransactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      if (instructions.intermediate) {\n        setupTransactionBuilder.addInstruction({\n          ...instructions.intermediate,\n          cleanupInstructions: [],\n        });\n      }\n\n      setupTransactionBuilder.addInstruction({\n        ...sourceInstruction,\n        cleanupInstructions: [],\n      });\n\n      cleanupTransactionBuilder\n        .addInstruction({\n          ...getEmptyInstruction(),\n          cleanupInstructions: sourceInstruction.cleanupInstructions,\n        })\n        .addInstruction({\n          ...getEmptyInstruction(),\n          cleanupInstructions: instructions.intermediate?.cleanupInstructions ?? [],\n        });\n\n      // if source address the same as destination address, then we don't need to setup or cleanup twice, mainly SOL-SOL\n      if (!sourceInstruction.address.equals(instructions.destination.address)) {\n        setupTransactionBuilder.addInstruction({\n          ...instructions.destination,\n          cleanupInstructions: [],\n        });\n\n        cleanupTransactionBuilder.addInstruction({\n          ...getEmptyInstruction(),\n          cleanupInstructions: instructions.destination.cleanupInstructions,\n        });\n      }\n    } else {\n      if (instructions.openOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            transactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      if (instructions.intermediate) {\n        transactionBuilder.addInstruction(instructions.intermediate);\n      }\n\n      transactionBuilder.addInstruction(sourceInstruction);\n\n      // if source address the same as destination address, then we don't need to setup or cleanup twice, mainly SOL-SOL\n      if (!sourceInstruction.address.equals(instructions.destination.address)) {\n        transactionBuilder.addInstruction(instructions.destination);\n      }\n    }\n\n    transactionBuilder.addInstruction(preparedInstructions);\n\n    const recentBlockHash = (await this.connection.getRecentBlockhash('finalized')).blockhash;\n\n    const { transaction: setupTransaction } = await setupTransactionBuilder.build(recentBlockHash);\n\n    const { transaction } = await transactionBuilder.build(recentBlockHash);\n\n    const { transaction: cleanupTransaction } = await cleanupTransactionBuilder.build(recentBlockHash);\n\n    // Is this horrible? Yes.\n    const [setupTransactionObject, swapTransactionObject, cleanupTransactionObject] = ((): [\n      one: Transaction | undefined,\n      two: Transaction,\n      three: Transaction | undefined,\n    ] => {\n      if (setupTransaction.instructions.length && cleanupTransaction.instructions.length) {\n        return [setupTransaction, transaction, cleanupTransaction] as [\n          one: Transaction | undefined,\n          two: Transaction,\n          three: Transaction | undefined,\n        ];\n      } else if (setupTransaction.instructions.length) {\n        const [first, second] = [setupTransaction, transaction];\n\n        return [first, second, undefined];\n      } else if (cleanupTransaction.instructions.length) {\n        const [second, third] = [transaction, cleanupTransaction];\n\n        return [undefined, second, third];\n      } else {\n        return [undefined, transaction, undefined];\n      }\n    })();\n\n    const setupInstructions = instructions;\n    return {\n      transactions: {\n        setupTransaction: setupTransactionObject,\n        swapTransaction: swapTransactionObject,\n        cleanupTransaction: cleanupTransactionObject,\n      },\n      execute: ({ wallet, onTransaction }: ExecuteParams = {}) =>\n        this.executeInternal({\n          wallet,\n          onTransaction,\n          inputMint,\n          outputMint,\n          sourceInstruction,\n          setupInstructions,\n          setupTransaction: setupTransactionObject,\n          swapTransaction: swapTransactionObject,\n          cleanupTransaction: cleanupTransactionObject,\n          wrapUnwrapSOL: _wrapUnwrapSOL,\n          owner,\n        }),\n    };\n  };\n\n  /** sign, send and await confirmation for an exchange */\n  private async executeInternal({\n    wallet,\n    onTransaction,\n    inputMint,\n    outputMint,\n    sourceInstruction,\n    setupInstructions,\n    setupTransaction,\n    swapTransaction,\n    cleanupTransaction,\n    owner,\n    wrapUnwrapSOL,\n  }: {\n    wallet: ExecuteParams['wallet'];\n    onTransaction?: OnTransaction;\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    sourceInstruction: Instruction & { address: PublicKey };\n    setupInstructions: SetupInstructions;\n    setupTransaction?: Transaction;\n    swapTransaction: Transaction;\n    cleanupTransaction?: Transaction;\n    wrapUnwrapSOL?: boolean;\n    owner: Owner;\n  }): Promise<SwapResult> {\n    try {\n      const transactions = [setupTransaction, swapTransaction, cleanupTransaction].filter(\n        (tx): tx is Transaction => tx !== undefined,\n      );\n\n      const totalTxs = transactions.length;\n\n      if (owner.signer) {\n        const signer = owner.signer;\n        transactions.forEach((transaction) => {\n          transaction.sign(signer);\n        });\n      } else {\n        if (!wallet) {\n          throw new Error('Signer wallet not found');\n        }\n        if (totalTxs > 1) {\n          await wallet.signAllTransactions(transactions);\n        } else {\n          await wallet.signTransaction(transactions[0]);\n        }\n      }\n\n      if (setupTransaction) {\n        onTransaction?.(getSignature(setupTransaction), totalTxs, 'SETUP');\n\n        await validateTransactionResponse(\n          await transactionSenderAndConfirmationWaiter(this.connection, setupTransaction),\n        );\n      }\n\n      onTransaction?.(getSignature(swapTransaction), totalTxs, 'SWAP');\n\n      let swapError: Error | undefined;\n      let swapResult: SwapResult | undefined = undefined;\n\n      try {\n        const { txid, transactionResponse } = await validateTransactionResponse(\n          await transactionSenderAndConfirmationWaiter(this.connection, swapTransaction),\n        );\n\n        const [sourceTokenBalanceChange, destinationTokenBalanceChange] = getTokenBalanceChangesFromTransactionResponse(\n          {\n            txid,\n            inputMint,\n            outputMint,\n            user: owner.publicKey,\n            sourceAddress: sourceInstruction.address,\n            destinationAddress: setupInstructions.destination.address,\n            transactionResponse,\n            hasWrappedSOL: Boolean(cleanupTransaction) || !wrapUnwrapSOL,\n          },\n        );\n\n        swapResult = {\n          txid,\n          inputAddress: sourceInstruction.address,\n          outputAddress: setupInstructions.destination.address,\n          inputAmount: sourceTokenBalanceChange,\n          outputAmount: destinationTokenBalanceChange,\n        };\n      } catch (e: any) {\n        swapError = e;\n      } finally {\n        if (cleanupTransaction) {\n          onTransaction?.(getSignature(cleanupTransaction), totalTxs, 'CLEANUP');\n\n          // wait for confirmation but swallow error to conserve behaviour\n          await transactionSenderAndConfirmationWaiter(this.connection, cleanupTransaction);\n        }\n      }\n\n      if (swapError || !swapResult) {\n        throw swapError || new Error('Swap failed');\n      }\n\n      // return must be after `finally` clause to ensure we wait what we done in the `finally`\n      return swapResult;\n    } catch (error) {\n      return { error: error as TransactionError };\n    } finally {\n      const hasOpenOrders = setupInstructions?.openOrders.some((oo) => oo?.instructions.length);\n      if (\n        hasOpenOrders ||\n        setupInstructions?.intermediate?.instructions.length ||\n        setupInstructions?.destination.instructions.length\n      ) {\n        deleteInstructionCache({\n          instructionCache: this.instructionCache,\n          walletPublicKey: owner.publicKey.toBase58(),\n        });\n      }\n      this.routeCache.clear();\n    }\n  }\n\n  static async getIntermediateTokens() {\n    const intermediateTokensSet = await getTopTokens();\n    for (const swapProtocolToken of SWAP_PROTOCOL_TOKENS) {\n      intermediateTokensSet.add(swapProtocolToken);\n    }\n    const saberDecimalAmms = getSaberWrappedDecimalsAmms();\n\n    saberDecimalAmms.forEach((item) => {\n      intermediateTokensSet.add(item.wrappedToken.addDecimals.mint.toBase58());\n    });\n\n    return Array.from(intermediateTokensSet);\n  }\n\n  static createInitializeTokenLedgerInstruction = createInitializeTokenLedgerInstruction;\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport {\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  ALDRIN_SWAP_PROGRAM_ID,\n  DEVNET_SERUM_DEX_PROGRAM,\n  MAINNET_SERUM_DEX_PROGRAM,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  CROPPER_PROGRAM_ID,\n  CREMA_PROGRAM_ID,\n  SENCHA_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  LIFINITY_PROGRAM_ID,\n  WHIRLPOOL_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n} from '../constants';\nimport { Amm } from './amm';\nimport { SerumMarket, StableSwap } from './market';\nimport { SWAP_PROGRAM_ID as SABER_SWAP_PROGRAM_ID } from '@saberhq/stableswap-sdk';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { PROGRAM_ID_TO_LABEL } from './spl-token-swap/splTokenSwapPools';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { CremaAmm } from './crema/cremaAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { LifinityAmm } from './lifinity/lifinityAmm';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\n\nexport function ammFactory(address: PublicKey, accountInfo: AccountInfo<Buffer>, params?: any): Amm | undefined {\n  const programId = new PublicKey(accountInfo.owner);\n\n  if (programId.equals(MAINNET_SERUM_DEX_PROGRAM) || programId.equals(DEVNET_SERUM_DEX_PROGRAM)) {\n    const decoded = SerumMarket.getLayout(programId).decode(accountInfo.data);\n    if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n      throw new Error('Invalid market');\n    }\n    const serumMarket = new SerumMarket(decoded, 0, 0, {}, programId);\n    return new SerumAmm(serumMarket);\n  } else if (programId.equals(RAYDIUM_AMM_V4_PROGRAM_ID)) {\n    const raydiumAmm = new RaydiumAmm(address, accountInfo, params);\n    if (raydiumAmm.status === 1) {\n      return raydiumAmm;\n    }\n  } else if (programId.equals(MERCURIAL_SWAP_PROGRAM_ID)) {\n    return new MercurialAmm(address, accountInfo, params);\n  } else if (programId.equals(SABER_SWAP_PROGRAM_ID)) {\n    const stableSwap = StableSwap.loadWithData(\n      address,\n      accountInfo.data,\n      findProgramAddressSync([address.toBuffer()], SABER_SWAP_PROGRAM_ID)[0],\n    );\n\n    if (stableSwap.state.isPaused || !stableSwap.state.isInitialized) return;\n\n    return new SaberAmm(stableSwap);\n  } else if (programId.equals(CREMA_PROGRAM_ID)) {\n    return new CremaAmm(address, accountInfo);\n  } else if (programId.equals(ALDRIN_SWAP_PROGRAM_ID) || programId.equals(ALDRIN_SWAP_V2_PROGRAM_ID)) {\n    return new AldrinAmm(address, accountInfo, params);\n  } else if ([...PROGRAM_ID_TO_LABEL.keys()].includes(programId.toBase58())) {\n    const label = PROGRAM_ID_TO_LABEL.get(accountInfo.owner.toBase58()) ?? 'Unknown';\n    return new SplTokenSwapAmm(address, accountInfo, label);\n  } else if (programId.equals(CROPPER_PROGRAM_ID)) {\n    return new CropperAmm(address, accountInfo, params);\n  } else if (programId.equals(SENCHA_PROGRAM_ID)) {\n    const senchaAmm = new SenchaAmm(address, accountInfo);\n    if (senchaAmm.isPaused) return;\n    return senchaAmm;\n  } else if (programId.equals(LIFINITY_PROGRAM_ID)) {\n    return new LifinityAmm(address, accountInfo);\n  } else if (programId.equals(WHIRLPOOL_PROGRAM_ID)) {\n    return new WhirlpoolAmm(address, accountInfo);\n  } else if (programId.equals(CYKURA_PROGRAM_ID)) {\n    return new CykuraAmm(address, accountInfo);\n  }\n  // Not supported by frontend\n  return;\n}\n","import fetch from 'cross-fetch';\n\ntype Address = string;\n\nexport async function getTopTokens() {\n  const topTokens = (await (await fetch('https://cache.jup.ag/top-tokens')).json()) as Address[];\n\n  return new Set(topTokens.filter((_, idx) => idx < 60));\n}\n"],"names":["IDL","version","name","instructions","accounts","isMut","isSigner","args","type","option","defined","kind","fields","types","variants","errors","code","msg","WRAPPED_SOL_MINT","PublicKey","MAINNET_SERUM_DEX_PROGRAM","DEVNET_SERUM_DEX_PROGRAM","MARKETS_URL","devnet","testnet","RAYDIUM_AMM_V4_PROGRAM_ID","ALDRIN_SWAP_PROGRAM_ID","ALDRIN_SWAP_V2_PROGRAM_ID","SABER_ADD_DECIMALS_PROGRAM_ID","CROPPER_PROGRAM_ID","SENCHA_PROGRAM_ID","LIFINITY_PROGRAM_ID","CREMA_PROGRAM_ID","JUPITER_WALLET","MERCURIAL_SWAP_PROGRAM_ID","WHIRLPOOL_PROGRAM_ID","CYKURA_PROGRAM_ID","CYKURA_FACTORY_STATE_ADDRESS","SWAP_PROTOCOL_TOKENS","JUPITER_ERRORS","Object","freeze","TransactionNotConfirmed","BalancesNotExtractedProperly","reduce","accErrors","error","PublicKeyLayout","Layout","constructor","property","layout","blob","super","span","this","getSpan","b","offset","decode","encode","src","toBuffer","publicKey","U64Layout","u64","toArrayLike","Buffer","uint64","uint128","CropperTokenSwapLayout","struct","u8","CropperStateLayout","CROPPER_STATE_ADDRESS","accountInfoToCropperPoolState","address","accountInfo","programId","owner","decoded","data","authority","findProgramAddressSync","isInitialized","Boolean","nonce","ammId","serumProgramId","tokenProgramId","tokenAAccount","tokenBAccount","serumMarket","poolMint","mintA","mintB","Side","Bid","bid","Ask","ask","JUPITER_PROGRAM_ID","JUPITER_PROGRAM","Program","PRODUCTION_TOKEN_LEDGERS","TOKEN_LEDGER","Math","floor","random","length","stableSwapNPoolIntoMercurialExchange","swayLayout","sourceTokenAccount","destinationTokenAccount","userTransferAuthority","swapProgram","swapState","tokenProgram","TOKEN_PROGRAM_ID","poolAuthority","raydiumAmmToRaydiumSwap","raydiumAmm","userSourceTokenAccount","userDestinationTokenAccount","ammAuthority","Uint8Array","from","replace","serumMarketKeys","Error","ammOpenOrders","poolCoinTokenAccount","poolPcTokenAccount","serumBids","serumAsks","serumEventQueue","serumCoinVaultAccount","serumPcVaultAccount","serumVaultSigner","userSourceOwner","marketIntoSerumSwap","market","openOrdersAddress","orderPayerTokenAccountAddress","coinWallet","pcWallet","vaultSigner","createProgramAddressSync","vaultSignerNonce","openOrders","requestQueue","eventQueue","bids","bidsAddress","asks","asksAddress","coinVault","baseVault","pcVault","quoteVault","orderPayerTokenAccount","dexProgram","rent","SYSVAR_RENT_PUBKEY","createMercurialExchangeInstruction","swapLayout","inAmount","minimumOutAmount","tokenLedger","platformFee","_platformFee$feeBps","remainingAccounts","swapTokenAccount","tokenAccounts","push","pubkey","isWritable","prepareRemainingAccounts","feeAccount","instruction","mercurialExchange","BN","feeBps","createSerumSwapInstruction","sourceMint","referrer","_platformFee$feeBps2","side","equals","baseMintAddress","serumSwap","createTokenSwapInstruction","tokenSwapState","isStep","_platformFee$feeBps3","swapSource","swapDestination","tokenAccountA","tokenAccountB","stepTokenSwap","tokenSwap","tokenSwapProgram","swap","source","destination","poolToken","poolFee","createSenchaSwapInstruction","poolState","_platformFee$feeBps4","token0Mint","token0Reserves","token1Reserves","feesSource","feesDestination","token0Fees","token1Fees","senchaExchange","userAuthority","inputUserAccount","inputTokenAccount","inputFeesAccount","outputUserAccount","outputTokenAccount","outputFeesAccount","createCropperSwapInstruction","_platformFee$feeBps5","cropperTokenSwap","createRaydiumSwapInstruction","_platformFee$feeBps6","raydiumSwapV2","createAldrinSwapInstruction","_platformFee$feeBps7","userBaseTokenAccount","userQuoteTokenAccount","baseTokenMint","aldrinSwap","pool","poolSigner","baseTokenVault","quoteTokenVault","feePoolTokenAccount","walletAuthority","createAldrinV2SwapInstruction","curve","_platformFee$feeBps8","aldrinV2Swap","createCremaSwapInstruction","_platformFee$feeBps9","cremaTokenSwap","poolSourceTokenAccount","poolDestinationTokenAccount","poolTicksAccount","ticksKey","createRiskCheckAndFeeInstruction","_platformFee$feeBps10","riskCheckAndFee","createSetTokenLedgerInstruction","tokenAccountAddress","setTokenLedger","tokenAccount","saberPoolIntoSaberSwap","saberPool","sourceMintAddress","feesTokenAccount","state","tokenA","mint","tokenB","adminFeeAccount","reserve","config","swapProgramID","swapAccount","swapAuthority","createSaberSwapInstruction","stableSwap","_platformFee$feeBps11","saberSwap","createSaberAddDecimalsDepositInstruction","addDecimals","_platformFee$feeBps12","saberAddDecimalsDeposit","addDecimalsProgram","wrapper","wrapperMint","wrapperUnderlyingTokens","userUnderlyingTokens","userWrappedTokens","createSaberAddDecimalsWithdrawInstruction","_platformFee$feeBps13","saberAddDecimalsWithdraw","createLifinitySwapInstruction","_platformFee$feeBps14","tokenAMint","lifinityTokenSwap","amm","sourceInfo","destinationInfo","pythAccount","pythPcAccount","configAccount","createCykuraSwapInstruction","additionalArgs","_platformFee$feeBps15","cykuraSwap","signer","factoryState","poolAddress","inputVault","outputVault","lastObservationState","coreProgram","concat","swapAccountMetas","nextObservationState","createWhirlpoolSwapInstruction","_platformFee$feeBps16","tokenOwnerAccountA","tokenOwnerAccountB","aToB","whirlpoolSwap","tokenAuthority","whirlpool","tokenVaultA","tokenVaultB","tickArray0","tickArray1","tickArray2","oracle","getSaberWrappedDecimalsAmms","addDecimalsJson","map","addDecimalJson","underlying","underlyingDecimals","decimals","SaberAddDecimalsAmm","WrappedToken","multiplier","getOutputAmount","inputAmount","inputMint","calculateWithdrawOutputAmount","calculateDepositOutputAmount","toString","JSBI","multiply","BigInt","divide","wrappedToken","id","label","shouldPrefetch","toBase58","getAccountsForUpdate","Array","update","_accountInfoMap","getQuote","amount","notEnoughLiquidity","outAmount","toNumber","feeAmount","feeMint","feePct","priceImpactPct","createSwapInstructions","swapParams","reserveTokenMints","getTwoPermutations","array","acc","item","forEach","otherItem","async","chunkedGetMultipleAccountInfos","connection","pks","chunkSize","Promise","all","size","apply","ceil","_","index","slice","chunk","_buildArgs","commitment","_rpcRequest","then","result","value","catch","e","console","flat","mapAddressToAccountInfos","accountInfoMap","addresses","get","tokenAccountsToJSBIs","AMM_INFO_LAYOUT_V4","nu64","RaydiumAmm","ammAccountInfo","params","coinMint","pcMint","status","ammTargetOrders","coinReserve","pcReserve","calculator","coinMintAddress","pcMintAddress","keys","swapFeeNumerator","swapFeeDenominator","Decimal","div","TokenSwapConstantProduct","Fraction","ZERO_FRACTION","static","serumMarketInfo","decodedMarket","Market","getLayout","poolCoinTokenAccountInfo","poolPcTokenAccountInfo","ammOpenOrdersAccountInfo","coinAmount","pcAmount","tokenAmountAccessor","OpenOrders","fromAccountInfo","add","baseTokenTotal","sub","String","needTakePnlCoin","quoteTokenTotal","needTakePnlPc","tokenAccountInfo","fromBuffer","outputIndex","exchange","expectedOutputAmount","fees","priceImpact","STABLE_MARKET_ADDRESSES","getL2","orderbook","descending","isBids","key","quantity","slab","items","price","ushrn","priceLotsToDecimal","baseLotSize","_decoded","isZero","numerator","denominator","quotient","rem","umod","gcd","divideBnToDecimal","mul","quoteLotSize","_baseSplTokenMultiplier","_quoteSplTokenMultiplier","SerumAmm","_orderbooks","orderbooks","asksAccountInfo","bidsAccountInfo","Orderbook","destinationMint","outAmountMeta","fromAmount","fromMint","toMint","takerFeePct","includes","quoteMintAddress","pcIn","coinOut","bestPrice","worstPrice","totalCost","totalCoins","quoteSizeLots","quoteSizeLotsToNumber","availablePc","ZERO","baseSizeLots","baseSizeLotsToNumber","lotPrice","lotQuantity","equal","orderCoinAmount","orderPcAmount","greaterThanOrEqual","numberLotsPurchasable","subtract","bestPriceDecimal","bestPriceSizeLots","totalCostSizeLots","lessThanOrEqual","minimum","in","out","forecastBuy","coinIn","pcOut","totalCoin","availableCoin","numberLotsCanSell","totalCoinAmountToSell","pcOutInteger","worstPriceDecimal","minus","greaterThan","round","forecastSell","getOutAmountMeta","minInAmount","minOutAmount","_swapParams$quoteMint","quoteMintToReferrer","SplitTradeAmm","firstAmm","secondAmm","shouldSplitSetup","portion1","portion2","requiresSplitSetup","isSplitSupported","firstAmmTwoPermutations","secondAmmTwoPermutations","firstAmmTwoPermutation","secondAmmTwoPermutation","every","portion","sort","a","join","quoteParams","_firstQuote$minInAmou","_secondQuote$minInAmo","_firstQuote$minOutAmo","_secondQuote$minOutAm","sourceMintString","bestSolution","firstQuote","undefined","secondQuote","p","firstAmount","secondAmount","firstAmmFee","secondAmmFee","isValidRoute","ammA","ammB","SaberAmm","Stable","TWO","targetAmpFactor","ONE","trade","tokenAccountInfos","info","deserializeAccount","asFraction","toFixed","inputIndex","Percentage","fromDecimal","number","fromFraction","toDecimalPlaces","num","denom","toDecimal","eq","p2","denomGcd","denomLcm","p1DenomAdjustment","p2DenomAdjustment","p1NumeratorAdjusted","p2NumeratorAdjusted","newNumerator","FEES_LAYOUT","POOL_FIELDS_COMMON","POOL_LAYOUT","POOL_V2_LAYOUT","STABLE_CURVE_LAYOUT","accountInfoToAldrinPoolState","isV2","curveObject","curveType","quoteTokenMint","feeBaseAccount","feeQuoteAccount","traderFee","tradeFeeNumerator","tradeFeeDenominator","ownerFee","ownerTradeFeeNumerator","ownerTradeFeeDenominator","AldrinAmm","amp","TokenSwapStable","decodeStableCurveAmp","STEP_TOKEN_SWAP_PROGRAM_ID","PROGRAM_ID_TO_LABEL","Map","TokenSwapLayout","StepTokenSwapLayout","CurveType","SplTokenSwapAmm","swapStateAccountInfo","tokenSwapAccountInfo","tokenSwapData","tokenPool","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","curveParameters","poolNonce","accountInfoToTokenSwapState","ConstantProduct","FEE_DENOMINATOR","pow","MercurialSwapLayout","u32","accountInfoToMercurialSwapLayout","tokenAccountsLength","precisionMultipliers","precisionMultiplierA","precisionMultiplierB","precisionMultiplierC","precisionMultiplierD","tokenAccountC","tokenAccountD","amplificationCoefficient","feeNumerator","precisionFactor","MercurialAmm","precisionMultiplier","filter","x","findIndex","tokenMints","tokenMint","decodeSwapLayout","CropperAmm","getStateFromStateAccount","getAccountInfo","stateAccountInfoToCropperState","stateOwner","feeOwner","initialSupply","returnFeeNumerator","fixedFeeNumerator","feeDenominator","tokenAFeeAccount","tokenBFeeAccount","decodePoolState","accountInfoToCremaPoolState","TokenSwapAccountLayout","swapTokenA","swapTokenB","tokenBMint","fee","currentSqrtPrice","currentLiquity","CremaAmm","ticks","ticksAccountInfo","ticksInfo","parseTicksAccount","preSwapA","preSwapB","amountOut","feeUsed","impact","amountIn","calculateSwapA2B","currentPriceA","amountUsed","abs","calculateSwapB2A","currentPriceB","SenchaSwapLayout","SenchaAmm","isPaused","bump","token1Mint","tradeFeeKbps","accountInfoToSenchaPoolState","LifinityAmm","poolInfo","accountInfos","LIFINITY_AMM_LAYOUT","poolFeeAccount","poolCoinMint","poolPcMint","accountInfoLifinitySwapLayout","poolCoinDecimal","poolPcDecimal","idx","account","tradeDirection","TradeDirection","AtoB","BtoA","pyth","pythPc","coinBalance","pcBalance","getParsedData","getCurveAmount","publishSlot","amountSwapped","feePercent","parseWhirlpoolSafe","whirlpoolData","parseWhirlpool","WhirlpoolAmm","whirlpoolAccountInfo","tickArrays","tickPks","feeRate","getTickArrayPks","clear","tickArrayPk","tickArrayAddress","tickArrayAccountInfo","tickArray","parseTickArray","set","swapQuote","getSwapQuote","tokenAmount","isInput","Number","quotePrice","currentPrice","sqrtPrice","tokenMintA","getTickArrayPublicKeysForSwap","tickCurrentIndex","tickSpacing","tokenMintB","SolanaTickDataProvider","program","bitmapCache","tickCache","accountsToFetch","bitmaps","tickCurrent","compressed","wordPos","tickPosition","bitmapsToFetch","WORD_POS_MIN","TickMath","MIN_TICK","WORD_POS_MAX","MAX_TICK","minWord","max","maxWord","min","i","getBitmapAddressSync","fetchedBitmaps","tickBitmapState","fetchMultiple","tickAddresses","_fetchedBitmaps$i","currentWordPos","wordArray","word","generateBitmapWord","eqn","j","shrn","and","tick","tickAddress","getTickAddressSync","fetchedTicks","tickState","fetchedTick","liquidityNet","log","lazyLoadAccountsToCache","bitmap","tickAddressesToFetch","_bitmaps$i$word","_bitmaps$i","getTick","savedTick","getTickAddress","TICK_SEED","token0","token1","u32ToSeed","getBitmapAddress","BITMAP_SEED","u16ToSeed","getBitmap","savedBitmap","nextInitializedTickWithinOneWord","lte","bitPos","cachedBitmap","next","nextBit","initialized","nextInitializedBit","buildTick","updateCachedAccountInfos","bitmapAddress","bitmapAccountInfo","coder","tickStateAccountInfo","CYCLOS_CORE","anchor","Provider","skipPreflight","CykuraAmm","accountInfoOrPoolState","tickDataProvider","tokens","vaults","sqrtPriceX32","liquidity","Token","CykuraPool","Pool","vault0","ASSOCIATED_TOKEN_PROGRAM_ID","vault1","poolAccountInfo","inputToken","currentOutAmount","newPool","CurrencyAmount","fromRawAmount","priceImpactDecimal","sqrtRatioX32","OBSERVATION_SEED","observationIndex","observationCardinalityNext","isPlatformFeeSupported","amms","firstMarket","secondMarket","getCacheMintKey","marketInfos","_marketInfos$","_marketInfos$2","_marketInfos$3","outputMint","getInstructionCache","instructionCache","walletPublicKey","cacheKey","_instructionCache$get","findOrCreateAssociatedAccountByMint","payer","mintAddress","unwrapSOL","toAccount","getAssociatedTokenAddress","cleanupInstructions","createAssociatedTokenAccountInstruction","createCloseAccountInstruction","signers","routeAtaInstructions","userPublicKey","getUserIntermediateTokenAccountAddress","userIntermediaryTokenAccountResult","userDestinationTokenAccountResult","getUserDestinationTokenAccountAddress","getOrCreateOpenOrdersAddress","user","marketToOpenOrdersAddress","marketAddress","openOrdersAccountInfo","newOpenOrdersAddress","ix","createOpenOrders","systemProgram","SystemProgram","createOpenOrdersInstruction","sum","values","calculateTransactionDepositAndFee","intermediate","hasWrapUnwrapSOL","feeCalculator","openOrdersDeposits","ooi","ataDeposits","signatureFee","oo","lamportsPerSignature","totalFeeAndDeposits","minimumSOLForTransaction","_item$instructions$le","NO_PLATFORM_FEE","feeAccounts","getPlatformFeeAccounts","feeAccountOwner","getTokenAccountsByOwner","deserializedtokenAccount","TransactionBuilder","feePayer","addInstruction","build","recentBlockHash","getLatestBlockhash","blockhash","txFields","recentBlockhash","curr","transaction","Transaction","execute","isKeyPair","sendTransaction","Owner","_owner","isPublicKey","secretKey","wait","time","resolve","setTimeout","extractTokenBalanceChangeFromTransaction","meta","accountKeyIndex","_meta$postTokenBalanc","_meta$postTokenBalanc2","_meta$preTokenBalance","_meta$preTokenBalance2","postBalance","postTokenBalances","find","postTokenBalance","accountIndex","uiTokenAmount","preBalance","preTokenBalances","preTokenBalance","parseInt","diffTokenBalance","message","accountKeys","extractSOLChangeFromTransaction","postBalances","preBalances","getUnixTs","Date","getTime","SEND_OPTIONS","maxRetries","transactionSenderAndConfirmationWaiter","signedTransaction","timeout","pollInterval","sendInterval","sendRetries","rawTransaction","serialize","txid","sendRawTransaction","start","lastSendTimestamp","retries","timestamp","response","getTransaction","transactionResponse","getSignature","signature","bs58","validateArray","isArray","TypeError","multiplySize","cache","getIndex","getInputOutputId","getQuoteId","processInputRouteSegmentToRoutesInfos","inputRouteSegment","getDepositAndFeeForRoute","platformFeeBps","slippage","filterTopNResult","onlyDirectRoutes","inputMintString","outputMintString","tradeIdQuoteMap","inputMintInnerMap","routes","maxLevel","walkTheTree","level","walked","outMint","tradeId","quoteMap","quotes","quote","getQuoteMap","filteredAmms","has","arr","callback","ammCrossProtocolPairs","splitTradeAmm","create","mints","_mints","ammsArr","_inputRouteSegment$ge","arrays","validateDimensions","sizeStr","isFinite","toExponential","validateCombinations","validateInput","cachedLoopFunc","loopFunc","indexes","middle","end","repeat","Function","mGetLoopFunc","getLoopFunc","fastCartesian","route","intermediateAmount","outAmountWithSlippage","platformFeeSupported","legs","entries","_tradeIdQuoteMap$get","pct","outAmountAfterFees","legOutAmountWithSlippage","lpFee","getDepositAndFee","priceFactor","marketInfo","validateTransactionResponse","_transactionResponse$","TransactionError","err","parseErrorForTransaction","Jupiter","cluster","tokenRouteSegments","platformFeeAndAccounts","routeCacheDuration","wrapUnwrapSOL","intermediateTokens","shouldLoadSerumOpenOrders","serumOpenOrdersPromise","routeCache","getDepositAndFees","openOrdersInstructionsPromise","promise","openOrdersInstructions","instructionResult","walletCache","setInstructionCache","getDepositAndFeeFromInstructions","getDepositAndFeesForUser","routeInfo","_instructions$interme","lastMarketInfoIndex","_wrapUnwrapSOL","ataInstructions","sourceInstruction","transfer","fromPubkey","toPubkey","lamports","createSyncNativeInstruction","createAndCloseWSOLAccount","preparedInstructions","openOrdersAddresses","userSourceTokenAccountAddress","userIntermediaryTokenAccountAddress","userDestinationTokenAccountAddress","effectiveQuoteMintToReferrer","mi","isSerumAndRaydium","userTokenAccountAddresses","legInputAmount","legPlatformFee","routeToInstructions","splitSetupRequired","isSplitSetupRequired","setupTransactionBuilder","transactionBuilder","cleanupTransactionBuilder","_instructions$interme2","_instructions$interme3","getRecentBlockhash","setupTransaction","cleanupTransaction","setupTransactionObject","swapTransactionObject","cleanupTransactionObject","first","second","third","setupInstructions","transactions","swapTransaction","wallet","onTransaction","executeInternal","marketUrl","restrictIntermediateTokens","_quoteMintToReferrer","fetchTokenRouteSegments","getRecentBlockhashAndContext","getIntermediateTokens","jupiter","setUserPublicKey","getAccountToAmmMap","accountToAmmMap","tokenRouteSegment","forceFetch","now","inputMintAndOutputMint","localeCompare","inputRouteSegments","inputSegment","outputSegment","inputInnerMap","outputInnerMap","intersectionAmms","computeInputRouteSegments","shouldBustCache","fetchTimestamp","accountInfosMap","accountsToFetchSet","Set","ammMap","innerMap","fetchAccountInfos","routesInfos","cached","delete","findSerumOpenOrdersForOwner","marketCaches","fetch","url","json","fetchMarketCache","firstReserveMint","secondReserveMint","inMint","segments","addSegment","getTokenRouteSegments","marketsCache","marketCacheToAccountInfo","marketKeyedAccountInfos","format","rest","extraKeys","extraKeyedAccountInfos","fetchExtraKeyedAccountInfos","keyedAccountInfo","SerumMarket","accountFlags","SABER_SWAP_PROGRAM_ID","StableSwap","loadWithData","SWAP_PROGRAM_ID","_PROGRAM_ID_TO_LABEL$","senchaAmm","ammFactory","prefetchAmms","getAllAmms","getRouteMap","computeRouteMap","routeMap","firstLevelOutputs","validOutputMints","firstLevelOutputMint","firstLevelAmms","_tokenRouteSegments$g","secondLevelOutputs","secondLevelOutputMint","secondLevelAmms","firstLevelAmm","secondLevelAmm","tx","totalTxs","sign","signAllTransactions","signTransaction","swapError","swapResult","sourceTokenBalanceChange","destinationTokenBalanceChange","sourceAddress","destinationAddress","hasWrappedSOL","getTokenBalanceChangesFromTransactionResponse","inputAddress","outputAddress","outputAmount","_setupInstructions$in","some","_instructionCache$get2","deleteInstructionCache","intermediateTokensSet","topTokens","getTopTokens","swapProtocolToken","newMarketToOpenOrdersAddress","findForOwner","createInitializeTokenLedgerInstruction","initializeTokenLedger","process"],"mappings":"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"}