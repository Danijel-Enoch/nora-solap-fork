import React from 'react';
import { Connection, PublicKey, Cluster } from '@solana/web3.js';
import { Errors } from './error';
import type { SignerWalletAdapter } from '@solana/wallet-adapter-base';
import { RouteInfo, SwapResult, TOKEN_LIST_URL, MARKETS_URL, JUPITER_ERRORS, TransactionFeeInfo, getRouteInfoUniqueId, PlatformFeeAndAccounts, QuoteMintToReferrer, IConfirmationTxDescription, OnTransaction } from '@jup-ag/core';
export declare type JupiterError = typeof Errors[keyof typeof Errors];
export type { IConfirmationTxDescription };
interface UseJupiterResult {
    /** routes that are possible, sorted decending based on outAmount */
    routes?: RouteInfo[];
    /** exchange function to submit transaction */
    exchange: (params: {
        wallet: Pick<SignerWalletAdapter, 'signAllTransactions' | 'publicKey' | 'sendTransaction' | 'signTransaction'>;
        routeInfo: RouteInfo;
        /** a confirmation waiter factory to make a confirmation waiter for each transaction */
        onTransaction?: OnTransaction;
    }) => Promise<SwapResult>;
    /** refresh function to refetch the prices */
    refresh: () => void;
    /** last refresh timestamp */
    lastRefreshTimestamp: number;
    /** all possible token mints to be chosen from */
    allTokenMints: string[];
    /** route map input mint with output mints */
    routeMap: Map<string, string[]>;
    /** loading state */
    loading: boolean;
    error: JupiterError | undefined;
}
interface JupiterProps {
    connection: Connection;
    cluster: Cluster;
    userPublicKey?: PublicKey;
    platformFeeAndAccounts?: PlatformFeeAndAccounts;
    quoteMintToReferrer?: QuoteMintToReferrer;
    routeCacheDuration?: number;
    onlyDirectRoutes?: boolean;
    marketUrl?: string;
    restrictIntermediateTokens?: boolean;
}
export declare const JupiterProvider: React.FC<JupiterProps>;
interface UseJupiterProps {
    amount: number;
    inputMint: PublicKey | undefined;
    outputMint: PublicKey | undefined;
    slippage: number;
    debounceTime?: number;
}
export declare const useJupiterRouteMap: () => Map<string, string[]>;
export declare const useJupiter: ({ amount, inputMint, outputMint, slippage, debounceTime, }: UseJupiterProps) => UseJupiterResult;
export { RouteInfo, getRouteInfoUniqueId, TOKEN_LIST_URL, JUPITER_ERRORS, MARKETS_URL, Errors, TransactionFeeInfo };
