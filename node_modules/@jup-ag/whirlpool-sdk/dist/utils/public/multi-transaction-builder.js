"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiTransactionBuilder = void 0;
/**
 * Collection of TransactionBuilders for grouping multiple transactions together for sendAll.
 */
class MultiTransactionBuilder {
    constructor(provider, txBuilders) {
        this.provider = provider;
        this.txBuilders = txBuilders;
    }
    buildAndExecute() {
        return __awaiter(this, void 0, void 0, function* () {
            const txRequest = yield Promise.all(this.txBuilders.map((txBuilder) => __awaiter(this, void 0, void 0, function* () {
                const { transaction, signers } = yield txBuilder.build();
                return { tx: transaction, signers };
            })));
            return this.provider.sendAll(txRequest, { commitment: "singleGossip" });
        });
    }
    addTxBuilder(txBuilder) {
        this.txBuilders.push(txBuilder);
        return this;
    }
    merge(multiTxBuilder) {
        return new MultiTransactionBuilder(this.provider, [
            ...this.txBuilders,
            ...multiTxBuilder.txBuilders,
        ]);
    }
    static mergeAll(multiTxBuilders) {
        var _a;
        const provider = (_a = multiTxBuilders[0]) === null || _a === void 0 ? void 0 : _a.provider;
        if (!provider) {
            return null;
        }
        const combinedTxBuilders = [];
        multiTxBuilders.forEach(({ txBuilders }) => combinedTxBuilders.push(...txBuilders));
        return new MultiTransactionBuilder(provider, combinedTxBuilders);
    }
}
exports.MultiTransactionBuilder = MultiTransactionBuilder;
